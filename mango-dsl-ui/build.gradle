dependencies {
	compile project(':mango-dsl')
	compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.4.3'
}

buildscript {
    repositories {
	    mavenCentral()
	    maven {
	            url "http://build.eclipse.org/common/xtend/maven/"
	    }
    }

    dependencies {
        classpath project(':mango-dsl')
		classpath 'org.eclipse.xtend:org.eclipse.xtend.lib:2.4.3'
        classpath 'org.eclipse.xtend:org.eclipse.xtend.standalone:2.4.3'
//		classpath 'org.eclipse.xtext:org.eclipse.xtext.xbase.lib:2.6.0'
//		classpath  'org.eclipse.xtext:org.eclipse.xtext.xtext:2.6.0'
//		classpath  'org.eclipse.xtext:org.eclipse.xtext.xbase:2.6.0'
//		classpath  'org.eclipse.xtext:org.eclipse.xtext:2.6.0'
//		classpath  'org.eclipse.xtext:org.eclipse.xtext.builder.standalone:2.6.0'
    }
}

def srcTempDir = file('build/src-temp')
def xtendSrcDir = srcTempDir //file('src')
def xtendGenTargetDir = file('xtend-gen')

sourceSets {
    main {
        java {
            srcDirs = [ 'src', 'xtend-gen', 'src-gen' ] 

        }
        resources {
            srcDirs = [ 'src', 'xtend-gen', 'src-gen' ] 
        }
    }
	
    generatedXtext {
        java {
            srcDirs = [ 'src-gen' ]
        }
        resources {
            srcDirs = [ 'src-gen' ]
        }
		
		compileClasspath += project.sourceSets.main.compileClasspath
    }
	
	generatedXtend {
		java {
			srcDirs = [ 'xtend-gen' ]
		}
		resources {
			srcDirs = [ 'xtend-gen' ]
		}
		
		compileClasspath += project.sourceSets.main.compileClasspath
	}

}

task copyTempSources(type: Copy) {
	
	xtendGenTargetDir.delete()
	xtendGenTargetDir.mkdirs()
	
	srcTempDir.delete()
	srcTempDir.mkdirs()
	
	into srcTempDir
	
	from sourceSets.generatedXtext.allSource
	from sourceSets.main.allSource
}

eclipse {
    project {
	    natures 'org.eclipse.xtext.ui.shared.xtextNature'
	    buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
    }
}

import org.apache.log4j.BasicConfigurator
import org.eclipse.xtend.core.XtendStandaloneSetup
import org.eclipse.xtend.core.compiler.batch.XtendBatchCompiler

task generateXtend {

    inputs.dir xtendSrcDir
    outputs.dir xtendGenTargetDir

    doLast {
		
        def srcPath = xtendSrcDir.absolutePath
        def targetPath = xtendGenTargetDir.absolutePath
        def classpath = configurations.compile.asPath

        BasicConfigurator.configure()
		
		XtendBatchCompiler compiler = new XtendStandaloneSetup().createInjectorAndDoEMFRegistration().getInstance(XtendBatchCompiler.class)
        compiler.setOutputPath(targetPath)
        compiler.setClassPath(classpath)
        compiler.setSourcePath(srcPath)

        if (!compiler.compile()) {
                throw new GradleException("Xtend compilation failed.");
        }
    }
}

copyTempSources
generateXtend.dependsOn copyTempSources
compileJava.dependsOn generateXtend
