/**
 * generated by Xtext
 */
package io.pelle.mango.dsl.generator.client.web;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import io.pelle.mango.client.base.modules.dictionary.model.DictionaryModelProvider;
import io.pelle.mango.client.base.modules.navigation.NavigationTreeProvider;
import io.pelle.mango.dsl.generator.GeneratorConstants;
import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
import io.pelle.mango.dsl.generator.client.web.BaseServices;
import io.pelle.mango.dsl.mango.Dictionary;
import io.pelle.mango.dsl.mango.Model;
import io.pelle.mango.dsl.mango.NavigationNode;
import java.util.Iterator;
import javax.inject.Inject;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GWTClient extends BaseServices {
  @Inject
  @Extension
  private DictionaryNameUtils _dictionaryNameUtils;
  
  public CharSequence gwtClientModule(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<!DOCTYPE module PUBLIC \"-//Google Inc.//DTD Google Web Toolkit 1.6.4//EN\" \"http://google-web-toolkit.googlecode.com/svn/tags/1.6.4/distro-source/core/src/gwt-module.dtd\">");
    _builder.newLine();
    _builder.append("<module>");
    _builder.newLine();
    _builder.append("<inherits name=\"com.google.gwt.user.User\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<source path=\"");
    _builder.append(GeneratorConstants.CLIENT_PACKAGE_POSTFIX, "\t");
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("</module>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gwtClientConfiguration(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("package ");
    String _modelPackageName = this._dictionaryNameUtils.modelPackageName(model);
    _builder.append(_modelPackageName, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public class ");
    String _gwtClientconfigurationName = this._dictionaryNameUtils.gwtClientconfigurationName(model);
    _builder.append(_gwtClientconfigurationName, "\t\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ");
    String _gwtClientconfigurationName_1 = this._dictionaryNameUtils.gwtClientconfigurationName(model);
    _builder.append(_gwtClientconfigurationName_1, "\t\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void registerAll()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("registerDictionaries();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      TreeIterator<EObject> _eAllContents = model.eAllContents();
      Iterator<NavigationNode> _filter = Iterators.<NavigationNode>filter(_eAllContents, NavigationNode.class);
      boolean _isEmpty = IteratorExtensions.isEmpty(_filter);
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t\t\t");
        _builder.append("registerNavigation();");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void registerDictionaries()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    {
      TreeIterator<EObject> _eAllContents_1 = model.eAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
      Iterable<Dictionary> _filter_1 = Iterables.<Dictionary>filter(_iterable, Dictionary.class);
      for(final Dictionary dictionary : _filter_1) {
        _builder.append("\t\t\t");
        String _name = DictionaryModelProvider.class.getName();
        _builder.append(_name, "\t\t\t");
        _builder.append(".registerDictionary(");
        String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(model);
        _builder.append(_dictionaryClassFullQualifiedName, "\t\t\t");
        _builder.append(".");
        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionary);
        _builder.append(_dictionaryConstantName, "\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      TreeIterator<EObject> _eAllContents_2 = model.eAllContents();
      Iterator<NavigationNode> _filter_2 = Iterators.<NavigationNode>filter(_eAllContents_2, NavigationNode.class);
      boolean _isEmpty_1 = IteratorExtensions.isEmpty(_filter_2);
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t\t");
        _builder.append("public static void registerNavigation()");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        String _name_1 = NavigationTreeProvider.class.getName();
        _builder.append(_name_1, "\t\t\t");
        _builder.append(".addRootNavigationElement(");
        String _navigationNodeClassName = this._dictionaryNameUtils.navigationNodeClassName(model);
        _builder.append(_navigationNodeClassName, "\t\t\t");
        _builder.append(".ROOT);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
