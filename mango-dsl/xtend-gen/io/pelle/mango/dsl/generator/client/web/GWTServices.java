/**
 * generated by Xtext
 */
package io.pelle.mango.dsl.generator.client.web;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.gwt.user.client.rpc.RemoteService;
import com.google.gwt.user.client.rpc.ServiceDefTarget;
import com.google.inject.Inject;
import io.pelle.mango.dsl.generator.client.ClientNameUtils;
import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
import io.pelle.mango.dsl.generator.client.web.BaseServices;
import io.pelle.mango.dsl.mango.GenericTypeDefinition;
import io.pelle.mango.dsl.mango.MethodParameter;
import io.pelle.mango.dsl.mango.MethodReturnType;
import io.pelle.mango.dsl.mango.Model;
import io.pelle.mango.dsl.mango.Service;
import io.pelle.mango.dsl.mango.ServiceMethod;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GWTServices extends BaseServices {
  @Inject
  @Extension
  private ClientNameUtils _clientNameUtils;
  
  @Inject
  @Extension
  private ClientTypeUtils _clientTypeUtils;
  
  public CharSequence gwtRemoteServiceLocator(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _modelPackageName = this._clientNameUtils.modelPackageName(model);
    _builder.append(_modelPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _gwtRemoteServiceLocatorName = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
    _builder.append(_gwtRemoteServiceLocatorName, "");
    _builder.append(" implements ");
    String _gwtRemoteServiceLocatorInterfaceName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceName(model);
    _builder.append(_gwtRemoteServiceLocatorInterfaceName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final ");
    String _gwtRemoteServiceLocatorName_1 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
    _builder.append(_gwtRemoteServiceLocatorName_1, "    ");
    _builder.append(" instance = new ");
    String _gwtRemoteServiceLocatorName_2 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
    _builder.append(_gwtRemoteServiceLocatorName_2, "    ");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ");
    String _gwtRemoteServiceLocatorName_3 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
    _builder.append(_gwtRemoteServiceLocatorName_3, "    ");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static ");
    String _gwtRemoteServiceLocatorName_4 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
    _builder.append(_gwtRemoteServiceLocatorName_4, "    ");
    _builder.append(" getInstance() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return instance;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private String remoteBaseUrl = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setRemoteBaseUrl(String remoteBaseUrl) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.remoteBaseUrl = remoteBaseUrl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getModuleBaseUrl()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("if (remoteBaseUrl != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return remoteBaseUrl;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("return com.google.gwt.core.client.GWT.getModuleBaseURL() + \"../remote/rpc\"; ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} ");
    _builder.newLine();
    _builder.newLine();
    {
      TreeIterator<EObject> _eAllContents = model.eAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
      for(final Service service : _filter) {
        _builder.append("\t");
        _builder.append("public ");
        String _gwtAsyncServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName, "\t");
        _builder.append(" get");
        String _serviceName = this._clientNameUtils.serviceName(service);
        _builder.append(_serviceName, "\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("final ");
        String _gwtAsyncServiceInterfaceFullQualifiedName_1 = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName_1, "\t\t");
        _builder.append(" service = (");
        String _gwtAsyncServiceInterfaceFullQualifiedName_2 = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName_2, "\t\t");
        _builder.append(") com.google.gwt.core.client.GWT.create(");
        String _gwtServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtServiceInterfaceFullQualifiedName(service);
        _builder.append(_gwtServiceInterfaceFullQualifiedName, "\t\t");
        _builder.append(".class);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name = ServiceDefTarget.class.getName();
        _builder.append(_name, "\t\t");
        _builder.append(" formEndpoint = (");
        String _name_1 = ServiceDefTarget.class.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(") service;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("formEndpoint.setServiceEntryPoint(getModuleBaseUrl() + \"/");
        String _serviceSpringName = this._clientNameUtils.serviceSpringName(service);
        _builder.append(_serviceSpringName, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return service;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gwtRemoteServiceLocatorInterface(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _modelPackageName = this._clientNameUtils.modelPackageName(model);
    _builder.append(_modelPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _gwtRemoteServiceLocatorInterfaceName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceName(model);
    _builder.append(_gwtRemoteServiceLocatorInterfaceName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      TreeIterator<EObject> _eAllContents = model.eAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
      for(final Service service : _filter) {
        _builder.append("\t");
        String _gwtAsyncServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName, "\t");
        _builder.append(" get");
        String _serviceName = this._clientNameUtils.serviceName(service);
        _builder.append(_serviceName, "\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gwtServiceInterface(final Service service) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packageName = this._clientNameUtils.getPackageName(service);
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _gwtServiceInterfaceName = this._clientNameUtils.gwtServiceInterfaceName(service);
    _builder.append(_gwtServiceInterfaceName, "");
    _builder.append(" extends ");
    String _name = RemoteService.class.getName();
    _builder.append(_name, "");
    _builder.append(", ");
    String _serviceInterfaceFullQualifiedName = this._clientNameUtils.serviceInterfaceFullQualifiedName(service);
    _builder.append(_serviceInterfaceFullQualifiedName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gwtAsyncServiceInterface(final Service service) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packageName = this._clientNameUtils.getPackageName(service);
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _gwtAsyncServiceInterfaceName = this._clientNameUtils.gwtAsyncServiceInterfaceName(service);
    _builder.append(_gwtAsyncServiceInterfaceName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
      for(final ServiceMethod remoteMethod : _remoteMethods) {
        _builder.append("\t");
        CharSequence _serviceMethodAsync = this.serviceMethodAsync(remoteMethod);
        _builder.append(_serviceMethodAsync, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence serviceMethodAsync(final ServiceMethod serviceMethod) {
    StringConcatenation _builder = new StringConcatenation();
    GenericTypeDefinition _genericTypeDefinition = serviceMethod.getGenericTypeDefinition();
    String _genericTypeDefinition_1 = this._clientTypeUtils.genericTypeDefinition(_genericTypeDefinition);
    _builder.append(_genericTypeDefinition_1, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
      int _size = _methodParameters.size();
      boolean _equals = (_size == 0);
      if (_equals) {
        _builder.append("void ");
        String _name = serviceMethod.getName();
        String _firstLower = StringExtensions.toFirstLower(_name);
        _builder.append(_firstLower, "");
        _builder.append("(");
        CharSequence _asyncCallback = this.asyncCallback(serviceMethod);
        _builder.append(_asyncCallback, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("void ");
        String _name_1 = serviceMethod.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
        _builder.append(_firstLower_1, "");
        _builder.append("(");
        EList<MethodParameter> _methodParameters_1 = serviceMethod.getMethodParameters();
        CharSequence _methodParameters_2 = this.methodParameters(_methodParameters_1);
        _builder.append(_methodParameters_2, "");
        _builder.append(", ");
        CharSequence _asyncCallback_1 = this.asyncCallback(serviceMethod);
        _builder.append(_asyncCallback_1, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence asyncCallback(final ServiceMethod serviceMethod) {
    StringConcatenation _builder = new StringConcatenation();
    {
      MethodReturnType _returnType = serviceMethod.getReturnType();
      boolean _notEquals = (!Objects.equal(_returnType, null));
      if (_notEquals) {
        _builder.append("com.google.gwt.user.client.rpc.AsyncCallback<");
        MethodReturnType _returnType_1 = serviceMethod.getReturnType();
        String _type = this._clientTypeUtils.getType(_returnType_1);
        _builder.append(_type, "");
        _builder.append("> callback");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("com.google.gwt.user.client.rpc.AsyncCallback<Void> callback");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence gwtRemoteServiceAsyncAdapter(final Service service) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package ");
    String _packageName = this._clientNameUtils.getPackageName(service);
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _gwtAsyncAdapterName = this._clientNameUtils.gwtAsyncAdapterName(service);
    _builder.append(_gwtAsyncAdapterName, "");
    _builder.append(" implements ");
    String _gwtAsyncAdapterFullQualifiedName = this._clientNameUtils.gwtAsyncAdapterFullQualifiedName(service);
    _builder.append(_gwtAsyncAdapterFullQualifiedName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _serviceInterfaceName = this._clientNameUtils.serviceInterfaceName(service);
    _builder.append(_serviceInterfaceName, "\t");
    _builder.append(" ");
    String _name = service.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _gwtAsyncAdapterName_1 = this._clientNameUtils.gwtAsyncAdapterName(service);
    _builder.append(_gwtAsyncAdapterName_1, "\t");
    _builder.append("(");
    String _serviceInterfaceName_1 = this._clientNameUtils.serviceInterfaceName(service);
    _builder.append(_serviceInterfaceName_1, "\t");
    _builder.append(" ");
    String _name_1 = service.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower_1, "\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _name_2 = service.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_2, "\t\t");
    _builder.append(" = ");
    String _name_3 = service.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
      for(final ServiceMethod serviceMethod : _remoteMethods) {
        _builder.append("\t");
        _builder.append("public ");
        CharSequence _serviceMethodAsync = this.serviceMethodAsync(serviceMethod);
        _builder.append(_serviceMethodAsync, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("try");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        {
          MethodReturnType _returnType = serviceMethod.getReturnType();
          boolean _notEquals = (!Objects.equal(_returnType, null));
          if (_notEquals) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("callback.onSuccess(this.");
            String _name_4 = service.getName();
            String _firstLower_4 = StringExtensions.toFirstLower(_name_4);
            _builder.append(_firstLower_4, "\t\t");
            _builder.append(".");
            String _name_5 = serviceMethod.getName();
            String _firstLower_5 = StringExtensions.toFirstLower(_name_5);
            _builder.append(_firstLower_5, "\t\t");
            _builder.append("(");
            {
              EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
              boolean _hasElements = false;
              for(final MethodParameter methodParameter : _methodParameters) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(", ", "\t\t");
                }
                String _name_6 = methodParameter.getName();
                String _firstLower_6 = StringExtensions.toFirstLower(_name_6);
                _builder.append(_firstLower_6, "\t\t");
              }
            }
            _builder.append("));");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("this.");
            String _name_7 = service.getName();
            String _firstLower_7 = StringExtensions.toFirstLower(_name_7);
            _builder.append(_firstLower_7, "\t\t");
            _builder.append(".");
            String _name_8 = serviceMethod.getName();
            String _firstLower_8 = StringExtensions.toFirstLower(_name_8);
            _builder.append(_firstLower_8, "\t\t");
            _builder.append("(");
            {
              EList<MethodParameter> _methodParameters_1 = serviceMethod.getMethodParameters();
              boolean _hasElements_1 = false;
              for(final MethodParameter methodParameter_1 : _methodParameters_1) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(", ", "\t\t");
                }
                String _name_9 = methodParameter_1.getName();
                String _firstLower_9 = StringExtensions.toFirstLower(_name_9);
                _builder.append(_firstLower_9, "\t\t");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("callback.onSuccess(null);");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("catch (Exception e)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("callback.onFailure(e);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
