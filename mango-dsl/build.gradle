dependencies {

	compile group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.xtext', version: versions.xtext
	compile group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.xbase', version: versions.xtext
	compile group: 'org.eclipse.xtext', name: 'org.eclipse.xtext', version: versions.xtext
	compile group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.builder.standalone', version: versions.xtext
	compile group: 'org.eclipse.xtend', name: 'org.eclipse.xtend.lib', version: versions.xtext
	compile 'commons-beanutils:commons-beanutils-core:1.8.3'
	compile project(':mango-client-base')
	compile project(':mango-server-base')
}

apply plugin: 'xtend'

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'org.xtend:xtend-gradle-plugin:0.1.+' }
}

sourceSets {
	main {
		java {
			srcDirs = [
				'src',
				'xtend-gen',
				'src-gen'
			]
		}
		resources {
			srcDirs = [
				'src',
				'xtend-gen',
				'src-gen'
			]
		}

		xtendOutputDir = 'xtend-gen'
	}
}

eclipse {
	project {
		natures 'org.eclipse.xtext.ui.shared.xtextNature'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
	}
}

task generateXtext(type: JavaExec) {
	main = "org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher"
	classpath = configurations.compile
	classpath += files('src')
	args = [
		"classpath:///io/pelle/mango/dsl/GenerateMango.mwe2"
	]
}

compileXtend.doFirst {
	def xtendOutputDir = file(sourceSets.main.xtendOutputDir)

	if(xtendOutputDir.exists() ) {
		xtendOutputDir.delete()
	}
	
	xtendOutputDir.mkdirs()
}

xtend {
	fork = true
	useDaemon = true
	xtendAsPrimaryDebugSource = true
	hideSyntheticVariables = false
	encoding = "UTF-8"
}

task clean.doLast {
    ant.delete(includeEmptyDirs: 'true', failOnError: 'false') {
        fileset(dir: "model", includes: "**/*")
    }
}
compileXtend.dependsOn generateXtext