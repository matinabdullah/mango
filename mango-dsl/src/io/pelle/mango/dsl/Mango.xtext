grammar io.pelle.mango.dsl.Mango with org.eclipse.xtext.xbase.Xbase

generate mango "http://www.pelle.io/mango/dsl/Mango"

ModelRoot:
	importSection=XImportSection?
	modelRoot=Model | PackageDeclaration;

Model:
	"project" modelName=ValidID "{"
		elements+=PackageDeclaration*
	"}"; 

PackageDeclaration:
	'package' packageName=QualifiedName '{'
		(elements+=AbstractElement)*
	'}';
	
AbstractElement:
	PackageDeclaration | ValueObject | Datatype | Entity | Enumeration | ModuleDefinition | Module | Service | Dictionary | NavigationNode;

//-----------------------------------------------------------------------------
// enumeration
//-----------------------------------------------------------------------------
Enumeration: "enumeration" name=ID "{"
	enumerationValues+=EnumerationValue (", " enumerationValues+=EnumerationValue)*
"}";

EnumerationValue: name=ID ("=>" value=STRING)?;

//-----------------------------------------------------------------------------
// entity
//-----------------------------------------------------------------------------
Entity:
	'entity' name=ID ('extends' extends=[Entity|QualifiedName])? ('jvmtype' jvmtype=JvmTypeReference)? '{'
		("naturalkey {" naturalKeyAttributes+=[EntityAttribute | QualifiedName ] (", " naturalKeyAttributes+=[EntityAttribute | QualifiedName ])* "}")?
		(attributes+=EntityAttribute)*
	'}';

//-----------------------------------------------------------------------------
// Value Object
//-----------------------------------------------------------------------------
ValueObject:
	"valueobject" name=ID ('extends' extends=[ValueObject|QualifiedName])? ('jvmtype' jvmtype=JvmTypeReference)? '{'
		(attributes+=EntityAttribute)*
	"}";
	
ValueObjectType:
	"valueobject" type=[ValueObject|QualifiedName] (cardinality=Cardinality)?;
	

Datatype:
	SimpleDataType | EntityDataType;

SimpleDataType:
	StringDataType | DecimalDataType | DateDataType | IntegerDataType | BinaryDataType | EnumerationDataType | BooleanDataType;

enum Cardinality: 
	onetoone = "0..1" | onetomany = "0..n" | manytomany = "n..n";

enum SimpleTypes: 
	long = "long" | integer = "integer" | bigdecimal = "bigdecimal" | string = "string" | boolean = "boolean" | reference = "reference";

EntityAttribute:
	SimpleDatatypeEntityAttribute | EntityEntityAttribute | ValueObjectEntityAttribute;

SimpleDatatypeEntityAttribute:
	MapEntityAttribute | LongEntityAttribute | DateEntityAttribute | DecimalEntityAttribute | StringEntityAttribute | BooleanEntityAttribute | IntegerEntityAttribute | BinaryEntityAttribute | EnumerationEntityAttribute;

SimpleTypeType:
	{SimpleTypeType}
	'simpletype' (type=SimpleTypes)? (cardinality=Cardinality)?;

BaseDataType:
	{BaseDataType}
	("label" label=STRING)?;

//-----------------------------------------------------------------------------
// string
//-----------------------------------------------------------------------------
StringDataType:
	'stringdatatype' name=ID ("extends" ref=[ StringDataType | QualifiedName ])? "{"
		baseDataType=BaseDataType
		("maxLength" maxLength=INT)?
	'}';

StringEntityAttribute:
	'string' (type=[StringDataType|QualifiedName])? (cardinality=Cardinality)? name=ID;

//-----------------------------------------------------------------------------
// map
//-----------------------------------------------------------------------------
MapDataType:
	'mapdatatype' name=ID ("extends" ref=[ MapDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
		keyType = SimpleTypes
		valueType = SimpleTypes
	'}';

MapEntityAttribute:
	'map' (type=[MapDataType|QualifiedName])? (keyType = SimpleTypes valueType = SimpleTypes)? name=ID;

//-----------------------------------------------------------------------------
// boolean
//-----------------------------------------------------------------------------
BooleanDataType:
	'booleandatatype' name=ID ("extends" ref=[ BooleanDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
	'}';
	
BooleanEntityAttribute:
	'boolean' (type=[BooleanDataType|QualifiedName])? name=ID;

//-----------------------------------------------------------------------------
// integer
//-----------------------------------------------------------------------------
IntegerDataType:
	'integerdatatype' name=ID ("extends" ref=[ IntegerDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
	'}';

IntegerEntityAttribute:
	'integer' (type=[IntegerDataType|QualifiedName])? name=ID;

//-----------------------------------------------------------------------------
// decimal
//-----------------------------------------------------------------------------
DateDataType:
	'datedatatype' name=ID ("extends" ref=[ DateDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
	'}';

DateEntityAttribute:
	'date' (type=[IntegerDataType|QualifiedName])? name=ID;

//-----------------------------------------------------------------------------
// decimal
//-----------------------------------------------------------------------------
DecimalDataType:
	'decimaldatatype' name=ID ("extends" ref=[ DecimalDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
	'}';

DecimalEntityAttribute:
	'decimal' (type=[IntegerDataType|QualifiedName])? name=ID;
	
//-----------------------------------------------------------------------------
// long
//-----------------------------------------------------------------------------
LongDataType:
	'longdatatype' name=ID ("extends" ref=[ LongDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
	'}';

LongEntityAttribute:
	'long' (type=[LongDataType|QualifiedName])? name=ID;

//-----------------------------------------------------------------------------
// binary
//-----------------------------------------------------------------------------
BinaryDataType:
	'binarydatatype' name=ID ("extends" ref=[ BinaryDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
	'}';
	
BinaryEntityAttribute:
	'binary' (type=[BinaryDataType|QualifiedName])? name=ID;

//-----------------------------------------------------------------------------
// entity
//-----------------------------------------------------------------------------
EntityDataType:
	'entitydatatype' name=ID  ("extends" ref=[ EntityDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
		'entity' entity=[Entity|QualifiedName]
	'}';

EntityAttributeType:
	 EntityDataType | Entity;

EntityEntityAttribute:
	'entity' type=[EntityAttributeType|QualifiedName] (cardinality=Cardinality)? name=ID;

EntityType:
	'entity' type=[EntityAttributeType|QualifiedName] (cardinality=Cardinality)?;

//-----------------------------------------------------------------------------
// entity
//-----------------------------------------------------------------------------

ValueObjectEntityAttribute:
	'valueobject' type=[ValueObject|QualifiedName] (cardinality=Cardinality)? name=ID;

//-----------------------------------------------------------------------------
// enumeration
//-----------------------------------------------------------------------------
EnumerationDataType:
	'enumerationdatatype' name=ID ("extends" ref=[ EnumerationDataType | QualifiedName ])? '{'
		baseDataType=BaseDataType
		'enumeration' enumeration=[Enumeration|QualifiedName]
	'}';

EnumerationAttributeType:
	 EnumerationDataType | Enumeration;

EnumerationEntityAttribute:
	'enumeration' type=[EnumerationAttributeType|QualifiedName] name=ID;

//- dictionary ----------------------------------------------------------------
Dictionary:
	"dictionary" name=ID "{"

	"entity" entity=[ Entity | QualifiedName ]

	("label" label=STRING)?
	("pluralLabel" pluralLabel=STRING)?

	("dictionarycontrols" "{"
		(dictionarycontrols+=DictionaryControl)*
	"}")?

	("labelcontrols {"
		(labelcontrols+=DictionaryControl)*
	"}")?

	(dictionarysearch=DictionarySearch)?
	(dictionaryeditor=DictionaryEditor)?
"}";

DictionarySearch:
	"dictionarysearch" name=ID "{"
		("label" label=STRING)?
		(dictionaryfilters+=DictionaryFilter)*
		dictionaryresult=DictionaryResult
	"}";

DictionaryEditor:
	"dictionaryeditor" name=ID "{"
		("label" label=STRING)?
		(containercontents+=DictionaryContainerContent)*
	"}";

DictionaryFilter:
	"dictionaryfilter" name=ID "{"
		(containercontents+=DictionaryContainerContent)*
	"}";

DictionaryResult:
	"dictionaryresult" name=ID "{"
		(resultcolumns+=DictionaryControl)*
	"}";


//- layout --------------------------------------------------------------------
ColumnLayout:
	"layout {"
		"columns" columns=INT
	"}";

ColumnLayoutData: 
	"layoutdata {"
		"columnspan" columnspan=INT
	"}";
//- /layout -------------------------------------------------------------------

//- container -----------------------------------------------------------------
DictionaryContainer: DictionaryComposite | DictionaryEditableTable | DictionaryAssignmentTable;

DictionaryComposite:
	"composite" name=ID "{"

		(layoutdata=ColumnLayoutData)?
		(layout=ColumnLayout)?
	
		(containercontents+=DictionaryContainerContent)*
		
	"}";

DictionaryEditableTable:
	"editabletable" name=ID "{"

		("layoutdata" layoutdata=ColumnLayoutData)?
		("layout" layout=ColumnLayout)?

		(containercontents+=DictionaryContainerContent)*

		"entityattribute" entityattribute=[ EntityAttribute | QualifiedName ]
		
		"columncontrols {"
			(columncontrols+=DictionaryControl)*
		"}"
	"}";

DictionaryAssignmentTable:
	"assignmenttable" name=ID "{"

		("layoutdata" layoutdata=ColumnLayoutData)?
		("layout" layout=ColumnLayout)?

		(containercontents+=DictionaryContainerContent)*
		
		"entityattribute" entityattribute=[ EntityAttribute | QualifiedName ]
		"dictionary" dictionary=[ Dictionary | QualifiedName ]
		"columncontrols {"
			(columncontrols+=DictionaryControl)*
		"}"
	"}";

DictionaryContainerContent:
	DictionaryContainer | DictionaryControl;

//- labels --------------------------------------------------------------------
Labels:
	{Labels}
	("label" label=STRING)?
	("filterLabel" filterLabel=STRING)?
	("columnLabel" columnLabel=STRING)?
	("editorLabel" editorLabel=STRING)?
	("toolTip" toolTip=STRING)?;
	
//- controls ------------------------------------------------------------------
enum ControlType: 
	text = "text" | dropdown = "dropdown";
	
BaseDictionaryControl:
		("entityattribute" entityattribute=[ EntityAttribute | QualifiedName ])?
		labels=Labels
		(mandatory?="mandatory")?
		("width" width=INT)?
		(readonly?="readonly")?
		;

DictionaryControl:
	DictionaryControlGroup | DictionaryTextControl | DictionaryIntegerControl | DictionaryHierarchicalControl | DictionaryBigDecimalControl | DictionaryBooleanControl | DictionaryDateControl | DictionaryEnumerationControl | DictionaryFileControl | DictionaryReferenceControl;

DictionaryControlGroupOptions:
	DictionaryControlGroupOptionMultiFilterField;
	
DictionaryControlGroupOptionMultiFilterField:
	{DictionaryControlGroupOptionMultiFilterField}
	("multiFilterField" multiFilterField?=XBooleanLiteral)?;

DictionaryControlGroupOptionsContainer:
	{DictionaryControlGroupOptionsContainer}
		"groupoptions" "{" 
			options+=DictionaryControlGroupOptions
		"}";

DictionaryControlGroup:
	{DictionaryControlGroup}
	"controlgroup" (name=ID)? ("ref" ref=[ DictionaryControlGroup | QualifiedName ])? ("{"
		(controlGroupOptions=DictionaryControlGroupOptionsContainer)?
		baseControl=BaseDictionaryControl
		(groupcontrols+=DictionaryControl)*
	"}")?;

DictionaryHierarchicalControl:
	{DictionaryHierarchicalControl}
	"hierarchicalcontrol" (name=ID)? ("ref" ref=[ DictionaryTextControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
		"hierarchicalId" hierarchicalId=STRING
	"}")?;

DictionaryTextControl:
	{DictionaryTextControl}
	"textcontrol" (name=ID)? ("ref" ref=[ DictionaryTextControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
	"}")?;

DictionaryIntegerControl:
	{DictionaryIntegerControl}
	"integercontrol" (name=ID)? ("ref" ref=[ DictionaryIntegerControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
	"}")?;

DictionaryBigDecimalControl:
	{DictionaryBigDecimalControl}
	"bigdecimalcontrol" (name=ID)? ("ref" ref=[ DictionaryBigDecimalControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
	"}")?;

DictionaryBooleanControl:
	{DictionaryBooleanControl}
	"booleancontrol" (name=ID)? ("ref" ref=[ DictionaryBooleanControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
	"}")?;

DictionaryDateControl:
	{DictionaryDateControl}
	"datecontrol" (name=ID)? ("ref" ref=[ DictionaryDateControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
	"}")?;

DictionaryEnumerationControl:
	{DictionaryEnumerationControl}
	"enumerationcontrol" (name=ID)? ("ref" ref=[ DictionaryEnumerationControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
	"}")?;


DictionaryReferenceControl:
	{DictionaryReferenceControl}
	"referencecontrol" (name=ID)? ("ref" ref=[ DictionaryReferenceControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
		"dictionary" dictionary=[ Dictionary | QualifiedName ]
		("controlType" controlType=ControlType)?
		("labelcontrols {" (labelcontrols+=DictionaryControl)* "}")? 
	"}")?;

DictionaryFileControl:
	{DictionaryFileControl}
	"filecontrol" (name=ID)? ("ref" ref=[ DictionaryFileControl | QualifiedName ])? ("{"
		baseControl=BaseDictionaryControl
	"}")?;

//- module --------------------------------------------------------------------
Module:
	"module" name=ID "{"
		"moduledefinition" moduledefinition=[ ModuleDefinition | QualifiedName ]
		("parameters {"
			(moduleParameters+=ModuleParameter)*
		"}")?	
	"}";

ModuleParameter: moduleDefinitionParameter=[ ModuleDefinitionParameter | QualifiedName ] "=" value=STRING;

ModuleDefinition:
	"moduledefinition" name=ID "{"
		("parameters {"
			(moduleDefinitionParameters+=ModuleDefinitionParameter)*
		"}")?	
	"}";

ModuleDefinitionParameter: "parameter" name=ID "{"
	"type" type=SimpleTypes
"}";

//- methods -------------------------------------------------------------------
ServiceOptions:
	{ServiceOptions}
	(nonpublic?="nonpublic")?;
		
ServiceMethod:
	'method' ('<'typeParameter=JvmTypeParameter'>')? returnType = JvmTypeReference name=ValidID '('(params += FullJvmFormalParameter (', ' params += FullJvmFormalParameter)*)?')';

Service:
	{Service}
	"service" name=ID "{"
		("options1 {" remoteServiceOptions=ServiceOptions "}")?
		(remoteMethods+=ServiceMethod)*
	"}";
	
NavigationNode:
	"navigationnode" name=ID "{"
	("label" label=STRING)?
	("module" module=[ Module | QualifiedName ])?
	("dictionaryEditor" dictionaryEditor=[ DictionaryEditor | QualifiedName ])?
	("dictionarySearch" dictionarySearch=[ DictionarySearch | QualifiedName ])?
	(navigationNodes+=NavigationNode)*
"}";