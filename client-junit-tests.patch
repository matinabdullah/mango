diff --git a/gradlewDebug.bat b/gradlewDebug.bat
new file mode 100644
index 0000000..56157bf
--- /dev/null
+++ b/gradlewDebug.bat
@@ -0,0 +1,5 @@
+set CMD_LINE_ARGS=%*
+set SCRIPT_PATH=%~dp0
+set GRADLE_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=9999,server=y,suspend=y"
+%SCRIPT_PATH%/gradlew %CMD_LINE_ARGS%
+
diff --git a/mango-dsl-ui/plugin.xml_gen b/mango-dsl-ui/plugin.xml_gen
index b5d555c..f7c28cd 100644
--- a/mango-dsl-ui/plugin.xml_gen
+++ b/mango-dsl-ui/plugin.xml_gen
@@ -223,29 +223,29 @@
         </resourceServiceProvider>
     </extension>
 
-
-	<!-- marker definitions for io.pelle.mango.dsl.Mango -->
-	<extension
-	        id="mango.check.fast"
-	        name="Mango Problem"
-	        point="org.eclipse.core.resources.markers">
-	    <super type="org.eclipse.xtext.ui.check.fast"/>
-	    <persistent value="true"/>
-	</extension>
-	<extension
-	        id="mango.check.normal"
-	        name="Mango Problem"
-	        point="org.eclipse.core.resources.markers">
-	    <super type="org.eclipse.xtext.ui.check.normal"/>
-	    <persistent value="true"/>
-	</extension>
-	<extension
-	        id="mango.check.expensive"
-	        name="Mango Problem"
-	        point="org.eclipse.core.resources.markers">
-	    <super type="org.eclipse.xtext.ui.check.expensive"/>
-	    <persistent value="true"/>
-	</extension>
+
+	<!-- marker definitions for io.pelle.mango.dsl.Mango -->
+	<extension
+	        id="mango.check.fast"
+	        name="Mango Problem"
+	        point="org.eclipse.core.resources.markers">
+	    <super type="org.eclipse.xtext.ui.check.fast"/>
+	    <persistent value="true"/>
+	</extension>
+	<extension
+	        id="mango.check.normal"
+	        name="Mango Problem"
+	        point="org.eclipse.core.resources.markers">
+	    <super type="org.eclipse.xtext.ui.check.normal"/>
+	    <persistent value="true"/>
+	</extension>
+	<extension
+	        id="mango.check.expensive"
+	        name="Mango Problem"
+	        point="org.eclipse.core.resources.markers">
+	    <super type="org.eclipse.xtext.ui.check.expensive"/>
+	    <persistent value="true"/>
+	</extension>
 
    <extension
          point="org.eclipse.xtext.builder.participant">
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/.MangoProposalProvider.java._trace b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/.MangoProposalProvider.java._trace
index 2a93cdb..5dd3dd6 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/.MangoProposalProvider.java._trace
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/.MangoProposalProvider.java._trace
Binary files differ
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/MangoProposalProvider.java b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/MangoProposalProvider.java
index 90209c2..70d3763 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/MangoProposalProvider.java
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/contentassist/MangoProposalProvider.java
@@ -1,13 +1,13 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.ui.contentassist;
-
-import io.pelle.mango.dsl.ui.contentassist.AbstractMangoProposalProvider;
-
-/**
- * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
- */
-@SuppressWarnings("all")
-public class MangoProposalProvider extends AbstractMangoProposalProvider {
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.ui.contentassist;
+
+import io.pelle.mango.dsl.ui.contentassist.AbstractMangoProposalProvider;
+
+/**
+ * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
+ */
+@SuppressWarnings("all")
+public class MangoProposalProvider extends AbstractMangoProposalProvider {
+}
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoDescriptionLabelProvider.java._trace b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoDescriptionLabelProvider.java._trace
index 1bd0546..da31d30 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoDescriptionLabelProvider.java._trace
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoDescriptionLabelProvider.java._trace
Binary files differ
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoLabelProvider.java._trace b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoLabelProvider.java._trace
index 0f794ae..71ef919 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoLabelProvider.java._trace
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/.MangoLabelProvider.java._trace
Binary files differ
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoDescriptionLabelProvider.java b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoDescriptionLabelProvider.java
index 62ad626..e2c590e 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoDescriptionLabelProvider.java
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoDescriptionLabelProvider.java
@@ -1,15 +1,15 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.ui.labeling;
-
-import org.eclipse.xtext.ui.label.DefaultDescriptionLabelProvider;
-
-/**
- * Provides labels for a IEObjectDescriptions and IResourceDescriptions.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
- */
-@SuppressWarnings("all")
-public class MangoDescriptionLabelProvider extends DefaultDescriptionLabelProvider {
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.ui.labeling;
+
+import org.eclipse.xtext.ui.label.DefaultDescriptionLabelProvider;
+
+/**
+ * Provides labels for a IEObjectDescriptions and IResourceDescriptions.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
+ */
+@SuppressWarnings("all")
+public class MangoDescriptionLabelProvider extends DefaultDescriptionLabelProvider {
+}
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoLabelProvider.java b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoLabelProvider.java
index 60f1188..21b42ff 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoLabelProvider.java
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/labeling/MangoLabelProvider.java
@@ -1,21 +1,21 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.ui.labeling;
-
-import com.google.inject.Inject;
-import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
-import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
-
-/**
- * Provides labels for a EObjects.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
- */
-@SuppressWarnings("all")
-public class MangoLabelProvider extends DefaultEObjectLabelProvider {
-  @Inject
-  public MangoLabelProvider(final AdapterFactoryLabelProvider delegate) {
-    super(delegate);
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.ui.labeling;
+
+import com.google.inject.Inject;
+import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
+import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
+
+/**
+ * Provides labels for a EObjects.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
+ */
+@SuppressWarnings("all")
+public class MangoLabelProvider extends DefaultEObjectLabelProvider {
+  @Inject
+  public MangoLabelProvider(final AdapterFactoryLabelProvider delegate) {
+    super(delegate);
+  }
+}
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/.MangoOutlineTreeProvider.java._trace b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/.MangoOutlineTreeProvider.java._trace
index 4e7391c..b9f5295 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/.MangoOutlineTreeProvider.java._trace
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/.MangoOutlineTreeProvider.java._trace
Binary files differ
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/MangoOutlineTreeProvider.java b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/MangoOutlineTreeProvider.java
index c5cc40f..fb9b7e7 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/MangoOutlineTreeProvider.java
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/outline/MangoOutlineTreeProvider.java
@@ -1,15 +1,15 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.ui.outline;
-
-import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
-
-/**
- * Customization of the default outline structure.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#outline
- */
-@SuppressWarnings("all")
-public class MangoOutlineTreeProvider extends DefaultOutlineTreeProvider {
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.ui.outline;
+
+import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
+
+/**
+ * Customization of the default outline structure.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#outline
+ */
+@SuppressWarnings("all")
+public class MangoOutlineTreeProvider extends DefaultOutlineTreeProvider {
+}
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/.MangoQuickfixProvider.java._trace b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/.MangoQuickfixProvider.java._trace
index f775685..e112ed8 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/.MangoQuickfixProvider.java._trace
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/.MangoQuickfixProvider.java._trace
Binary files differ
diff --git a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/MangoQuickfixProvider.java b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/MangoQuickfixProvider.java
index c973604..c90da5b 100644
--- a/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/MangoQuickfixProvider.java
+++ b/mango-dsl-ui/xtend-gen/io/pelle/mango/dsl/ui/quickfix/MangoQuickfixProvider.java
@@ -1,15 +1,15 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.ui.quickfix;
-
-import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
-
-/**
- * Custom quickfixes.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
- */
-@SuppressWarnings("all")
-public class MangoQuickfixProvider extends DefaultQuickfixProvider {
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.ui.quickfix;
+
+import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
+
+/**
+ * Custom quickfixes.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
+ */
+@SuppressWarnings("all")
+public class MangoQuickfixProvider extends DefaultQuickfixProvider {
+}
diff --git a/mango-dsl/model/generated/Mango.ecore b/mango-dsl/model/generated/Mango.ecore
index 0fdf083..776d6b1 100644
--- a/mango-dsl/model/generated/Mango.ecore
+++ b/mango-dsl/model/generated/Mango.ecore
@@ -1,339 +1,339 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="mango" nsURI="http://www.pelle.io/mango/dsl/Mango" nsPrefix="mango">
-  <eClassifiers xsi:type="ecore:EClass" name="ModelRoot">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="elements" upperBound="-1"
-        eType="#//AbstractElement" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="#//ModelRoot"/>
-  <eClassifiers xsi:type="ecore:EClass" name="PackageDeclaration" eSuperTypes="#//ModelRoot #//AbstractElement"/>
-  <eClassifiers xsi:type="ecore:EClass" name="AbstractElement"/>
-  <eClassifiers xsi:type="ecore:EClass" name="Import" eSuperTypes="#//AbstractElement">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="importedNamespace" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//AbstractElement #//EnumerationAttributeType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="enumerationValues" unique="false"
-        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Entity" eSuperTypes="#//AbstractElement #//EntityAttributeType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="extends" eType="#//Entity"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="jvmtype" eType="ecore:EClass platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore#//JvmType"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="naturalKeyAttributes" unique="false"
-        upperBound="-1" eType="#//EntityAttribute"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
-        eType="#//EntityAttribute" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ValueObject" eSuperTypes="#//AbstractElement">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="extends" eType="#//ValueObject"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="jvmtype" eType="ecore:EClass platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore#//JvmType"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
-        eType="#//EntityAttribute" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ValueObjectType" eSuperTypes="#//MethodReturnType">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//ValueObject"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Datatype" eSuperTypes="#//AbstractElement #//MethodType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="SimpleDataType" eSuperTypes="#//Datatype"/>
-  <eClassifiers xsi:type="ecore:EEnum" name="Cardinality">
-    <eLiterals name="onetoone" literal="0..1"/>
-    <eLiterals name="onetomany" value="1" literal="0..n"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EEnum" name="SimpleTypes">
-    <eLiterals name="long" literal="Long"/>
-    <eLiterals name="integer" value="1" literal="Integer"/>
-    <eLiterals name="bigdecimal" value="2" literal="BigDecimal"/>
-    <eLiterals name="string" value="3" literal="String"/>
-    <eLiterals name="boolean" value="4" literal="Boolean"/>
-    <eLiterals name="reference" value="5" literal="Reference"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="CustomType" eSuperTypes="#//MethodReturnType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="CustomEntityAttribute" eSuperTypes="#//MethodParameter">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="EntityAttribute" eSuperTypes="#//MethodParameter"/>
-  <eClassifiers xsi:type="ecore:EClass" name="SimpleDatatypeEntityAttribute" eSuperTypes="#//EntityAttribute"/>
-  <eClassifiers xsi:type="ecore:EClass" name="SimpleTypeType" eSuperTypes="#//MethodReturnType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//SimpleTypes"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="StringDataType" eSuperTypes="#//SimpleDataType"/>
-  <eClassifiers xsi:type="ecore:EClass" name="StringEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//StringDataType"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="MapDataType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="keyType" eType="#//SimpleTypes"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="valueType" eType="#//SimpleTypes"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="MapEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//MapDataType"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="keyType" eType="#//SimpleTypes"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="valueType" eType="#//SimpleTypes"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="BooleanDataType" eSuperTypes="#//SimpleDataType"/>
-  <eClassifiers xsi:type="ecore:EClass" name="BooleanEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//BooleanDataType"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="IntegerDataType" eSuperTypes="#//SimpleDataType"/>
-  <eClassifiers xsi:type="ecore:EClass" name="IntegerEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//IntegerDataType"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="LongDataType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="LongEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//LongDataType"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="BinaryDataType" eSuperTypes="#//SimpleDataType"/>
-  <eClassifiers xsi:type="ecore:EClass" name="BinaryEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//BinaryDataType"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="EntityDataType" eSuperTypes="#//Datatype #//EntityAttributeType">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="entity" eType="#//Entity"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="EntityAttributeType"/>
-  <eClassifiers xsi:type="ecore:EClass" name="EntityEntityAttribute" eSuperTypes="#//EntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//EntityAttributeType"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="EntityType" eSuperTypes="#//MethodReturnType">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//EntityAttributeType"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="EnumerationDataType" eSuperTypes="#//SimpleDataType #//EnumerationAttributeType">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="#//Enumeration"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="EnumerationAttributeType"/>
-  <eClassifiers xsi:type="ecore:EClass" name="EnumerationEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//EnumerationAttributeType"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Dictionary" eSuperTypes="#//AbstractElement">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="entity" eType="#//Entity"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="pluralLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionarycontrols" upperBound="-1"
-        eType="#//DictionaryControl" containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="labelcontrols" upperBound="-1"
-        eType="#//DictionaryControl" containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionarysearch" eType="#//DictionarySearch"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryeditor" eType="#//DictionaryEditor"
-        containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionarySearch">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryfilters" upperBound="-1"
-        eType="#//DictionaryFilter" containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryresult" eType="#//DictionaryResult"
-        containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryEditor">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="containercontents" upperBound="-1"
-        eType="#//DictionaryContainerContent" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryFilter">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="containercontents" upperBound="-1"
-        eType="#//DictionaryContainerContent" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryResult">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="resultcolumns" upperBound="-1"
-        eType="#//DictionaryControl" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ColumnLayout">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="columns" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ColumnLayoutData">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="columnspan" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryContainer" eSuperTypes="#//DictionaryContainerContent">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="layoutdata" eType="#//ColumnLayoutData"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="layout" eType="#//ColumnLayout"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="containercontents" upperBound="-1"
-        eType="#//DictionaryContainerContent" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryComposite" eSuperTypes="#//DictionaryContainer"/>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryEditableTable" eSuperTypes="#//DictionaryContainer">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="entityattribute" eType="#//EntityAttribute"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="columncontrols" upperBound="-1"
-        eType="#//DictionaryControl" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryAssignmentTable" eSuperTypes="#//DictionaryContainer">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="entityattribute" eType="#//EntityAttribute"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionary" eType="#//Dictionary"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="columncontrols" upperBound="-1"
-        eType="#//DictionaryControl" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryContainerContent">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Labels">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="filterLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="columnLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="editorLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="toolTip" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EEnum" name="ControlType">
-    <eLiterals name="text" literal="text"/>
-    <eLiterals name="dropdown" value="1" literal="dropdown"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="BaseDictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="entityattribute" eType="#//EntityAttribute"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="labels" eType="#//Labels"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="mandatory" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="width" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="readonly" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryControl" eSuperTypes="#//DictionaryContainerContent">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="baseControl" eType="#//BaseDictionaryControl"
-        containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryControlGroup" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryControlGroup"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="groupcontrols" upperBound="-1"
-        eType="#//DictionaryControl" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryHierarchicalControl">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryTextControl"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="baseControl" eType="#//BaseDictionaryControl"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="hierarchicalId" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryTextControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryTextControl"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryIntegerControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryIntegerControl"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryBigDecimalControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryBigDecimalControl"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryBooleanControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryBooleanControl"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryDateControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryDateControl"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryEnumerationControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryEnumerationControl"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryReferenceControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryReferenceControl"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionary" eType="#//Dictionary"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="controlType" eType="#//ControlType"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="labelcontrols" upperBound="-1"
-        eType="#//DictionaryControl" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="DictionaryFileControl" eSuperTypes="#//DictionaryControl">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryFileControl"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Module" eSuperTypes="#//AbstractElement">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="moduledefinition" eType="#//ModuleDefinition"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="moduleParameters" upperBound="-1"
-        eType="#//ModuleParameter" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ModuleParameter">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="moduleDefinitionParameter"
-        eType="#//ModuleDefinitionParameter"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ModuleDefinition" eSuperTypes="#//AbstractElement">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="moduleDefinitionParameters"
-        upperBound="-1" eType="#//ModuleDefinitionParameter" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ModuleDefinitionParameter">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//SimpleTypes"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="MethodType"/>
-  <eClassifiers xsi:type="ecore:EClass" name="MethodParameter">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="MethodReturnType">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ServiceOptions">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="nonpublic" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="ServiceMethod">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="genericTypeDefinition"
-        eType="#//GenericTypeDefinition" containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="returnType" eType="#//MethodReturnType"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="methodParameters" upperBound="-1"
-        eType="#//MethodParameter" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Service" eSuperTypes="#//AbstractElement">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="remoteServiceOptions" eType="#//ServiceOptions"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="remoteMethods" upperBound="-1"
-        eType="#//ServiceMethod" containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="GenericEntityAttribute" eSuperTypes="#//MethodParameter">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//GenericTypeDefinition"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="MangoEntityAttribute" eSuperTypes="#//MethodParameter">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//MangoTypes"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="generic" eType="#//Generic"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="GenericType" eSuperTypes="#//MethodReturnType #//Generic">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="genericTypeDefinition"
-        eType="#//GenericTypeDefinition"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="GenericTypeTypes"/>
-  <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="genericType" eType="#//GenericTypeTypes"
-        containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="GenericWildcardType" eSuperTypes="#//Generic">
-    <eStructuralFeatures xsi:type="ecore:EReference" name="genericType" eType="#//GenericTypeTypes"
-        containment="true"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="Generic"/>
-  <eClassifiers xsi:type="ecore:EClass" name="MangoType" eSuperTypes="#//GenericTypeTypes">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//MangoTypes"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="generic" eType="#//Generic"
-        containment="true"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EEnum" name="MangoTypes">
-    <eLiterals name="selectquery" literal="SelectQuery"/>
-    <eLiterals name="ibasevo" value="1" literal="IBaseVO"/>
-    <eLiterals name="ihierarchicalvo" value="2" literal="IHierarchicalVO"/>
-    <eLiterals name="ibaseclientvo" value="3" literal="IBaseClientVO"/>
-  </eClassifiers>
-  <eClassifiers xsi:type="ecore:EClass" name="NavigationNode" eSuperTypes="#//AbstractElement">
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="module" eType="#//Module"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryEditor" eType="#//DictionaryEditor"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionarySearch" eType="#//DictionarySearch"/>
-    <eStructuralFeatures xsi:type="ecore:EReference" name="navigationNodes" upperBound="-1"
-        eType="#//NavigationNode" containment="true"/>
-  </eClassifiers>
-</ecore:EPackage>
+<?xml version="1.0" encoding="UTF-8"?>
+<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="mango" nsURI="http://www.pelle.io/mango/dsl/Mango" nsPrefix="mango">
+  <eClassifiers xsi:type="ecore:EClass" name="ModelRoot">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="elements" upperBound="-1"
+        eType="#//AbstractElement" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="#//ModelRoot"/>
+  <eClassifiers xsi:type="ecore:EClass" name="PackageDeclaration" eSuperTypes="#//ModelRoot #//AbstractElement"/>
+  <eClassifiers xsi:type="ecore:EClass" name="AbstractElement"/>
+  <eClassifiers xsi:type="ecore:EClass" name="Import" eSuperTypes="#//AbstractElement">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="importedNamespace" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//AbstractElement #//EnumerationAttributeType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="enumerationValues" unique="false"
+        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Entity" eSuperTypes="#//AbstractElement #//EntityAttributeType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="extends" eType="#//Entity"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="jvmtype" eType="ecore:EClass platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore#//JvmType"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="naturalKeyAttributes" unique="false"
+        upperBound="-1" eType="#//EntityAttribute"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
+        eType="#//EntityAttribute" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ValueObject" eSuperTypes="#//AbstractElement">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="extends" eType="#//ValueObject"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="jvmtype" eType="ecore:EClass platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore#//JvmType"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
+        eType="#//EntityAttribute" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ValueObjectType" eSuperTypes="#//MethodReturnType">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//ValueObject"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Datatype" eSuperTypes="#//AbstractElement #//MethodType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="SimpleDataType" eSuperTypes="#//Datatype"/>
+  <eClassifiers xsi:type="ecore:EEnum" name="Cardinality">
+    <eLiterals name="onetoone" literal="0..1"/>
+    <eLiterals name="onetomany" value="1" literal="0..n"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EEnum" name="SimpleTypes">
+    <eLiterals name="long" literal="Long"/>
+    <eLiterals name="integer" value="1" literal="Integer"/>
+    <eLiterals name="bigdecimal" value="2" literal="BigDecimal"/>
+    <eLiterals name="string" value="3" literal="String"/>
+    <eLiterals name="boolean" value="4" literal="Boolean"/>
+    <eLiterals name="reference" value="5" literal="Reference"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="CustomType" eSuperTypes="#//MethodReturnType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="CustomEntityAttribute" eSuperTypes="#//MethodParameter">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="EntityAttribute" eSuperTypes="#//MethodParameter"/>
+  <eClassifiers xsi:type="ecore:EClass" name="SimpleDatatypeEntityAttribute" eSuperTypes="#//EntityAttribute"/>
+  <eClassifiers xsi:type="ecore:EClass" name="SimpleTypeType" eSuperTypes="#//MethodReturnType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//SimpleTypes"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="StringDataType" eSuperTypes="#//SimpleDataType"/>
+  <eClassifiers xsi:type="ecore:EClass" name="StringEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//StringDataType"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="MapDataType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="keyType" eType="#//SimpleTypes"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="valueType" eType="#//SimpleTypes"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="MapEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//MapDataType"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="keyType" eType="#//SimpleTypes"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="valueType" eType="#//SimpleTypes"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="BooleanDataType" eSuperTypes="#//SimpleDataType"/>
+  <eClassifiers xsi:type="ecore:EClass" name="BooleanEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//BooleanDataType"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="IntegerDataType" eSuperTypes="#//SimpleDataType"/>
+  <eClassifiers xsi:type="ecore:EClass" name="IntegerEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//IntegerDataType"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="LongDataType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="LongEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//LongDataType"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="BinaryDataType" eSuperTypes="#//SimpleDataType"/>
+  <eClassifiers xsi:type="ecore:EClass" name="BinaryEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//BinaryDataType"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="EntityDataType" eSuperTypes="#//Datatype #//EntityAttributeType">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="entity" eType="#//Entity"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="EntityAttributeType"/>
+  <eClassifiers xsi:type="ecore:EClass" name="EntityEntityAttribute" eSuperTypes="#//EntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//EntityAttributeType"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="EntityType" eSuperTypes="#//MethodReturnType">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//EntityAttributeType"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="EnumerationDataType" eSuperTypes="#//SimpleDataType #//EnumerationAttributeType">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="#//Enumeration"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="EnumerationAttributeType"/>
+  <eClassifiers xsi:type="ecore:EClass" name="EnumerationEntityAttribute" eSuperTypes="#//SimpleDatatypeEntityAttribute">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//EnumerationAttributeType"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Dictionary" eSuperTypes="#//AbstractElement">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="entity" eType="#//Entity"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="pluralLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionarycontrols" upperBound="-1"
+        eType="#//DictionaryControl" containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="labelcontrols" upperBound="-1"
+        eType="#//DictionaryControl" containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionarysearch" eType="#//DictionarySearch"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryeditor" eType="#//DictionaryEditor"
+        containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionarySearch">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryfilters" upperBound="-1"
+        eType="#//DictionaryFilter" containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryresult" eType="#//DictionaryResult"
+        containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryEditor">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="containercontents" upperBound="-1"
+        eType="#//DictionaryContainerContent" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryFilter">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="containercontents" upperBound="-1"
+        eType="#//DictionaryContainerContent" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryResult">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="resultcolumns" upperBound="-1"
+        eType="#//DictionaryControl" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ColumnLayout">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="columns" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ColumnLayoutData">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="columnspan" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryContainer" eSuperTypes="#//DictionaryContainerContent">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="layoutdata" eType="#//ColumnLayoutData"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="layout" eType="#//ColumnLayout"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="containercontents" upperBound="-1"
+        eType="#//DictionaryContainerContent" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryComposite" eSuperTypes="#//DictionaryContainer"/>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryEditableTable" eSuperTypes="#//DictionaryContainer">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="entityattribute" eType="#//EntityAttribute"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="columncontrols" upperBound="-1"
+        eType="#//DictionaryControl" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryAssignmentTable" eSuperTypes="#//DictionaryContainer">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="entityattribute" eType="#//EntityAttribute"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionary" eType="#//Dictionary"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="columncontrols" upperBound="-1"
+        eType="#//DictionaryControl" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryContainerContent">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Labels">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="filterLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="columnLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="editorLabel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="toolTip" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EEnum" name="ControlType">
+    <eLiterals name="text" literal="text"/>
+    <eLiterals name="dropdown" value="1" literal="dropdown"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="BaseDictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="entityattribute" eType="#//EntityAttribute"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="labels" eType="#//Labels"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="mandatory" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="width" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="readonly" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryControl" eSuperTypes="#//DictionaryContainerContent">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="baseControl" eType="#//BaseDictionaryControl"
+        containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryControlGroup" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryControlGroup"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="groupcontrols" upperBound="-1"
+        eType="#//DictionaryControl" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryHierarchicalControl">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryTextControl"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="baseControl" eType="#//BaseDictionaryControl"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="hierarchicalId" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryTextControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryTextControl"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryIntegerControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryIntegerControl"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryBigDecimalControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryBigDecimalControl"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryBooleanControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryBooleanControl"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryDateControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryDateControl"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryEnumerationControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryEnumerationControl"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryReferenceControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryReferenceControl"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionary" eType="#//Dictionary"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="controlType" eType="#//ControlType"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="labelcontrols" upperBound="-1"
+        eType="#//DictionaryControl" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="DictionaryFileControl" eSuperTypes="#//DictionaryControl">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="ref" eType="#//DictionaryFileControl"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Module" eSuperTypes="#//AbstractElement">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="moduledefinition" eType="#//ModuleDefinition"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="moduleParameters" upperBound="-1"
+        eType="#//ModuleParameter" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ModuleParameter">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="moduleDefinitionParameter"
+        eType="#//ModuleDefinitionParameter"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ModuleDefinition" eSuperTypes="#//AbstractElement">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="moduleDefinitionParameters"
+        upperBound="-1" eType="#//ModuleDefinitionParameter" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ModuleDefinitionParameter">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//SimpleTypes"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="MethodType"/>
+  <eClassifiers xsi:type="ecore:EClass" name="MethodParameter">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="MethodReturnType">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ServiceOptions">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="nonpublic" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="ServiceMethod">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="genericTypeDefinition"
+        eType="#//GenericTypeDefinition" containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="returnType" eType="#//MethodReturnType"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="methodParameters" upperBound="-1"
+        eType="#//MethodParameter" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Service" eSuperTypes="#//AbstractElement">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="remoteServiceOptions" eType="#//ServiceOptions"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="remoteMethods" upperBound="-1"
+        eType="#//ServiceMethod" containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="GenericEntityAttribute" eSuperTypes="#//MethodParameter">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//GenericTypeDefinition"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="MangoEntityAttribute" eSuperTypes="#//MethodParameter">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//MangoTypes"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="generic" eType="#//Generic"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="GenericType" eSuperTypes="#//MethodReturnType #//Generic">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="genericTypeDefinition"
+        eType="#//GenericTypeDefinition"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="GenericTypeTypes"/>
+  <eClassifiers xsi:type="ecore:EClass" name="GenericTypeDefinition">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="genericType" eType="#//GenericTypeTypes"
+        containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="GenericWildcardType" eSuperTypes="#//Generic">
+    <eStructuralFeatures xsi:type="ecore:EReference" name="genericType" eType="#//GenericTypeTypes"
+        containment="true"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="Generic"/>
+  <eClassifiers xsi:type="ecore:EClass" name="MangoType" eSuperTypes="#//GenericTypeTypes">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//MangoTypes"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="generic" eType="#//Generic"
+        containment="true"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" eType="#//Cardinality"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EEnum" name="MangoTypes">
+    <eLiterals name="selectquery" literal="SelectQuery"/>
+    <eLiterals name="ibasevo" value="1" literal="IBaseVO"/>
+    <eLiterals name="ihierarchicalvo" value="2" literal="IHierarchicalVO"/>
+    <eLiterals name="ibaseclientvo" value="3" literal="IBaseClientVO"/>
+  </eClassifiers>
+  <eClassifiers xsi:type="ecore:EClass" name="NavigationNode" eSuperTypes="#//AbstractElement">
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="module" eType="#//Module"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionaryEditor" eType="#//DictionaryEditor"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="dictionarySearch" eType="#//DictionarySearch"/>
+    <eStructuralFeatures xsi:type="ecore:EReference" name="navigationNodes" upperBound="-1"
+        eType="#//NavigationNode" containment="true"/>
+  </eClassifiers>
+</ecore:EPackage>
diff --git a/mango-dsl/model/generated/Mango.genmodel b/mango-dsl/model/generated/Mango.genmodel
index 78f8720..7e25dc9 100644
--- a/mango-dsl/model/generated/Mango.genmodel
+++ b/mango-dsl/model/generated/Mango.genmodel
@@ -1,308 +1,308 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<genmodel:GenModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
-    xmlns:genmodel="http://www.eclipse.org/emf/2002/GenModel" modelDirectory="/mango-dsl/src-gen" editDirectory="/mango-dsl.edit/src"
-    editorDirectory="/mango-dsl.editor/src" modelPluginID="mango-dsl" forceOverwrite="true"
-    modelName="Mango" updateClasspath="false" rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container"
-    complianceLevel="5.0" copyrightFields="false" editPluginID="mango-dsl.edit" editorPluginID="mango-dsl.editor"
-    runtimeVersion="2.10" usedGenPackages="platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel#//types">
-  <genPackages prefix="Mango" basePackage="io.pelle.mango.dsl" disposableProviderFactory="true"
-      fileExtensions="mango" ecorePackage="Mango.ecore#/">
-    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//Cardinality">
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//Cardinality/onetoone"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//Cardinality/onetomany"/>
-    </genEnums>
-    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//SimpleTypes">
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/long"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/integer"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/bigdecimal"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/string"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/boolean"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/reference"/>
-    </genEnums>
-    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//ControlType">
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//ControlType/text"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//ControlType/dropdown"/>
-    </genEnums>
-    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//MangoTypes">
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/selectquery"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/ibasevo"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/ihierarchicalvo"/>
-      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/ibaseclientvo"/>
-    </genEnums>
-    <genClasses ecoreClass="Mango.ecore#//ModelRoot">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModelRoot/name"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ModelRoot/elements"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Model"/>
-    <genClasses ecoreClass="Mango.ecore#//PackageDeclaration"/>
-    <genClasses ecoreClass="Mango.ecore#//AbstractElement"/>
-    <genClasses ecoreClass="Mango.ecore#//Import">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Import/importedNamespace"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Enumeration">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Enumeration/name"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Enumeration/enumerationValues"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Entity">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Entity/name"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/extends"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/jvmtype"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/naturalKeyAttributes"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/attributes"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ValueObject">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ValueObject/name"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObject/extends"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObject/jvmtype"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObject/attributes"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ValueObjectType">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObjectType/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Datatype">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Datatype/name"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//SimpleDataType"/>
-    <genClasses ecoreClass="Mango.ecore#//CustomType">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//CustomType/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//CustomEntityAttribute">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//CustomEntityAttribute/type"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//CustomEntityAttribute/cardinality"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//EntityAttribute"/>
-    <genClasses ecoreClass="Mango.ecore#//SimpleDatatypeEntityAttribute"/>
-    <genClasses ecoreClass="Mango.ecore#//SimpleTypeType">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//SimpleTypeType/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//StringDataType"/>
-    <genClasses ecoreClass="Mango.ecore#//StringEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//StringEntityAttribute/type"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//StringEntityAttribute/cardinality"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//MapDataType">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapDataType/name"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapDataType/keyType"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapDataType/valueType"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//MapEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//MapEntityAttribute/type"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapEntityAttribute/keyType"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapEntityAttribute/valueType"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//BooleanDataType"/>
-    <genClasses ecoreClass="Mango.ecore#//BooleanEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//BooleanEntityAttribute/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//IntegerDataType"/>
-    <genClasses ecoreClass="Mango.ecore#//IntegerEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//IntegerEntityAttribute/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//LongDataType">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//LongDataType/name"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//LongEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//LongEntityAttribute/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//BinaryDataType"/>
-    <genClasses ecoreClass="Mango.ecore#//BinaryEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//BinaryEntityAttribute/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//EntityDataType">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EntityDataType/entity"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//EntityAttributeType"/>
-    <genClasses ecoreClass="Mango.ecore#//EntityEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EntityEntityAttribute/type"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//EntityEntityAttribute/cardinality"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//EntityType">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EntityType/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//EnumerationDataType">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EnumerationDataType/enumeration"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//EnumerationAttributeType"/>
-    <genClasses ecoreClass="Mango.ecore#//EnumerationEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EnumerationEntityAttribute/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Dictionary">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Dictionary/name"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/entity"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Dictionary/label"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Dictionary/pluralLabel"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/dictionarycontrols"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/labelcontrols"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/dictionarysearch"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/dictionaryeditor"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionarySearch">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionarySearch/name"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionarySearch/label"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionarySearch/dictionaryfilters"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionarySearch/dictionaryresult"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryEditor">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryEditor/name"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryEditor/label"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEditor/containercontents"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryFilter">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryFilter/name"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryFilter/containercontents"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryResult">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryResult/name"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryResult/resultcolumns"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ColumnLayout">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ColumnLayout/columns"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ColumnLayoutData">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ColumnLayoutData/columnspan"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryContainer">
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryContainer/layoutdata"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryContainer/layout"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryContainer/containercontents"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryComposite"/>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryEditableTable">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEditableTable/entityattribute"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEditableTable/columncontrols"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryAssignmentTable">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryAssignmentTable/entityattribute"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryAssignmentTable/dictionary"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryAssignmentTable/columncontrols"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryContainerContent">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryContainerContent/name"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Labels">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/label"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/filterLabel"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/columnLabel"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/editorLabel"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/toolTip"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//BaseDictionaryControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//BaseDictionaryControl/entityattribute"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//BaseDictionaryControl/labels"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//BaseDictionaryControl/mandatory"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//BaseDictionaryControl/width"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//BaseDictionaryControl/readonly"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryControl">
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryControl/baseControl"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryControlGroup">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryControlGroup/ref"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryControlGroup/groupcontrols"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryHierarchicalControl">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryHierarchicalControl/name"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryHierarchicalControl/ref"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryHierarchicalControl/baseControl"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryHierarchicalControl/hierarchicalId"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryTextControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryTextControl/ref"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryIntegerControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryIntegerControl/ref"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryBigDecimalControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryBigDecimalControl/ref"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryBooleanControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryBooleanControl/ref"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryDateControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryDateControl/ref"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryEnumerationControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEnumerationControl/ref"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryReferenceControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryReferenceControl/ref"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryReferenceControl/dictionary"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryReferenceControl/controlType"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryReferenceControl/labelcontrols"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//DictionaryFileControl">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryFileControl/ref"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Module">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Module/name"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Module/moduledefinition"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Module/moduleParameters"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ModuleParameter">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ModuleParameter/moduleDefinitionParameter"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleParameter/value"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ModuleDefinition">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleDefinition/name"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ModuleDefinition/moduleDefinitionParameters"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ModuleDefinitionParameter">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleDefinitionParameter/name"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleDefinitionParameter/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//MethodType"/>
-    <genClasses ecoreClass="Mango.ecore#//MethodParameter">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MethodParameter/name"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//MethodReturnType">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MethodReturnType/cardinality"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ServiceOptions">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ServiceOptions/nonpublic"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//ServiceMethod">
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ServiceMethod/genericTypeDefinition"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ServiceMethod/name"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ServiceMethod/returnType"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ServiceMethod/methodParameters"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Service">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Service/name"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Service/remoteServiceOptions"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Service/remoteMethods"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//GenericEntityAttribute">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericEntityAttribute/type"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//MangoEntityAttribute">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoEntityAttribute/type"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//MangoEntityAttribute/generic"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoEntityAttribute/cardinality"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//GenericType">
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericType/genericTypeDefinition"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//GenericTypeTypes"/>
-    <genClasses ecoreClass="Mango.ecore#//GenericTypeDefinition">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//GenericTypeDefinition/name"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericTypeDefinition/genericType"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//GenericWildcardType">
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericWildcardType/genericType"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//Generic"/>
-    <genClasses ecoreClass="Mango.ecore#//MangoType">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoType/type"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//MangoType/generic"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoType/cardinality"/>
-    </genClasses>
-    <genClasses ecoreClass="Mango.ecore#//NavigationNode">
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//NavigationNode/name"/>
-      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//NavigationNode/label"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/module"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/dictionaryEditor"/>
-      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/dictionarySearch"/>
-      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/navigationNodes"/>
-    </genClasses>
-  </genPackages>
-</genmodel:GenModel>
+<?xml version="1.0" encoding="UTF-8"?>
+<genmodel:GenModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
+    xmlns:genmodel="http://www.eclipse.org/emf/2002/GenModel" modelDirectory="/mango-dsl/src-gen" editDirectory="/mango-dsl.edit/src"
+    editorDirectory="/mango-dsl.editor/src" modelPluginID="mango-dsl" forceOverwrite="true"
+    modelName="Mango" updateClasspath="false" rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container"
+    complianceLevel="5.0" copyrightFields="false" editPluginID="mango-dsl.edit" editorPluginID="mango-dsl.editor"
+    runtimeVersion="2.10" usedGenPackages="platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel#//types">
+  <genPackages prefix="Mango" basePackage="io.pelle.mango.dsl" disposableProviderFactory="true"
+      fileExtensions="mango" ecorePackage="Mango.ecore#/">
+    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//Cardinality">
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//Cardinality/onetoone"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//Cardinality/onetomany"/>
+    </genEnums>
+    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//SimpleTypes">
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/long"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/integer"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/bigdecimal"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/string"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/boolean"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//SimpleTypes/reference"/>
+    </genEnums>
+    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//ControlType">
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//ControlType/text"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//ControlType/dropdown"/>
+    </genEnums>
+    <genEnums typeSafeEnumCompatible="false" ecoreEnum="Mango.ecore#//MangoTypes">
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/selectquery"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/ibasevo"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/ihierarchicalvo"/>
+      <genEnumLiterals ecoreEnumLiteral="Mango.ecore#//MangoTypes/ibaseclientvo"/>
+    </genEnums>
+    <genClasses ecoreClass="Mango.ecore#//ModelRoot">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModelRoot/name"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ModelRoot/elements"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Model"/>
+    <genClasses ecoreClass="Mango.ecore#//PackageDeclaration"/>
+    <genClasses ecoreClass="Mango.ecore#//AbstractElement"/>
+    <genClasses ecoreClass="Mango.ecore#//Import">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Import/importedNamespace"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Enumeration">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Enumeration/name"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Enumeration/enumerationValues"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Entity">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Entity/name"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/extends"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/jvmtype"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/naturalKeyAttributes"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Entity/attributes"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ValueObject">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ValueObject/name"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObject/extends"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObject/jvmtype"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObject/attributes"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ValueObjectType">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ValueObjectType/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Datatype">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Datatype/name"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//SimpleDataType"/>
+    <genClasses ecoreClass="Mango.ecore#//CustomType">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//CustomType/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//CustomEntityAttribute">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//CustomEntityAttribute/type"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//CustomEntityAttribute/cardinality"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//EntityAttribute"/>
+    <genClasses ecoreClass="Mango.ecore#//SimpleDatatypeEntityAttribute"/>
+    <genClasses ecoreClass="Mango.ecore#//SimpleTypeType">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//SimpleTypeType/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//StringDataType"/>
+    <genClasses ecoreClass="Mango.ecore#//StringEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//StringEntityAttribute/type"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//StringEntityAttribute/cardinality"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//MapDataType">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapDataType/name"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapDataType/keyType"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapDataType/valueType"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//MapEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//MapEntityAttribute/type"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapEntityAttribute/keyType"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MapEntityAttribute/valueType"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//BooleanDataType"/>
+    <genClasses ecoreClass="Mango.ecore#//BooleanEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//BooleanEntityAttribute/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//IntegerDataType"/>
+    <genClasses ecoreClass="Mango.ecore#//IntegerEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//IntegerEntityAttribute/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//LongDataType">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//LongDataType/name"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//LongEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//LongEntityAttribute/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//BinaryDataType"/>
+    <genClasses ecoreClass="Mango.ecore#//BinaryEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//BinaryEntityAttribute/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//EntityDataType">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EntityDataType/entity"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//EntityAttributeType"/>
+    <genClasses ecoreClass="Mango.ecore#//EntityEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EntityEntityAttribute/type"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//EntityEntityAttribute/cardinality"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//EntityType">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EntityType/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//EnumerationDataType">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EnumerationDataType/enumeration"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//EnumerationAttributeType"/>
+    <genClasses ecoreClass="Mango.ecore#//EnumerationEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//EnumerationEntityAttribute/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Dictionary">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Dictionary/name"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/entity"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Dictionary/label"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Dictionary/pluralLabel"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/dictionarycontrols"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/labelcontrols"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/dictionarysearch"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Dictionary/dictionaryeditor"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionarySearch">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionarySearch/name"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionarySearch/label"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionarySearch/dictionaryfilters"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionarySearch/dictionaryresult"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryEditor">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryEditor/name"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryEditor/label"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEditor/containercontents"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryFilter">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryFilter/name"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryFilter/containercontents"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryResult">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryResult/name"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryResult/resultcolumns"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ColumnLayout">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ColumnLayout/columns"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ColumnLayoutData">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ColumnLayoutData/columnspan"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryContainer">
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryContainer/layoutdata"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryContainer/layout"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryContainer/containercontents"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryComposite"/>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryEditableTable">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEditableTable/entityattribute"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEditableTable/columncontrols"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryAssignmentTable">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryAssignmentTable/entityattribute"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryAssignmentTable/dictionary"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryAssignmentTable/columncontrols"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryContainerContent">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryContainerContent/name"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Labels">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/label"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/filterLabel"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/columnLabel"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/editorLabel"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Labels/toolTip"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//BaseDictionaryControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//BaseDictionaryControl/entityattribute"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//BaseDictionaryControl/labels"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//BaseDictionaryControl/mandatory"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//BaseDictionaryControl/width"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//BaseDictionaryControl/readonly"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryControl">
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryControl/baseControl"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryControlGroup">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryControlGroup/ref"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryControlGroup/groupcontrols"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryHierarchicalControl">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryHierarchicalControl/name"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryHierarchicalControl/ref"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryHierarchicalControl/baseControl"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryHierarchicalControl/hierarchicalId"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryTextControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryTextControl/ref"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryIntegerControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryIntegerControl/ref"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryBigDecimalControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryBigDecimalControl/ref"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryBooleanControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryBooleanControl/ref"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryDateControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryDateControl/ref"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryEnumerationControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryEnumerationControl/ref"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryReferenceControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryReferenceControl/ref"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryReferenceControl/dictionary"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//DictionaryReferenceControl/controlType"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryReferenceControl/labelcontrols"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//DictionaryFileControl">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//DictionaryFileControl/ref"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Module">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Module/name"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//Module/moduledefinition"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Module/moduleParameters"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ModuleParameter">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//ModuleParameter/moduleDefinitionParameter"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleParameter/value"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ModuleDefinition">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleDefinition/name"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ModuleDefinition/moduleDefinitionParameters"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ModuleDefinitionParameter">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleDefinitionParameter/name"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ModuleDefinitionParameter/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//MethodType"/>
+    <genClasses ecoreClass="Mango.ecore#//MethodParameter">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MethodParameter/name"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//MethodReturnType">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MethodReturnType/cardinality"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ServiceOptions">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ServiceOptions/nonpublic"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//ServiceMethod">
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ServiceMethod/genericTypeDefinition"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//ServiceMethod/name"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ServiceMethod/returnType"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//ServiceMethod/methodParameters"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Service">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//Service/name"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Service/remoteServiceOptions"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//Service/remoteMethods"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//GenericEntityAttribute">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericEntityAttribute/type"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//MangoEntityAttribute">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoEntityAttribute/type"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//MangoEntityAttribute/generic"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoEntityAttribute/cardinality"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//GenericType">
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericType/genericTypeDefinition"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//GenericTypeTypes"/>
+    <genClasses ecoreClass="Mango.ecore#//GenericTypeDefinition">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//GenericTypeDefinition/name"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericTypeDefinition/genericType"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//GenericWildcardType">
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//GenericWildcardType/genericType"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//Generic"/>
+    <genClasses ecoreClass="Mango.ecore#//MangoType">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoType/type"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//MangoType/generic"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//MangoType/cardinality"/>
+    </genClasses>
+    <genClasses ecoreClass="Mango.ecore#//NavigationNode">
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//NavigationNode/name"/>
+      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute Mango.ecore#//NavigationNode/label"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/module"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/dictionaryEditor"/>
+      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/dictionarySearch"/>
+      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference Mango.ecore#//NavigationNode/navigationNodes"/>
+    </genClasses>
+  </genPackages>
+</genmodel:GenModel>
diff --git a/mango-dsl/src/io/pelle/mango/dsl/generator/server/service/GWTServices.xtend b/mango-dsl/src/io/pelle/mango/dsl/generator/server/service/GWTServices.xtend
index 53e08a4..878c750 100644
--- a/mango-dsl/src/io/pelle/mango/dsl/generator/server/service/GWTServices.xtend
+++ b/mango-dsl/src/io/pelle/mango/dsl/generator/server/service/GWTServices.xtend
@@ -24,6 +24,9 @@
 	
 		<bean id="gwtUrlMapping" class="org.gwtwidgets.server.spring.GWTHandler">
 			<property name="order" value="10"/>
+			<property name="serviceExporterFactory">
+				<ref bean="rpcServiceExporterFactory" />
+			</property>
 			<property name="mappings">
 				<map>
 					«FOR service: model.eAllContents.toIterable.filter(Service)»
@@ -32,6 +35,9 @@
 				</map>
 			</property>
 		</bean>
+
+		<bean id="rpcServiceExporterFactory" class="io.pelle.mango.server.gwt.MangoRPCServiceExporterFactory" />
+
 	</beans>
 	'''
 	
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/.MangoFormatter.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/.MangoFormatter.java._trace
index 099e8a5..b3e4f9f 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/.MangoFormatter.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/.MangoFormatter.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/MangoFormatter.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/MangoFormatter.java
index 0bb1fea..96a39ac 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/MangoFormatter.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/formatting/MangoFormatter.java
@@ -1,21 +1,21 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.formatting;
-
-import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
-import org.eclipse.xtext.formatting.impl.FormattingConfig;
-
-/**
- * This class contains custom formatting description.
- * 
- * see : http://www.eclipse.org/Xtext/documentation.html#formatting
- * on how and when to use it
- * 
- * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
- */
-@SuppressWarnings("all")
-public class MangoFormatter extends AbstractDeclarativeFormatter {
-  protected void configureFormatting(final FormattingConfig c) {
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.formatting;
+
+import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
+import org.eclipse.xtext.formatting.impl.FormattingConfig;
+
+/**
+ * This class contains custom formatting description.
+ * 
+ * see : http://www.eclipse.org/Xtext/documentation.html#formatting
+ * on how and when to use it
+ * 
+ * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
+ */
+@SuppressWarnings("all")
+public class MangoFormatter extends AbstractDeclarativeFormatter {
+  protected void configureFormatting(final FormattingConfig c) {
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.BaseEntityGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.BaseEntityGenerator.java._trace
index 96bd855..c6402e4 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.BaseEntityGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.BaseEntityGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.MangoGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.MangoGenerator.java._trace
index 5ff0477..7ed505e 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.MangoGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.MangoGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.VOMapperGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.VOMapperGenerator.java._trace
index 4a20fbc..cb3c053 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.VOMapperGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/.VOMapperGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/BaseEntityGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/BaseEntityGenerator.java
index 7503264..cb8b69f 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/BaseEntityGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/BaseEntityGenerator.java
@@ -1,134 +1,134 @@
-package io.pelle.mango.dsl.generator;
-
-import com.google.common.base.Objects;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.vo.IAttributeDescriptor;
-import io.pelle.mango.dsl.generator.util.EntityUtils;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.generator.util.TypeUtils;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-@SuppressWarnings("all")
-public class BaseEntityGenerator {
-  @Inject
-  @Extension
-  private NameUtils _nameUtils;
-  
-  @Inject
-  @Extension
-  private EntityUtils _entityUtils;
-  
-  @Inject
-  @Extension
-  private TypeUtils _typeUtils;
-  
-  public CharSequence attributeDescriptorsFromExtends(final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Entity _extends = entity.getExtends();
-      boolean _notEquals = (!Objects.equal(_extends, null));
-      if (_notEquals) {
-        {
-          Entity _extends_1 = entity.getExtends();
-          EList<EntityAttribute> _attributes = _extends_1.getAttributes();
-          for(final EntityAttribute attribute : _attributes) {
-            CharSequence _compileEntityAttributeDescriptor = this._typeUtils.compileEntityAttributeDescriptor(attribute, entity);
-            _builder.append(_compileEntityAttributeDescriptor, "");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-      }
-    }
-    return _builder;
-  }
-  
-  public CharSequence compileGetAttributeDescriptors(final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("public static ");
-    String _name = IAttributeDescriptor.class.getName();
-    _builder.append(_name, "");
-    _builder.append("<?>[] getAttributeDescriptors() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("return new ");
-    String _name_1 = IAttributeDescriptor.class.getName();
-    _builder.append(_name_1, "\t");
-    _builder.append("[]{");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.newLine();
-    {
-      boolean _isExtendedByOtherEntity = this._entityUtils.isExtendedByOtherEntity(entity);
-      boolean _not = (!_isExtendedByOtherEntity);
-      if (_not) {
-        _builder.append("\t\t");
-        _builder.newLine();
-        {
-          EList<EntityAttribute> _attributes = entity.getAttributes();
-          boolean _hasElements = false;
-          for(final EntityAttribute attribute : _attributes) {
-            if (!_hasElements) {
-              _hasElements = true;
-            } else {
-              _builder.appendImmediate(", ", "\t\t\t");
-            }
-            _builder.append("\t\t");
-            _builder.append("\t");
-            String _name_2 = attribute.getName();
-            String _attributeConstantName = this._nameUtils.attributeConstantName(_name_2);
-            _builder.append(_attributeConstantName, "\t\t\t");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-        _builder.append("\t\t");
-        _builder.append("\t");
-        {
-          EList<EntityAttribute> _attributes_1 = entity.getAttributes();
-          boolean _isEmpty = _attributes_1.isEmpty();
-          boolean _not_1 = (!_isEmpty);
-          if (_not_1) {
-            _builder.append(",");
-          }
-        }
-        _builder.newLineIfNotEmpty();
-        {
-          Entity _extends = entity.getExtends();
-          boolean _notEquals = (!Objects.equal(_extends, null));
-          if (_notEquals) {
-            {
-              Entity _extends_1 = entity.getExtends();
-              EList<EntityAttribute> _attributes_2 = _extends_1.getAttributes();
-              boolean _hasElements_1 = false;
-              for(final EntityAttribute attribute_1 : _attributes_2) {
-                if (!_hasElements_1) {
-                  _hasElements_1 = true;
-                } else {
-                  _builder.appendImmediate(", ", "\t\t\t");
-                }
-                _builder.append("\t\t");
-                _builder.append("\t");
-                String _name_3 = attribute_1.getName();
-                String _attributeConstantName_1 = this._nameUtils.attributeConstantName(_name_3);
-                _builder.append(_attributeConstantName_1, "\t\t\t");
-                _builder.newLineIfNotEmpty();
-              }
-            }
-          }
-        }
-      }
-    }
-    _builder.append("\t");
-    _builder.append("};");
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator;
+
+import com.google.common.base.Objects;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.vo.IAttributeDescriptor;
+import io.pelle.mango.dsl.generator.util.EntityUtils;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.generator.util.TypeUtils;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+@SuppressWarnings("all")
+public class BaseEntityGenerator {
+  @Inject
+  @Extension
+  private NameUtils _nameUtils;
+  
+  @Inject
+  @Extension
+  private EntityUtils _entityUtils;
+  
+  @Inject
+  @Extension
+  private TypeUtils _typeUtils;
+  
+  public CharSequence attributeDescriptorsFromExtends(final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Entity _extends = entity.getExtends();
+      boolean _notEquals = (!Objects.equal(_extends, null));
+      if (_notEquals) {
+        {
+          Entity _extends_1 = entity.getExtends();
+          EList<EntityAttribute> _attributes = _extends_1.getAttributes();
+          for(final EntityAttribute attribute : _attributes) {
+            CharSequence _compileEntityAttributeDescriptor = this._typeUtils.compileEntityAttributeDescriptor(attribute, entity);
+            _builder.append(_compileEntityAttributeDescriptor, "");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+      }
+    }
+    return _builder;
+  }
+  
+  public CharSequence compileGetAttributeDescriptors(final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("public static ");
+    String _name = IAttributeDescriptor.class.getName();
+    _builder.append(_name, "");
+    _builder.append("<?>[] getAttributeDescriptors() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("return new ");
+    String _name_1 = IAttributeDescriptor.class.getName();
+    _builder.append(_name_1, "\t");
+    _builder.append("[]{");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.newLine();
+    {
+      boolean _isExtendedByOtherEntity = this._entityUtils.isExtendedByOtherEntity(entity);
+      boolean _not = (!_isExtendedByOtherEntity);
+      if (_not) {
+        _builder.append("\t\t");
+        _builder.newLine();
+        {
+          EList<EntityAttribute> _attributes = entity.getAttributes();
+          boolean _hasElements = false;
+          for(final EntityAttribute attribute : _attributes) {
+            if (!_hasElements) {
+              _hasElements = true;
+            } else {
+              _builder.appendImmediate(", ", "\t\t\t");
+            }
+            _builder.append("\t\t");
+            _builder.append("\t");
+            String _name_2 = attribute.getName();
+            String _attributeConstantName = this._nameUtils.attributeConstantName(_name_2);
+            _builder.append(_attributeConstantName, "\t\t\t");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+        _builder.append("\t\t");
+        _builder.append("\t");
+        {
+          EList<EntityAttribute> _attributes_1 = entity.getAttributes();
+          boolean _isEmpty = _attributes_1.isEmpty();
+          boolean _not_1 = (!_isEmpty);
+          if (_not_1) {
+            _builder.append(",");
+          }
+        }
+        _builder.newLineIfNotEmpty();
+        {
+          Entity _extends = entity.getExtends();
+          boolean _notEquals = (!Objects.equal(_extends, null));
+          if (_notEquals) {
+            {
+              Entity _extends_1 = entity.getExtends();
+              EList<EntityAttribute> _attributes_2 = _extends_1.getAttributes();
+              boolean _hasElements_1 = false;
+              for(final EntityAttribute attribute_1 : _attributes_2) {
+                if (!_hasElements_1) {
+                  _hasElements_1 = true;
+                } else {
+                  _builder.appendImmediate(", ", "\t\t\t");
+                }
+                _builder.append("\t\t");
+                _builder.append("\t");
+                String _name_3 = attribute_1.getName();
+                String _attributeConstantName_1 = this._nameUtils.attributeConstantName(_name_3);
+                _builder.append(_attributeConstantName_1, "\t\t\t");
+                _builder.newLineIfNotEmpty();
+              }
+            }
+          }
+        }
+      }
+    }
+    _builder.append("\t");
+    _builder.append("};");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/MangoGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/MangoGenerator.java
index 1da2b6c..fb061eb 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/MangoGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/MangoGenerator.java
@@ -1,79 +1,79 @@
-package io.pelle.mango.dsl.generator;
-
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.VOMapperGenerator;
-import io.pelle.mango.dsl.generator.client.ClientGenerator;
-import io.pelle.mango.dsl.generator.server.EntityGenerator;
-import io.pelle.mango.dsl.generator.server.ServerGenerator;
-import io.pelle.mango.dsl.generator.server.SpringGenerator;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.Model;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.emf.ecore.resource.Resource;
-import org.eclipse.xtext.generator.IFileSystemAccess;
-import org.eclipse.xtext.generator.IGenerator;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class MangoGenerator implements IGenerator {
-  @Inject
-  @Extension
-  private EntityGenerator _entityGenerator;
-  
-  @Inject
-  @Extension
-  private VOMapperGenerator _vOMapperGenerator;
-  
-  @Inject
-  @Extension
-  private NameUtils _nameUtils;
-  
-  @Inject
-  @Extension
-  private ClientGenerator clientGenerator;
-  
-  @Inject
-  @Extension
-  private ServerGenerator serverGenerator;
-  
-  @Inject
-  @Extension
-  private SpringGenerator _springGenerator;
-  
-  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
-    this.clientGenerator.doGenerate(resource, fsa);
-    this.serverGenerator.doGenerate(resource, fsa);
-    TreeIterator<EObject> _allContents = resource.getAllContents();
-    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
-    Iterable<Entity> _filter = Iterables.<Entity>filter(_iterable, Entity.class);
-    for (final Entity entity : _filter) {
-      String _entityFullQualifiedFileName = this._nameUtils.entityFullQualifiedFileName(entity);
-      CharSequence _compileEntity = this._entityGenerator.compileEntity(entity);
-      fsa.generateFile(_entityFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileEntity);
-    }
-    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
-    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
-    Iterable<Model> _filter_1 = Iterables.<Model>filter(_iterable_1, Model.class);
-    for (final Model model : _filter_1) {
-      {
-        String _springDBApplicationContextFullQualifiedFileName = this._nameUtils.springDBApplicationContextFullQualifiedFileName(model);
-        CharSequence _compileSpringDBApplicationContext = this._springGenerator.compileSpringDBApplicationContext(model);
-        fsa.generateFile(_springDBApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileSpringDBApplicationContext);
-        String _springPersistenceXMLFullQualifiedFileName = this._nameUtils.springPersistenceXMLFullQualifiedFileName(model);
-        CharSequence _compilePersistenceXml = this._springGenerator.compilePersistenceXml(model);
-        fsa.generateFile(_springPersistenceXMLFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compilePersistenceXml);
-        String _baseApplicationContextFullQualifiedFileName = this._nameUtils.baseApplicationContextFullQualifiedFileName(model);
-        CharSequence _compileBaseApplicationContext = this._springGenerator.compileBaseApplicationContext(model);
-        fsa.generateFile(_baseApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileBaseApplicationContext);
-        String _voMapperFullQualifiedFileName = this._nameUtils.voMapperFullQualifiedFileName(model);
-        CharSequence _compileVOMapper = this._vOMapperGenerator.compileVOMapper(model);
-        fsa.generateFile(_voMapperFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileVOMapper);
-      }
-    }
-  }
-}
+package io.pelle.mango.dsl.generator;
+
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.VOMapperGenerator;
+import io.pelle.mango.dsl.generator.client.ClientGenerator;
+import io.pelle.mango.dsl.generator.server.EntityGenerator;
+import io.pelle.mango.dsl.generator.server.ServerGenerator;
+import io.pelle.mango.dsl.generator.server.SpringGenerator;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.Model;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.resource.Resource;
+import org.eclipse.xtext.generator.IFileSystemAccess;
+import org.eclipse.xtext.generator.IGenerator;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class MangoGenerator implements IGenerator {
+  @Inject
+  @Extension
+  private EntityGenerator _entityGenerator;
+  
+  @Inject
+  @Extension
+  private VOMapperGenerator _vOMapperGenerator;
+  
+  @Inject
+  @Extension
+  private NameUtils _nameUtils;
+  
+  @Inject
+  @Extension
+  private ClientGenerator clientGenerator;
+  
+  @Inject
+  @Extension
+  private ServerGenerator serverGenerator;
+  
+  @Inject
+  @Extension
+  private SpringGenerator _springGenerator;
+  
+  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
+    this.clientGenerator.doGenerate(resource, fsa);
+    this.serverGenerator.doGenerate(resource, fsa);
+    TreeIterator<EObject> _allContents = resource.getAllContents();
+    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
+    Iterable<Entity> _filter = Iterables.<Entity>filter(_iterable, Entity.class);
+    for (final Entity entity : _filter) {
+      String _entityFullQualifiedFileName = this._nameUtils.entityFullQualifiedFileName(entity);
+      CharSequence _compileEntity = this._entityGenerator.compileEntity(entity);
+      fsa.generateFile(_entityFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileEntity);
+    }
+    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
+    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
+    Iterable<Model> _filter_1 = Iterables.<Model>filter(_iterable_1, Model.class);
+    for (final Model model : _filter_1) {
+      {
+        String _springDBApplicationContextFullQualifiedFileName = this._nameUtils.springDBApplicationContextFullQualifiedFileName(model);
+        CharSequence _compileSpringDBApplicationContext = this._springGenerator.compileSpringDBApplicationContext(model);
+        fsa.generateFile(_springDBApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileSpringDBApplicationContext);
+        String _springPersistenceXMLFullQualifiedFileName = this._nameUtils.springPersistenceXMLFullQualifiedFileName(model);
+        CharSequence _compilePersistenceXml = this._springGenerator.compilePersistenceXml(model);
+        fsa.generateFile(_springPersistenceXMLFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compilePersistenceXml);
+        String _baseApplicationContextFullQualifiedFileName = this._nameUtils.baseApplicationContextFullQualifiedFileName(model);
+        CharSequence _compileBaseApplicationContext = this._springGenerator.compileBaseApplicationContext(model);
+        fsa.generateFile(_baseApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileBaseApplicationContext);
+        String _voMapperFullQualifiedFileName = this._nameUtils.voMapperFullQualifiedFileName(model);
+        CharSequence _compileVOMapper = this._vOMapperGenerator.compileVOMapper(model);
+        fsa.generateFile(_voMapperFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _compileVOMapper);
+      }
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/VOMapperGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/VOMapperGenerator.java
index b76854c..ac372cc 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/VOMapperGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/VOMapperGenerator.java
@@ -1,119 +1,119 @@
-package io.pelle.mango.dsl.generator;
-
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.vo.IEntityVOMapper;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.server.base.BaseEntityVOMapper;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class VOMapperGenerator {
-  @Inject
-  @Extension
-  private NameUtils _nameUtils;
-  
-  private ClientNameUtils clientNameUtils = new ClientNameUtils();
-  
-  public CharSequence compileVOMapper(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _modelPackageName = this._nameUtils.modelPackageName(model);
-    _builder.append(_modelPackageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("import java.util.HashMap;");
-    _builder.newLine();
-    _builder.append("import java.util.Map;");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("@org.springframework.stereotype.Component");
-    _builder.newLine();
-    _builder.append("public class ");
-    String _voMapperName = this._nameUtils.voMapperName(model);
-    _builder.append(_voMapperName, "");
-    _builder.append(" extends ");
-    String _name = BaseEntityVOMapper.class.getName();
-    _builder.append(_name, "");
-    _builder.append(" implements ");
-    String _name_1 = IEntityVOMapper.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("@SuppressWarnings(\"serial\")");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private Map<Class<?>, Class<?>> entityVOMapper = new HashMap<Class<?>, Class<?>>() {");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("{");
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<Entity> _filter = Iterables.<Entity>filter(_iterable, Entity.class);
-      for(final Entity entity : _filter) {
-        _builder.append("\t\t\t");
-        _builder.append("put(");
-        String _voFullQualifiedName = this.clientNameUtils.voFullQualifiedName(entity);
-        _builder.append(_voFullQualifiedName, "\t\t\t");
-        _builder.append(".class, ");
-        String _entityFullQualifiedName = this._nameUtils.entityFullQualifiedName(entity);
-        _builder.append(_entityFullQualifiedName, "\t\t\t");
-        _builder.append(".class);");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t\t\t");
-        _builder.append("put(");
-        String _entityFullQualifiedName_1 = this._nameUtils.entityFullQualifiedName(entity);
-        _builder.append(_entityFullQualifiedName_1, "\t\t\t");
-        _builder.append(".class, ");
-        String _voFullQualifiedName_1 = this.clientNameUtils.voFullQualifiedName(entity);
-        _builder.append(_voFullQualifiedName_1, "\t\t\t");
-        _builder.append(".class);");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("};");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("protected Map<Class<?>, Class<?>> getClassMappings() {");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("return entityVOMapper;");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public Class<?> getMappedClass(Class<?> clazz) {");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("return entityVOMapper.get(clazz);");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator;
+
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.vo.IEntityVOMapper;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.server.base.BaseEntityVOMapper;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class VOMapperGenerator {
+  @Inject
+  @Extension
+  private NameUtils _nameUtils;
+  
+  private ClientNameUtils clientNameUtils = new ClientNameUtils();
+  
+  public CharSequence compileVOMapper(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _modelPackageName = this._nameUtils.modelPackageName(model);
+    _builder.append(_modelPackageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("import java.util.HashMap;");
+    _builder.newLine();
+    _builder.append("import java.util.Map;");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("@org.springframework.stereotype.Component");
+    _builder.newLine();
+    _builder.append("public class ");
+    String _voMapperName = this._nameUtils.voMapperName(model);
+    _builder.append(_voMapperName, "");
+    _builder.append(" extends ");
+    String _name = BaseEntityVOMapper.class.getName();
+    _builder.append(_name, "");
+    _builder.append(" implements ");
+    String _name_1 = IEntityVOMapper.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("@SuppressWarnings(\"serial\")");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private Map<Class<?>, Class<?>> entityVOMapper = new HashMap<Class<?>, Class<?>>() {");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("{");
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<Entity> _filter = Iterables.<Entity>filter(_iterable, Entity.class);
+      for(final Entity entity : _filter) {
+        _builder.append("\t\t\t");
+        _builder.append("put(");
+        String _voFullQualifiedName = this.clientNameUtils.voFullQualifiedName(entity);
+        _builder.append(_voFullQualifiedName, "\t\t\t");
+        _builder.append(".class, ");
+        String _entityFullQualifiedName = this._nameUtils.entityFullQualifiedName(entity);
+        _builder.append(_entityFullQualifiedName, "\t\t\t");
+        _builder.append(".class);");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t\t\t");
+        _builder.append("put(");
+        String _entityFullQualifiedName_1 = this._nameUtils.entityFullQualifiedName(entity);
+        _builder.append(_entityFullQualifiedName_1, "\t\t\t");
+        _builder.append(".class, ");
+        String _voFullQualifiedName_1 = this.clientNameUtils.voFullQualifiedName(entity);
+        _builder.append(_voFullQualifiedName_1, "\t\t\t");
+        _builder.append(".class);");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("};");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("protected Map<Class<?>, Class<?>> getClassMappings() {");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("return entityVOMapper;");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public Class<?> getMappedClass(Class<?> clazz) {");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("return entityVOMapper.get(clazz);");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientGenerator.java._trace
index 972dffe..d6995e1 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientNameUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientNameUtils.java._trace
index 7d6d968..959a4f2 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientNameUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientNameUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientTypeUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientTypeUtils.java._trace
index 420309e..4c7a7ce 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientTypeUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ClientTypeUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ModuleGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ModuleGenerator.java._trace
index e58f17a..4720e9e 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ModuleGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.ModuleGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.VOGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.VOGenerator.java._trace
index 8e088c9..6ba2bb5 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.VOGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/.VOGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientGenerator.java
index 1a5e073..63e02a4 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientGenerator.java
@@ -1,136 +1,136 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.client;
-
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.client.ModuleGenerator;
-import io.pelle.mango.dsl.generator.client.VOGenerator;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryGenerator;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNavigationGenerator;
-import io.pelle.mango.dsl.generator.client.web.GWTClient;
-import io.pelle.mango.dsl.generator.client.web.GWTServices;
-import io.pelle.mango.dsl.generator.client.web.Services;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.Enumeration;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.ModuleDefinition;
-import io.pelle.mango.dsl.mango.Service;
-import io.pelle.mango.dsl.mango.ValueObject;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.emf.ecore.resource.Resource;
-import org.eclipse.xtext.generator.IFileSystemAccess;
-import org.eclipse.xtext.generator.IGenerator;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class ClientGenerator implements IGenerator {
-  @Inject
-  @Extension
-  private GWTServices _gWTServices;
-  
-  @Inject
-  @Extension
-  private GWTClient _gWTClient;
-  
-  @Inject
-  @Extension
-  private DictionaryGenerator _dictionaryGenerator;
-  
-  @Inject
-  @Extension
-  private VOGenerator _vOGenerator;
-  
-  @Inject
-  @Extension
-  private Services _services;
-  
-  @Inject
-  @Extension
-  private ClientNameUtils _clientNameUtils;
-  
-  @Inject
-  @Extension
-  private ModuleGenerator _moduleGenerator;
-  
-  @Inject
-  @Extension
-  private DictionaryNavigationGenerator _dictionaryNavigationGenerator;
-  
-  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
-    TreeIterator<EObject> _allContents = resource.getAllContents();
-    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
-    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
-    for (final Model model : _filter) {
-      {
-        String _gwtRemoteServiceLocatorFullQualifiedFileName = this._clientNameUtils.gwtRemoteServiceLocatorFullQualifiedFileName(model);
-        CharSequence _gwtRemoteServiceLocator = this._gWTServices.gwtRemoteServiceLocator(model);
-        fsa.generateFile(_gwtRemoteServiceLocatorFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtRemoteServiceLocator);
-        String _gwtRemoteServiceLocatorInterfaceFullQualifiedFileName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceFullQualifiedFileName(model);
-        CharSequence _gwtRemoteServiceLocatorInterface = this._gWTServices.gwtRemoteServiceLocatorInterface(model);
-        fsa.generateFile(_gwtRemoteServiceLocatorInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtRemoteServiceLocatorInterface);
-        String _gwtClientModuleFullQualifiedFileName = this._clientNameUtils.gwtClientModuleFullQualifiedFileName(model);
-        CharSequence _gwtClientModule = this._gWTClient.gwtClientModule(model);
-        fsa.generateFile(_gwtClientModuleFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtClientModule);
-        String _gwtClientconfigurationFullQualifiedNameFileName = this._clientNameUtils.gwtClientconfigurationFullQualifiedNameFileName(model);
-        CharSequence _gwtClientConfiguration = this._gWTClient.gwtClientConfiguration(model);
-        fsa.generateFile(_gwtClientconfigurationFullQualifiedNameFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtClientConfiguration);
-        this._dictionaryGenerator.dictionaryGenerator(model, fsa);
-        this._dictionaryNavigationGenerator.dictionaryNavigationGenerator(model, fsa);
-      }
-    }
-    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
-    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
-    Iterable<ModuleDefinition> _filter_1 = Iterables.<ModuleDefinition>filter(_iterable_1, ModuleDefinition.class);
-    for (final ModuleDefinition moduleDefinition : _filter_1) {
-      String _baseModuleDefinitionFullQualifiedFileName = this._clientNameUtils.baseModuleDefinitionFullQualifiedFileName(moduleDefinition);
-      CharSequence _compileBaseModuleDefinition = this._moduleGenerator.compileBaseModuleDefinition(moduleDefinition);
-      fsa.generateFile(_baseModuleDefinitionFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _compileBaseModuleDefinition);
-    }
-    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
-    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
-    Iterable<Entity> _filter_2 = Iterables.<Entity>filter(_iterable_2, Entity.class);
-    for (final Entity entity : _filter_2) {
-      String _voFullQualifiedFileName = this._clientNameUtils.voFullQualifiedFileName(entity);
-      CharSequence _compileVO = this._vOGenerator.compileVO(entity);
-      fsa.generateFile(_voFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _compileVO);
-    }
-    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
-    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
-    Iterable<ValueObject> _filter_3 = Iterables.<ValueObject>filter(_iterable_3, ValueObject.class);
-    for (final ValueObject valueObject : _filter_3) {
-      String _voFullQualifiedFileName_1 = this._clientNameUtils.voFullQualifiedFileName(valueObject);
-      CharSequence _compileValueObject = this._vOGenerator.compileValueObject(valueObject);
-      fsa.generateFile(_voFullQualifiedFileName_1, GeneratorConstants.VO_GEN_OUTPUT, _compileValueObject);
-    }
-    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
-    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
-    Iterable<Enumeration> _filter_4 = Iterables.<Enumeration>filter(_iterable_4, Enumeration.class);
-    for (final Enumeration enumeration : _filter_4) {
-      String _enumerationFullQualifiedFileName = this._clientNameUtils.enumerationFullQualifiedFileName(enumeration);
-      CharSequence _compileEnumeration = this._vOGenerator.compileEnumeration(enumeration);
-      fsa.generateFile(_enumerationFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _compileEnumeration);
-    }
-    TreeIterator<EObject> _allContents_5 = resource.getAllContents();
-    Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(_allContents_5);
-    Iterable<Service> _filter_5 = Iterables.<Service>filter(_iterable_5, Service.class);
-    for (final Service service : _filter_5) {
-      {
-        String _gwtAsyncServiceInterfaceFullQualifiedFileName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedFileName(service);
-        CharSequence _gwtAsyncServiceInterface = this._gWTServices.gwtAsyncServiceInterface(service);
-        fsa.generateFile(_gwtAsyncServiceInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtAsyncServiceInterface);
-        String _gwtServiceInterfaceFullQualifiedFileName = this._clientNameUtils.gwtServiceInterfaceFullQualifiedFileName(service);
-        CharSequence _gwtServiceInterface = this._gWTServices.gwtServiceInterface(service);
-        fsa.generateFile(_gwtServiceInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtServiceInterface);
-        String _serviceInterfaceFullQualifiedFileName = this._clientNameUtils.serviceInterfaceFullQualifiedFileName(service);
-        CharSequence _serviceInterface = this._services.serviceInterface(service);
-        fsa.generateFile(_serviceInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _serviceInterface);
-      }
-    }
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.client;
+
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.client.ModuleGenerator;
+import io.pelle.mango.dsl.generator.client.VOGenerator;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryGenerator;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNavigationGenerator;
+import io.pelle.mango.dsl.generator.client.web.GWTClient;
+import io.pelle.mango.dsl.generator.client.web.GWTServices;
+import io.pelle.mango.dsl.generator.client.web.Services;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.Enumeration;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.ModuleDefinition;
+import io.pelle.mango.dsl.mango.Service;
+import io.pelle.mango.dsl.mango.ValueObject;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.resource.Resource;
+import org.eclipse.xtext.generator.IFileSystemAccess;
+import org.eclipse.xtext.generator.IGenerator;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class ClientGenerator implements IGenerator {
+  @Inject
+  @Extension
+  private GWTServices _gWTServices;
+  
+  @Inject
+  @Extension
+  private GWTClient _gWTClient;
+  
+  @Inject
+  @Extension
+  private DictionaryGenerator _dictionaryGenerator;
+  
+  @Inject
+  @Extension
+  private VOGenerator _vOGenerator;
+  
+  @Inject
+  @Extension
+  private Services _services;
+  
+  @Inject
+  @Extension
+  private ClientNameUtils _clientNameUtils;
+  
+  @Inject
+  @Extension
+  private ModuleGenerator _moduleGenerator;
+  
+  @Inject
+  @Extension
+  private DictionaryNavigationGenerator _dictionaryNavigationGenerator;
+  
+  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
+    TreeIterator<EObject> _allContents = resource.getAllContents();
+    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
+    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
+    for (final Model model : _filter) {
+      {
+        String _gwtRemoteServiceLocatorFullQualifiedFileName = this._clientNameUtils.gwtRemoteServiceLocatorFullQualifiedFileName(model);
+        CharSequence _gwtRemoteServiceLocator = this._gWTServices.gwtRemoteServiceLocator(model);
+        fsa.generateFile(_gwtRemoteServiceLocatorFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtRemoteServiceLocator);
+        String _gwtRemoteServiceLocatorInterfaceFullQualifiedFileName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceFullQualifiedFileName(model);
+        CharSequence _gwtRemoteServiceLocatorInterface = this._gWTServices.gwtRemoteServiceLocatorInterface(model);
+        fsa.generateFile(_gwtRemoteServiceLocatorInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtRemoteServiceLocatorInterface);
+        String _gwtClientModuleFullQualifiedFileName = this._clientNameUtils.gwtClientModuleFullQualifiedFileName(model);
+        CharSequence _gwtClientModule = this._gWTClient.gwtClientModule(model);
+        fsa.generateFile(_gwtClientModuleFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtClientModule);
+        String _gwtClientconfigurationFullQualifiedNameFileName = this._clientNameUtils.gwtClientconfigurationFullQualifiedNameFileName(model);
+        CharSequence _gwtClientConfiguration = this._gWTClient.gwtClientConfiguration(model);
+        fsa.generateFile(_gwtClientconfigurationFullQualifiedNameFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtClientConfiguration);
+        this._dictionaryGenerator.dictionaryGenerator(model, fsa);
+        this._dictionaryNavigationGenerator.dictionaryNavigationGenerator(model, fsa);
+      }
+    }
+    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
+    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
+    Iterable<ModuleDefinition> _filter_1 = Iterables.<ModuleDefinition>filter(_iterable_1, ModuleDefinition.class);
+    for (final ModuleDefinition moduleDefinition : _filter_1) {
+      String _baseModuleDefinitionFullQualifiedFileName = this._clientNameUtils.baseModuleDefinitionFullQualifiedFileName(moduleDefinition);
+      CharSequence _compileBaseModuleDefinition = this._moduleGenerator.compileBaseModuleDefinition(moduleDefinition);
+      fsa.generateFile(_baseModuleDefinitionFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _compileBaseModuleDefinition);
+    }
+    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
+    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
+    Iterable<Entity> _filter_2 = Iterables.<Entity>filter(_iterable_2, Entity.class);
+    for (final Entity entity : _filter_2) {
+      String _voFullQualifiedFileName = this._clientNameUtils.voFullQualifiedFileName(entity);
+      CharSequence _compileVO = this._vOGenerator.compileVO(entity);
+      fsa.generateFile(_voFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _compileVO);
+    }
+    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
+    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
+    Iterable<ValueObject> _filter_3 = Iterables.<ValueObject>filter(_iterable_3, ValueObject.class);
+    for (final ValueObject valueObject : _filter_3) {
+      String _voFullQualifiedFileName_1 = this._clientNameUtils.voFullQualifiedFileName(valueObject);
+      CharSequence _compileValueObject = this._vOGenerator.compileValueObject(valueObject);
+      fsa.generateFile(_voFullQualifiedFileName_1, GeneratorConstants.VO_GEN_OUTPUT, _compileValueObject);
+    }
+    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
+    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
+    Iterable<Enumeration> _filter_4 = Iterables.<Enumeration>filter(_iterable_4, Enumeration.class);
+    for (final Enumeration enumeration : _filter_4) {
+      String _enumerationFullQualifiedFileName = this._clientNameUtils.enumerationFullQualifiedFileName(enumeration);
+      CharSequence _compileEnumeration = this._vOGenerator.compileEnumeration(enumeration);
+      fsa.generateFile(_enumerationFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _compileEnumeration);
+    }
+    TreeIterator<EObject> _allContents_5 = resource.getAllContents();
+    Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(_allContents_5);
+    Iterable<Service> _filter_5 = Iterables.<Service>filter(_iterable_5, Service.class);
+    for (final Service service : _filter_5) {
+      {
+        String _gwtAsyncServiceInterfaceFullQualifiedFileName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedFileName(service);
+        CharSequence _gwtAsyncServiceInterface = this._gWTServices.gwtAsyncServiceInterface(service);
+        fsa.generateFile(_gwtAsyncServiceInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtAsyncServiceInterface);
+        String _gwtServiceInterfaceFullQualifiedFileName = this._clientNameUtils.gwtServiceInterfaceFullQualifiedFileName(service);
+        CharSequence _gwtServiceInterface = this._gWTServices.gwtServiceInterface(service);
+        fsa.generateFile(_gwtServiceInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _gwtServiceInterface);
+        String _serviceInterfaceFullQualifiedFileName = this._clientNameUtils.serviceInterfaceFullQualifiedFileName(service);
+        CharSequence _serviceInterface = this._services.serviceInterface(service);
+        fsa.generateFile(_serviceInterfaceFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _serviceInterface);
+      }
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientNameUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientNameUtils.java
index 83794b2..2031a85 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientNameUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientNameUtils.java
@@ -1,100 +1,100 @@
-package io.pelle.mango.dsl.generator.client;
-
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.DictionaryEditor;
-import io.pelle.mango.dsl.mango.DictionarySearch;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.Enumeration;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.PackageDeclaration;
-import java.util.Arrays;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-@SuppressWarnings("all")
-public class ClientNameUtils extends NameUtils {
-  protected String _getPackageName(final PackageDeclaration packageDeclaration) {
-    String _xifexpression = null;
-    EObject _eContainer = packageDeclaration.eContainer();
-    if ((_eContainer instanceof Model)) {
-      String _name = packageDeclaration.getName();
-      String _packageName = this.getPackageName(_name);
-      String _plus = (_packageName + ".");
-      _xifexpression = (_plus + GeneratorConstants.CLIENT_PACKAGE_POSTFIX);
-    } else {
-      EObject _eContainer_1 = packageDeclaration.eContainer();
-      String _packageName_1 = this.getPackageName(_eContainer_1);
-      String _name_1 = packageDeclaration.getName();
-      String _packageName_2 = this.getPackageName(_name_1);
-      _xifexpression = this.combinePackageName(_packageName_1, _packageName_2);
-    }
-    return _xifexpression;
-  }
-  
-  public String modelPackageName(final Model model) {
-    PackageDeclaration _singleRootPackage = ModelUtil.getSingleRootPackage(model);
-    String _name = _singleRootPackage.getName();
-    String _packageName = this.getPackageName(_name);
-    String _plus = (_packageName + ".");
-    return (_plus + GeneratorConstants.CLIENT_PACKAGE_POSTFIX);
-  }
-  
-  public String voName(final Entity entity) {
-    String _name = entity.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "VO");
-  }
-  
-  public String voFullQualifiedName(final Entity entity) {
-    String _packageName = this.getPackageName(entity);
-    String _plus = (_packageName + ".");
-    String _voName = this.voName(entity);
-    return (_plus + _voName);
-  }
-  
-  public String voFullQualifiedFileName(final Entity entity) {
-    String _voFullQualifiedName = this.voFullQualifiedName(entity);
-    String _replaceAll = _voFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String enumerationName(final Enumeration enumeration) {
-    String _name = enumeration.getName();
-    return _name.toUpperCase();
-  }
-  
-  public String enumerationFullQualifiedName(final Enumeration enumeration) {
-    String _packageName = this.getPackageName(enumeration);
-    String _plus = (_packageName + ".");
-    String _enumerationName = this.enumerationName(enumeration);
-    return (_plus + _enumerationName);
-  }
-  
-  public String enumerationFullQualifiedFileName(final Enumeration enumeration) {
-    String _enumerationFullQualifiedName = this.enumerationFullQualifiedName(enumeration);
-    String _replaceAll = _enumerationFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String getPackageName(final Object packageDeclaration) {
-    if (packageDeclaration instanceof Dictionary) {
-      return _getPackageName((Dictionary)packageDeclaration);
-    } else if (packageDeclaration instanceof PackageDeclaration) {
-      return _getPackageName((PackageDeclaration)packageDeclaration);
-    } else if (packageDeclaration instanceof DictionaryEditor) {
-      return _getPackageName((DictionaryEditor)packageDeclaration);
-    } else if (packageDeclaration instanceof DictionarySearch) {
-      return _getPackageName((DictionarySearch)packageDeclaration);
-    } else if (packageDeclaration instanceof String) {
-      return _getPackageName((String)packageDeclaration);
-    } else if (packageDeclaration instanceof EObject) {
-      return _getPackageName((EObject)packageDeclaration);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(packageDeclaration).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.client;
+
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.DictionaryEditor;
+import io.pelle.mango.dsl.mango.DictionarySearch;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.Enumeration;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.PackageDeclaration;
+import java.util.Arrays;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+@SuppressWarnings("all")
+public class ClientNameUtils extends NameUtils {
+  protected String _getPackageName(final PackageDeclaration packageDeclaration) {
+    String _xifexpression = null;
+    EObject _eContainer = packageDeclaration.eContainer();
+    if ((_eContainer instanceof Model)) {
+      String _name = packageDeclaration.getName();
+      String _packageName = this.getPackageName(_name);
+      String _plus = (_packageName + ".");
+      _xifexpression = (_plus + GeneratorConstants.CLIENT_PACKAGE_POSTFIX);
+    } else {
+      EObject _eContainer_1 = packageDeclaration.eContainer();
+      String _packageName_1 = this.getPackageName(_eContainer_1);
+      String _name_1 = packageDeclaration.getName();
+      String _packageName_2 = this.getPackageName(_name_1);
+      _xifexpression = this.combinePackageName(_packageName_1, _packageName_2);
+    }
+    return _xifexpression;
+  }
+  
+  public String modelPackageName(final Model model) {
+    PackageDeclaration _singleRootPackage = ModelUtil.getSingleRootPackage(model);
+    String _name = _singleRootPackage.getName();
+    String _packageName = this.getPackageName(_name);
+    String _plus = (_packageName + ".");
+    return (_plus + GeneratorConstants.CLIENT_PACKAGE_POSTFIX);
+  }
+  
+  public String voName(final Entity entity) {
+    String _name = entity.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "VO");
+  }
+  
+  public String voFullQualifiedName(final Entity entity) {
+    String _packageName = this.getPackageName(entity);
+    String _plus = (_packageName + ".");
+    String _voName = this.voName(entity);
+    return (_plus + _voName);
+  }
+  
+  public String voFullQualifiedFileName(final Entity entity) {
+    String _voFullQualifiedName = this.voFullQualifiedName(entity);
+    String _replaceAll = _voFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String enumerationName(final Enumeration enumeration) {
+    String _name = enumeration.getName();
+    return _name.toUpperCase();
+  }
+  
+  public String enumerationFullQualifiedName(final Enumeration enumeration) {
+    String _packageName = this.getPackageName(enumeration);
+    String _plus = (_packageName + ".");
+    String _enumerationName = this.enumerationName(enumeration);
+    return (_plus + _enumerationName);
+  }
+  
+  public String enumerationFullQualifiedFileName(final Enumeration enumeration) {
+    String _enumerationFullQualifiedName = this.enumerationFullQualifiedName(enumeration);
+    String _replaceAll = _enumerationFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String getPackageName(final Object packageDeclaration) {
+    if (packageDeclaration instanceof Dictionary) {
+      return _getPackageName((Dictionary)packageDeclaration);
+    } else if (packageDeclaration instanceof PackageDeclaration) {
+      return _getPackageName((PackageDeclaration)packageDeclaration);
+    } else if (packageDeclaration instanceof DictionaryEditor) {
+      return _getPackageName((DictionaryEditor)packageDeclaration);
+    } else if (packageDeclaration instanceof DictionarySearch) {
+      return _getPackageName((DictionarySearch)packageDeclaration);
+    } else if (packageDeclaration instanceof String) {
+      return _getPackageName((String)packageDeclaration);
+    } else if (packageDeclaration instanceof EObject) {
+      return _getPackageName((EObject)packageDeclaration);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(packageDeclaration).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientTypeUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientTypeUtils.java
index a7b9c01..12bc161 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientTypeUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ClientTypeUtils.java
@@ -1,146 +1,146 @@
-package io.pelle.mango.dsl.generator.client;
-
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.util.TypeUtils;
-import io.pelle.mango.dsl.mango.BinaryDataType;
-import io.pelle.mango.dsl.mango.BinaryEntityAttribute;
-import io.pelle.mango.dsl.mango.BooleanDataType;
-import io.pelle.mango.dsl.mango.BooleanEntityAttribute;
-import io.pelle.mango.dsl.mango.CustomEntityAttribute;
-import io.pelle.mango.dsl.mango.CustomType;
-import io.pelle.mango.dsl.mango.Datatype;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import io.pelle.mango.dsl.mango.EntityDataType;
-import io.pelle.mango.dsl.mango.EntityEntityAttribute;
-import io.pelle.mango.dsl.mango.EntityType;
-import io.pelle.mango.dsl.mango.Enumeration;
-import io.pelle.mango.dsl.mango.EnumerationDataType;
-import io.pelle.mango.dsl.mango.EnumerationEntityAttribute;
-import io.pelle.mango.dsl.mango.GenericEntityAttribute;
-import io.pelle.mango.dsl.mango.GenericType;
-import io.pelle.mango.dsl.mango.GenericTypeDefinition;
-import io.pelle.mango.dsl.mango.IntegerDataType;
-import io.pelle.mango.dsl.mango.IntegerEntityAttribute;
-import io.pelle.mango.dsl.mango.LongDataType;
-import io.pelle.mango.dsl.mango.LongEntityAttribute;
-import io.pelle.mango.dsl.mango.MangoEntityAttribute;
-import io.pelle.mango.dsl.mango.MangoType;
-import io.pelle.mango.dsl.mango.MangoTypes;
-import io.pelle.mango.dsl.mango.MapEntityAttribute;
-import io.pelle.mango.dsl.mango.SimpleTypeType;
-import io.pelle.mango.dsl.mango.SimpleTypes;
-import io.pelle.mango.dsl.mango.StringDataType;
-import io.pelle.mango.dsl.mango.StringEntityAttribute;
-import io.pelle.mango.dsl.mango.ValueObjectType;
-import java.util.Arrays;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-@SuppressWarnings("all")
-public class ClientTypeUtils extends TypeUtils {
-  @Inject
-  @Extension
-  private ClientNameUtils _clientNameUtils;
-  
-  protected String _getType(final EntityDataType dataType) {
-    Entity _entity = dataType.getEntity();
-    return this.getType(_entity);
-  }
-  
-  protected String _getType(final Entity entity) {
-    return this._clientNameUtils.voFullQualifiedName(entity);
-  }
-  
-  protected String _getTypeClass(final Entity entity) {
-    String _type = this.getType(entity);
-    return (_type + ".class");
-  }
-  
-  public String getType(final Object dataType) {
-    if (dataType instanceof BinaryDataType) {
-      return _getType((BinaryDataType)dataType);
-    } else if (dataType instanceof BinaryEntityAttribute) {
-      return _getType((BinaryEntityAttribute)dataType);
-    } else if (dataType instanceof BooleanDataType) {
-      return _getType((BooleanDataType)dataType);
-    } else if (dataType instanceof BooleanEntityAttribute) {
-      return _getType((BooleanEntityAttribute)dataType);
-    } else if (dataType instanceof EnumerationDataType) {
-      return _getType((EnumerationDataType)dataType);
-    } else if (dataType instanceof EnumerationEntityAttribute) {
-      return _getType((EnumerationEntityAttribute)dataType);
-    } else if (dataType instanceof IntegerDataType) {
-      return _getType((IntegerDataType)dataType);
-    } else if (dataType instanceof IntegerEntityAttribute) {
-      return _getType((IntegerEntityAttribute)dataType);
-    } else if (dataType instanceof LongEntityAttribute) {
-      return _getType((LongEntityAttribute)dataType);
-    } else if (dataType instanceof MapEntityAttribute) {
-      return _getType((MapEntityAttribute)dataType);
-    } else if (dataType instanceof StringDataType) {
-      return _getType((StringDataType)dataType);
-    } else if (dataType instanceof StringEntityAttribute) {
-      return _getType((StringEntityAttribute)dataType);
-    } else if (dataType instanceof EntityDataType) {
-      return _getType((EntityDataType)dataType);
-    } else if (dataType instanceof EntityEntityAttribute) {
-      return _getType((EntityEntityAttribute)dataType);
-    } else if (dataType instanceof CustomEntityAttribute) {
-      return _getType((CustomEntityAttribute)dataType);
-    } else if (dataType instanceof CustomType) {
-      return _getType((CustomType)dataType);
-    } else if (dataType instanceof Datatype) {
-      return _getType((Datatype)dataType);
-    } else if (dataType instanceof Entity) {
-      return _getType((Entity)dataType);
-    } else if (dataType instanceof EntityAttribute) {
-      return _getType((EntityAttribute)dataType);
-    } else if (dataType instanceof EntityType) {
-      return _getType((EntityType)dataType);
-    } else if (dataType instanceof Enumeration) {
-      return _getType((Enumeration)dataType);
-    } else if (dataType instanceof GenericEntityAttribute) {
-      return _getType((GenericEntityAttribute)dataType);
-    } else if (dataType instanceof GenericType) {
-      return _getType((GenericType)dataType);
-    } else if (dataType instanceof MangoEntityAttribute) {
-      return _getType((MangoEntityAttribute)dataType);
-    } else if (dataType instanceof MangoType) {
-      return _getType((MangoType)dataType);
-    } else if (dataType instanceof SimpleTypeType) {
-      return _getType((SimpleTypeType)dataType);
-    } else if (dataType instanceof ValueObjectType) {
-      return _getType((ValueObjectType)dataType);
-    } else if (dataType instanceof GenericTypeDefinition) {
-      return _getType((GenericTypeDefinition)dataType);
-    } else if (dataType instanceof LongDataType) {
-      return _getType((LongDataType)dataType);
-    } else if (dataType instanceof MangoTypes) {
-      return _getType((MangoTypes)dataType);
-    } else if (dataType instanceof SimpleTypes) {
-      return _getType((SimpleTypes)dataType);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(dataType).toString());
-    }
-  }
-  
-  public String getTypeClass(final EObject entity) {
-    if (entity instanceof StringEntityAttribute) {
-      return _getTypeClass((StringEntityAttribute)entity);
-    } else if (entity instanceof EntityEntityAttribute) {
-      return _getTypeClass((EntityEntityAttribute)entity);
-    } else if (entity instanceof Datatype) {
-      return _getTypeClass((Datatype)entity);
-    } else if (entity instanceof Entity) {
-      return _getTypeClass((Entity)entity);
-    } else if (entity instanceof EntityAttribute) {
-      return _getTypeClass((EntityAttribute)entity);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(entity).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.client;
+
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.util.TypeUtils;
+import io.pelle.mango.dsl.mango.BinaryDataType;
+import io.pelle.mango.dsl.mango.BinaryEntityAttribute;
+import io.pelle.mango.dsl.mango.BooleanDataType;
+import io.pelle.mango.dsl.mango.BooleanEntityAttribute;
+import io.pelle.mango.dsl.mango.CustomEntityAttribute;
+import io.pelle.mango.dsl.mango.CustomType;
+import io.pelle.mango.dsl.mango.Datatype;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import io.pelle.mango.dsl.mango.EntityDataType;
+import io.pelle.mango.dsl.mango.EntityEntityAttribute;
+import io.pelle.mango.dsl.mango.EntityType;
+import io.pelle.mango.dsl.mango.Enumeration;
+import io.pelle.mango.dsl.mango.EnumerationDataType;
+import io.pelle.mango.dsl.mango.EnumerationEntityAttribute;
+import io.pelle.mango.dsl.mango.GenericEntityAttribute;
+import io.pelle.mango.dsl.mango.GenericType;
+import io.pelle.mango.dsl.mango.GenericTypeDefinition;
+import io.pelle.mango.dsl.mango.IntegerDataType;
+import io.pelle.mango.dsl.mango.IntegerEntityAttribute;
+import io.pelle.mango.dsl.mango.LongDataType;
+import io.pelle.mango.dsl.mango.LongEntityAttribute;
+import io.pelle.mango.dsl.mango.MangoEntityAttribute;
+import io.pelle.mango.dsl.mango.MangoType;
+import io.pelle.mango.dsl.mango.MangoTypes;
+import io.pelle.mango.dsl.mango.MapEntityAttribute;
+import io.pelle.mango.dsl.mango.SimpleTypeType;
+import io.pelle.mango.dsl.mango.SimpleTypes;
+import io.pelle.mango.dsl.mango.StringDataType;
+import io.pelle.mango.dsl.mango.StringEntityAttribute;
+import io.pelle.mango.dsl.mango.ValueObjectType;
+import java.util.Arrays;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+@SuppressWarnings("all")
+public class ClientTypeUtils extends TypeUtils {
+  @Inject
+  @Extension
+  private ClientNameUtils _clientNameUtils;
+  
+  protected String _getType(final EntityDataType dataType) {
+    Entity _entity = dataType.getEntity();
+    return this.getType(_entity);
+  }
+  
+  protected String _getType(final Entity entity) {
+    return this._clientNameUtils.voFullQualifiedName(entity);
+  }
+  
+  protected String _getTypeClass(final Entity entity) {
+    String _type = this.getType(entity);
+    return (_type + ".class");
+  }
+  
+  public String getType(final Object dataType) {
+    if (dataType instanceof BinaryDataType) {
+      return _getType((BinaryDataType)dataType);
+    } else if (dataType instanceof BinaryEntityAttribute) {
+      return _getType((BinaryEntityAttribute)dataType);
+    } else if (dataType instanceof BooleanDataType) {
+      return _getType((BooleanDataType)dataType);
+    } else if (dataType instanceof BooleanEntityAttribute) {
+      return _getType((BooleanEntityAttribute)dataType);
+    } else if (dataType instanceof EnumerationDataType) {
+      return _getType((EnumerationDataType)dataType);
+    } else if (dataType instanceof EnumerationEntityAttribute) {
+      return _getType((EnumerationEntityAttribute)dataType);
+    } else if (dataType instanceof IntegerDataType) {
+      return _getType((IntegerDataType)dataType);
+    } else if (dataType instanceof IntegerEntityAttribute) {
+      return _getType((IntegerEntityAttribute)dataType);
+    } else if (dataType instanceof LongEntityAttribute) {
+      return _getType((LongEntityAttribute)dataType);
+    } else if (dataType instanceof MapEntityAttribute) {
+      return _getType((MapEntityAttribute)dataType);
+    } else if (dataType instanceof StringDataType) {
+      return _getType((StringDataType)dataType);
+    } else if (dataType instanceof StringEntityAttribute) {
+      return _getType((StringEntityAttribute)dataType);
+    } else if (dataType instanceof EntityDataType) {
+      return _getType((EntityDataType)dataType);
+    } else if (dataType instanceof EntityEntityAttribute) {
+      return _getType((EntityEntityAttribute)dataType);
+    } else if (dataType instanceof CustomEntityAttribute) {
+      return _getType((CustomEntityAttribute)dataType);
+    } else if (dataType instanceof CustomType) {
+      return _getType((CustomType)dataType);
+    } else if (dataType instanceof Datatype) {
+      return _getType((Datatype)dataType);
+    } else if (dataType instanceof Entity) {
+      return _getType((Entity)dataType);
+    } else if (dataType instanceof EntityAttribute) {
+      return _getType((EntityAttribute)dataType);
+    } else if (dataType instanceof EntityType) {
+      return _getType((EntityType)dataType);
+    } else if (dataType instanceof Enumeration) {
+      return _getType((Enumeration)dataType);
+    } else if (dataType instanceof GenericEntityAttribute) {
+      return _getType((GenericEntityAttribute)dataType);
+    } else if (dataType instanceof GenericType) {
+      return _getType((GenericType)dataType);
+    } else if (dataType instanceof MangoEntityAttribute) {
+      return _getType((MangoEntityAttribute)dataType);
+    } else if (dataType instanceof MangoType) {
+      return _getType((MangoType)dataType);
+    } else if (dataType instanceof SimpleTypeType) {
+      return _getType((SimpleTypeType)dataType);
+    } else if (dataType instanceof ValueObjectType) {
+      return _getType((ValueObjectType)dataType);
+    } else if (dataType instanceof GenericTypeDefinition) {
+      return _getType((GenericTypeDefinition)dataType);
+    } else if (dataType instanceof LongDataType) {
+      return _getType((LongDataType)dataType);
+    } else if (dataType instanceof MangoTypes) {
+      return _getType((MangoTypes)dataType);
+    } else if (dataType instanceof SimpleTypes) {
+      return _getType((SimpleTypes)dataType);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(dataType).toString());
+    }
+  }
+  
+  public String getTypeClass(final EObject entity) {
+    if (entity instanceof StringEntityAttribute) {
+      return _getTypeClass((StringEntityAttribute)entity);
+    } else if (entity instanceof EntityEntityAttribute) {
+      return _getTypeClass((EntityEntityAttribute)entity);
+    } else if (entity instanceof Datatype) {
+      return _getTypeClass((Datatype)entity);
+    } else if (entity instanceof Entity) {
+      return _getTypeClass((Entity)entity);
+    } else if (entity instanceof EntityAttribute) {
+      return _getTypeClass((EntityAttribute)entity);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(entity).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ModuleGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ModuleGenerator.java
index 203571c..abf49f4 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ModuleGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/ModuleGenerator.java
@@ -1,301 +1,301 @@
-package io.pelle.mango.dsl.generator.client;
-
-import com.google.gwt.user.client.rpc.AsyncCallback;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.module.BaseModule;
-import io.pelle.mango.client.base.module.IModule;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
-import io.pelle.mango.dsl.mango.ModuleDefinition;
-import io.pelle.mango.dsl.mango.ModuleDefinitionParameter;
-import io.pelle.mango.dsl.mango.SimpleTypes;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-@SuppressWarnings("all")
-public class ModuleGenerator {
-  @Inject
-  @Extension
-  private ClientNameUtils _clientNameUtils;
-  
-  @Inject
-  @Extension
-  private ClientTypeUtils _clientTypeUtils;
-  
-  public CharSequence compileBaseModuleDefinition(final ModuleDefinition moduleDefinition) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(moduleDefinition);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public abstract class ");
-    String _baseModuleDefinitionName = this._clientNameUtils.baseModuleDefinitionName(moduleDefinition);
-    _builder.append(_baseModuleDefinitionName, "");
-    _builder.append(" extends ");
-    String _name = BaseModule.class.getName();
-    _builder.append(_name, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public static final String MODULE_ID = \"");
-    String _name_1 = moduleDefinition.getName();
-    _builder.append(_name_1, "\t");
-    _builder.append("\";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _baseModuleDefinitionName_1 = this._clientNameUtils.baseModuleDefinitionName(moduleDefinition);
-    _builder.append(_baseModuleDefinitionName_1, "\t");
-    _builder.append("(String moduleUrl, ");
-    String _name_2 = AsyncCallback.class.getName();
-    _builder.append(_name_2, "\t");
-    _builder.append("<");
-    String _name_3 = IModule.class.getName();
-    _builder.append(_name_3, "\t");
-    _builder.append("> moduleCallback, java.util.Map<String, Object> parameters) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("super(moduleUrl, moduleCallback, parameters);");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      EList<ModuleDefinitionParameter> _moduleDefinitionParameters = moduleDefinition.getModuleDefinitionParameters();
-      for(final ModuleDefinitionParameter moduleDefinitionParameter : _moduleDefinitionParameters) {
-        _builder.append("\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("public static final String ");
-        String _name_4 = moduleDefinitionParameter.getName();
-        String _upperCase = _name_4.toUpperCase();
-        _builder.append(_upperCase, "\t");
-        _builder.append("_PARAMETER_ID = \"");
-        String _name_5 = moduleDefinitionParameter.getName();
-        _builder.append(_name_5, "\t");
-        _builder.append("\";");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("public ");
-        SimpleTypes _type = moduleDefinitionParameter.getType();
-        _builder.append(_type, "\t");
-        _builder.append(" get");
-        String _name_6 = moduleDefinitionParameter.getName();
-        String _firstUpper = StringExtensions.toFirstUpper(_name_6);
-        _builder.append(_firstUpper, "\t");
-        _builder.append("() {");
-        _builder.newLineIfNotEmpty();
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("if (getParameters().containsKey(\"");
-        String _name_7 = moduleDefinitionParameter.getName();
-        _builder.append(_name_7, "\t\t");
-        _builder.append("\"))");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("Object parameterValue = parameters.get(\"");
-        String _name_8 = moduleDefinitionParameter.getName();
-        _builder.append(_name_8, "\t\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("if (parameterValue instanceof ");
-        SimpleTypes _type_1 = moduleDefinitionParameter.getType();
-        String _type_2 = this._clientTypeUtils.getType(_type_1);
-        _builder.append(_type_2, "\t\t\t");
-        _builder.append(")");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t\t");
-        _builder.append("return (");
-        SimpleTypes _type_3 = moduleDefinitionParameter.getType();
-        String _type_4 = this._clientTypeUtils.getType(_type_3);
-        _builder.append(_type_4, "\t\t\t\t");
-        _builder.append(") parameterValue;");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("if (parameterValue instanceof java.lang.String)");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t\t");
-        _builder.append("return ");
-        SimpleTypes _type_5 = moduleDefinitionParameter.getType();
-        String _parseSimpleTypeFromString = this._clientTypeUtils.parseSimpleTypeFromString(_type_5, "parameterValue.toString()");
-        _builder.append(_parseSimpleTypeFromString, "\t\t\t\t");
-        _builder.append(";");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("throw new RuntimeException(\"parameter value type mismatch, expected \'");
-        SimpleTypes _type_6 = moduleDefinitionParameter.getType();
-        String _type_7 = this._clientTypeUtils.getType(_type_6);
-        _builder.append(_type_7, "\t\t\t");
-        _builder.append("\' but got \'\" + parameterValue.getClass().getName() + \"\'\");");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("else");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("return null;");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("public boolean has");
-        String _name_9 = moduleDefinitionParameter.getName();
-        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_9);
-        _builder.append(_firstUpper_1, "\t");
-        _builder.append("() {");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("return getParameters().containsKey(\"");
-        String _name_10 = moduleDefinitionParameter.getName();
-        _builder.append(_name_10, "\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.newLine();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public static java.util.Map<String, Object> getParameterMap(");
-    CharSequence _moduleDefinitionParameters_1 = this.moduleDefinitionParameters(moduleDefinition);
-    _builder.append(_moduleDefinitionParameters_1, "\t");
-    _builder.append(") {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("java.util.Map<String, Object> parameterMap = new java.util.HashMap<String, Object>();");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      EList<ModuleDefinitionParameter> _moduleDefinitionParameters_2 = moduleDefinition.getModuleDefinitionParameters();
-      for(final ModuleDefinitionParameter moduleDefinitionParameter_1 : _moduleDefinitionParameters_2) {
-        _builder.append("\t\t");
-        _builder.append("parameterMap.put(");
-        String _name_11 = moduleDefinitionParameter_1.getName();
-        String _upperCase_1 = _name_11.toUpperCase();
-        _builder.append(_upperCase_1, "\t\t");
-        _builder.append("_PARAMETER_ID, ");
-        String _name_12 = moduleDefinitionParameter_1.getName();
-        String _firstLower = StringExtensions.toFirstLower(_name_12);
-        _builder.append(_firstLower, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("return parameterMap;");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public boolean hasParameter(String parameterName) {");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("return getParameters().containsKey(parameterName);");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence moduleDefinitionParameters(final ModuleDefinition moduleDefinition) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      EList<ModuleDefinitionParameter> _moduleDefinitionParameters = moduleDefinition.getModuleDefinitionParameters();
-      boolean _hasElements = false;
-      for(final ModuleDefinitionParameter moduleDefinitionParameter : _moduleDefinitionParameters) {
-        if (!_hasElements) {
-          _hasElements = true;
-        } else {
-          _builder.appendImmediate(", ", "");
-        }
-        SimpleTypes _type = moduleDefinitionParameter.getType();
-        String _type_1 = this._clientTypeUtils.getType(_type);
-        _builder.append(_type_1, "");
-        _builder.append(" ");
-        String _name = moduleDefinitionParameter.getName();
-        String _firstLower = StringExtensions.toFirstLower(_name);
-        _builder.append(_firstLower, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator.client;
+
+import com.google.gwt.user.client.rpc.AsyncCallback;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.module.BaseModule;
+import io.pelle.mango.client.base.module.IModule;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
+import io.pelle.mango.dsl.mango.ModuleDefinition;
+import io.pelle.mango.dsl.mango.ModuleDefinitionParameter;
+import io.pelle.mango.dsl.mango.SimpleTypes;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+@SuppressWarnings("all")
+public class ModuleGenerator {
+  @Inject
+  @Extension
+  private ClientNameUtils _clientNameUtils;
+  
+  @Inject
+  @Extension
+  private ClientTypeUtils _clientTypeUtils;
+  
+  public CharSequence compileBaseModuleDefinition(final ModuleDefinition moduleDefinition) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(moduleDefinition);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public abstract class ");
+    String _baseModuleDefinitionName = this._clientNameUtils.baseModuleDefinitionName(moduleDefinition);
+    _builder.append(_baseModuleDefinitionName, "");
+    _builder.append(" extends ");
+    String _name = BaseModule.class.getName();
+    _builder.append(_name, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public static final String MODULE_ID = \"");
+    String _name_1 = moduleDefinition.getName();
+    _builder.append(_name_1, "\t");
+    _builder.append("\";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _baseModuleDefinitionName_1 = this._clientNameUtils.baseModuleDefinitionName(moduleDefinition);
+    _builder.append(_baseModuleDefinitionName_1, "\t");
+    _builder.append("(String moduleUrl, ");
+    String _name_2 = AsyncCallback.class.getName();
+    _builder.append(_name_2, "\t");
+    _builder.append("<");
+    String _name_3 = IModule.class.getName();
+    _builder.append(_name_3, "\t");
+    _builder.append("> moduleCallback, java.util.Map<String, Object> parameters) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("super(moduleUrl, moduleCallback, parameters);");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      EList<ModuleDefinitionParameter> _moduleDefinitionParameters = moduleDefinition.getModuleDefinitionParameters();
+      for(final ModuleDefinitionParameter moduleDefinitionParameter : _moduleDefinitionParameters) {
+        _builder.append("\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("public static final String ");
+        String _name_4 = moduleDefinitionParameter.getName();
+        String _upperCase = _name_4.toUpperCase();
+        _builder.append(_upperCase, "\t");
+        _builder.append("_PARAMETER_ID = \"");
+        String _name_5 = moduleDefinitionParameter.getName();
+        _builder.append(_name_5, "\t");
+        _builder.append("\";");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("public ");
+        SimpleTypes _type = moduleDefinitionParameter.getType();
+        _builder.append(_type, "\t");
+        _builder.append(" get");
+        String _name_6 = moduleDefinitionParameter.getName();
+        String _firstUpper = StringExtensions.toFirstUpper(_name_6);
+        _builder.append(_firstUpper, "\t");
+        _builder.append("() {");
+        _builder.newLineIfNotEmpty();
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("if (getParameters().containsKey(\"");
+        String _name_7 = moduleDefinitionParameter.getName();
+        _builder.append(_name_7, "\t\t");
+        _builder.append("\"))");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("Object parameterValue = parameters.get(\"");
+        String _name_8 = moduleDefinitionParameter.getName();
+        _builder.append(_name_8, "\t\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("if (parameterValue instanceof ");
+        SimpleTypes _type_1 = moduleDefinitionParameter.getType();
+        String _type_2 = this._clientTypeUtils.getType(_type_1);
+        _builder.append(_type_2, "\t\t\t");
+        _builder.append(")");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t\t");
+        _builder.append("return (");
+        SimpleTypes _type_3 = moduleDefinitionParameter.getType();
+        String _type_4 = this._clientTypeUtils.getType(_type_3);
+        _builder.append(_type_4, "\t\t\t\t");
+        _builder.append(") parameterValue;");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("if (parameterValue instanceof java.lang.String)");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t\t");
+        _builder.append("return ");
+        SimpleTypes _type_5 = moduleDefinitionParameter.getType();
+        String _parseSimpleTypeFromString = this._clientTypeUtils.parseSimpleTypeFromString(_type_5, "parameterValue.toString()");
+        _builder.append(_parseSimpleTypeFromString, "\t\t\t\t");
+        _builder.append(";");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("throw new RuntimeException(\"parameter value type mismatch, expected \'");
+        SimpleTypes _type_6 = moduleDefinitionParameter.getType();
+        String _type_7 = this._clientTypeUtils.getType(_type_6);
+        _builder.append(_type_7, "\t\t\t");
+        _builder.append("\' but got \'\" + parameterValue.getClass().getName() + \"\'\");");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("else");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("return null;");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("public boolean has");
+        String _name_9 = moduleDefinitionParameter.getName();
+        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_9);
+        _builder.append(_firstUpper_1, "\t");
+        _builder.append("() {");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("return getParameters().containsKey(\"");
+        String _name_10 = moduleDefinitionParameter.getName();
+        _builder.append(_name_10, "\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.newLine();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public static java.util.Map<String, Object> getParameterMap(");
+    CharSequence _moduleDefinitionParameters_1 = this.moduleDefinitionParameters(moduleDefinition);
+    _builder.append(_moduleDefinitionParameters_1, "\t");
+    _builder.append(") {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("java.util.Map<String, Object> parameterMap = new java.util.HashMap<String, Object>();");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      EList<ModuleDefinitionParameter> _moduleDefinitionParameters_2 = moduleDefinition.getModuleDefinitionParameters();
+      for(final ModuleDefinitionParameter moduleDefinitionParameter_1 : _moduleDefinitionParameters_2) {
+        _builder.append("\t\t");
+        _builder.append("parameterMap.put(");
+        String _name_11 = moduleDefinitionParameter_1.getName();
+        String _upperCase_1 = _name_11.toUpperCase();
+        _builder.append(_upperCase_1, "\t\t");
+        _builder.append("_PARAMETER_ID, ");
+        String _name_12 = moduleDefinitionParameter_1.getName();
+        String _firstLower = StringExtensions.toFirstLower(_name_12);
+        _builder.append(_firstLower, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("return parameterMap;");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public boolean hasParameter(String parameterName) {");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("return getParameters().containsKey(parameterName);");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence moduleDefinitionParameters(final ModuleDefinition moduleDefinition) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      EList<ModuleDefinitionParameter> _moduleDefinitionParameters = moduleDefinition.getModuleDefinitionParameters();
+      boolean _hasElements = false;
+      for(final ModuleDefinitionParameter moduleDefinitionParameter : _moduleDefinitionParameters) {
+        if (!_hasElements) {
+          _hasElements = true;
+        } else {
+          _builder.appendImmediate(", ", "");
+        }
+        SimpleTypes _type = moduleDefinitionParameter.getType();
+        String _type_1 = this._clientTypeUtils.getType(_type);
+        _builder.append(_type_1, "");
+        _builder.append(" ");
+        String _name = moduleDefinitionParameter.getName();
+        String _firstLower = StringExtensions.toFirstLower(_name);
+        _builder.append(_firstLower, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/VOGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/VOGenerator.java
index 8b58c35..212c9c8 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/VOGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/VOGenerator.java
@@ -1,469 +1,469 @@
-package io.pelle.mango.dsl.generator.client;
-
-import com.google.common.base.Objects;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.db.vos.NaturalKey;
-import io.pelle.mango.client.base.vo.BaseVO;
-import io.pelle.mango.client.base.vo.EntityDescriptor;
-import io.pelle.mango.client.base.vo.IEntityDescriptor;
-import io.pelle.mango.client.base.vo.IVOEntity;
-import io.pelle.mango.client.base.vo.LongAttributeDescriptor;
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.BaseEntityGenerator;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
-import io.pelle.mango.dsl.generator.util.AttributeUtils;
-import io.pelle.mango.dsl.generator.util.EntityUtils;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import io.pelle.mango.dsl.mango.Enumeration;
-import io.pelle.mango.dsl.mango.ValueObject;
-import java.util.List;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-@SuppressWarnings("all")
-public class VOGenerator extends BaseEntityGenerator {
-  @Inject
-  @Extension
-  private AttributeUtils _attributeUtils;
-  
-  @Inject
-  @Extension
-  private ClientNameUtils _clientNameUtils;
-  
-  @Inject
-  @Extension
-  private ClientTypeUtils _clientTypeUtils;
-  
-  @Inject
-  @Extension
-  private EntityUtils _entityUtils;
-  
-  public CharSequence compileVO(final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(entity);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("@SuppressWarnings(\"serial\")");
-    _builder.newLine();
-    _builder.append("public class ");
-    String _voName = this._clientNameUtils.voName(entity);
-    _builder.append(_voName, "");
-    _builder.append(" extends ");
-    {
-      Entity _extends = entity.getExtends();
-      boolean _notEquals = (!Objects.equal(_extends, null));
-      if (_notEquals) {
-        Entity _extends_1 = entity.getExtends();
-        String _voFullQualifiedName = this._clientNameUtils.voFullQualifiedName(_extends_1);
-        _builder.append(_voFullQualifiedName, "");
-      } else {
-        String _name = BaseVO.class.getName();
-        _builder.append(_name, "");
-      }
-    }
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public static final ");
-    String _name_1 = IEntityDescriptor.class.getName();
-    _builder.append(_name_1, "\t");
-    _builder.append("<");
-    String _voFullQualifiedName_1 = this._clientNameUtils.voFullQualifiedName(entity);
-    _builder.append(_voFullQualifiedName_1, "\t");
-    _builder.append("> ");
-    String _entityConstantName = this._clientNameUtils.entityConstantName(entity);
-    _builder.append(_entityConstantName, "\t");
-    _builder.append(" = new ");
-    String _name_2 = EntityDescriptor.class.getName();
-    _builder.append(_name_2, "\t");
-    _builder.append("<");
-    String _type = this._clientTypeUtils.getType(entity);
-    _builder.append(_type, "\t");
-    _builder.append(">(");
-    String _typeClass = this._clientTypeUtils.getTypeClass(entity);
-    _builder.append(_typeClass, "\t");
-    _builder.append(");");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public static ");
-    String _name_3 = LongAttributeDescriptor.class.getName();
-    _builder.append(_name_3, "\t");
-    _builder.append(" ");
-    String _attributeConstantName = this._clientNameUtils.attributeConstantName(IVOEntity.ID_FIELD_NAME);
-    _builder.append(_attributeConstantName, "\t");
-    _builder.append(" = new ");
-    String _name_4 = LongAttributeDescriptor.class.getName();
-    _builder.append(_name_4, "\t");
-    _builder.append("(");
-    String _entityConstantName_1 = this._clientNameUtils.entityConstantName(entity);
-    _builder.append(_entityConstantName_1, "\t");
-    _builder.append(", \"");
-    _builder.append(IVOEntity.ID_FIELD_NAME, "\t");
-    _builder.append("\");");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    CharSequence _attributeDescriptorsFromExtends = this.attributeDescriptorsFromExtends(entity);
-    _builder.append(_attributeDescriptorsFromExtends, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    CharSequence _compileGetAttributeDescriptors = this.compileGetAttributeDescriptors(entity);
-    _builder.append(_compileGetAttributeDescriptors, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private long id;");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    CharSequence _terSetter = this._attributeUtils.getterSetter("long", IVOEntity.ID_FIELD_NAME);
-    _builder.append(_terSetter, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    {
-      EList<EntityAttribute> _attributes = entity.getAttributes();
-      for(final EntityAttribute attribute : _attributes) {
-        _builder.append("\t");
-        CharSequence _compileVOAttribute = this.compileVOAttribute(attribute);
-        _builder.append(_compileVOAttribute, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    CharSequence _genericVOGetter = this.genericVOGetter(entity);
-    _builder.append(_genericVOGetter, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    CharSequence _genericVOSetter = this.genericVOSetter(entity);
-    _builder.append(_genericVOSetter, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    {
-      EList<EntityAttribute> _naturalKeyAttributes = entity.getNaturalKeyAttributes();
-      boolean _isEmpty = _naturalKeyAttributes.isEmpty();
-      boolean _not = (!_isEmpty);
-      if (_not) {
-        _builder.append("\t");
-        _builder.append("@java.lang.Override");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("public String getNaturalKey() ");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("java.lang.StringBuffer sb = new java.lang.StringBuffer();");
-        _builder.newLine();
-        {
-          EList<EntityAttribute> _naturalKeyAttributes_1 = entity.getNaturalKeyAttributes();
-          boolean _hasElements = false;
-          for(final EntityAttribute naturalKeyAttribute : _naturalKeyAttributes_1) {
-            if (!_hasElements) {
-              _hasElements = true;
-            } else {
-              _builder.appendImmediate("sb.append(\", \");", "\t\t");
-            }
-            _builder.append("\t");
-            _builder.append("\t");
-            _builder.append("sb.append(this.get");
-            String _name_5 = naturalKeyAttribute.getName();
-            String _firstUpper = StringExtensions.toFirstUpper(_name_5);
-            _builder.append(_firstUpper, "\t\t");
-            _builder.append("());");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("return sb.toString();");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.newLine();
-      }
-    }
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence compileValueObject(final ValueObject valueObject) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(valueObject);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public class ");
-    String _voName = this._clientNameUtils.voName(valueObject);
-    _builder.append(_voName, "");
-    _builder.append(" ");
-    {
-      ValueObject _extends = valueObject.getExtends();
-      boolean _notEquals = (!Objects.equal(_extends, null));
-      if (_notEquals) {
-        _builder.append("extends ");
-        ValueObject _extends_1 = valueObject.getExtends();
-        String _voFullQualifiedName = this._clientNameUtils.voFullQualifiedName(_extends_1);
-        _builder.append(_voFullQualifiedName, "");
-      }
-    }
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _voName_1 = this._clientNameUtils.voName(valueObject);
-    _builder.append(_voName_1, "\t");
-    _builder.append("() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      EList<EntityAttribute> _attributes = valueObject.getAttributes();
-      for(final EntityAttribute attribute : _attributes) {
-        _builder.append("\t");
-        CharSequence _compileValueObjectAttribute = this.compileValueObjectAttribute(attribute);
-        _builder.append(_compileValueObjectAttribute, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence compileEnumeration(final Enumeration enumeration) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(enumeration);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public enum ");
-    String _enumerationName = this._clientNameUtils.enumerationName(enumeration);
-    _builder.append(_enumerationName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<String> _enumerationValues = enumeration.getEnumerationValues();
-      boolean _hasElements = false;
-      for(final String enumerationValue : _enumerationValues) {
-        if (!_hasElements) {
-          _hasElements = true;
-        } else {
-          _builder.appendImmediate(", ", "\t");
-        }
-        _builder.append("\t");
-        String _upperCase = enumerationValue.toUpperCase();
-        _builder.append(_upperCase, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public Object compileValueObjectConstructor(final List<EntityAttribute> attributes) {
-    return null;
-  }
-  
-  public CharSequence compileValueObjectAttribute(final EntityAttribute entityAttribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _type = this._clientTypeUtils.getType(entityAttribute);
-    String _name = entityAttribute.getName();
-    String _initializer = this._clientTypeUtils.getInitializer(entityAttribute);
-    CharSequence _attribute = this._attributeUtils.attribute(_type, _name, _initializer);
-    _builder.append(_attribute, "");
-    _builder.newLineIfNotEmpty();
-    String _type_1 = this._clientTypeUtils.getType(entityAttribute);
-    String _name_1 = entityAttribute.getName();
-    String _attributeName = this._clientNameUtils.attributeName(_name_1);
-    CharSequence _ter = this._attributeUtils.getter(_type_1, _attributeName);
-    _builder.append(_ter, "");
-    _builder.newLineIfNotEmpty();
-    String _type_2 = this._clientTypeUtils.getType(entityAttribute);
-    String _name_2 = entityAttribute.getName();
-    String _attributeName_1 = this._clientNameUtils.attributeName(_name_2);
-    CharSequence _setter = this._attributeUtils.setter(_type_2, _attributeName_1);
-    _builder.append(_setter, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence compileVOAttribute(final EntityAttribute entityAttribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    CharSequence _changeTrackingAttributeGetterSetter = this.changeTrackingAttributeGetterSetter(entityAttribute);
-    _builder.append(_changeTrackingAttributeGetterSetter, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence changeTrackingAttributeGetterSetter(final EntityAttribute attribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Entity _parentEntity = this._attributeUtils.getParentEntity(attribute);
-      EList<EntityAttribute> _naturalKeyAttributes = _parentEntity.getNaturalKeyAttributes();
-      boolean _contains = _naturalKeyAttributes.contains(attribute);
-      if (_contains) {
-        _builder.append("@");
-        String _name = NaturalKey.class.getName();
-        _builder.append(_name, "");
-        _builder.append("( order = ");
-        Entity _parentEntity_1 = ModelUtil.getParentEntity(attribute);
-        EList<EntityAttribute> _naturalKeyAttributes_1 = _parentEntity_1.getNaturalKeyAttributes();
-        int _indexOf = _naturalKeyAttributes_1.indexOf(attribute);
-        _builder.append(_indexOf, "");
-        _builder.append(")");
-      }
-    }
-    _builder.newLineIfNotEmpty();
-    String _type = this._clientTypeUtils.getType(attribute);
-    String _name_1 = attribute.getName();
-    String _initializer = this._clientTypeUtils.getInitializer(attribute);
-    CharSequence _attribute = this._attributeUtils.attribute(_type, _name_1, _initializer);
-    _builder.append(_attribute, "");
-    _builder.newLineIfNotEmpty();
-    {
-      Entity _parentEntity_2 = this._attributeUtils.getParentEntity(attribute);
-      boolean _isExtendedByOtherEntity = this._entityUtils.isExtendedByOtherEntity(_parentEntity_2);
-      boolean _not = (!_isExtendedByOtherEntity);
-      if (_not) {
-        Entity _parentEntity_3 = this._attributeUtils.getParentEntity(attribute);
-        CharSequence _compileEntityAttributeDescriptor = this._clientTypeUtils.compileEntityAttributeDescriptor(attribute, _parentEntity_3);
-        _builder.append(_compileEntityAttributeDescriptor, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    String _type_1 = this._clientTypeUtils.getType(attribute);
-    String _name_2 = attribute.getName();
-    String _attributeName = this._clientNameUtils.attributeName(_name_2);
-    CharSequence _ter = this._attributeUtils.getter(_type_1, _attributeName);
-    _builder.append(_ter, "");
-    _builder.newLineIfNotEmpty();
-    String _type_2 = this._clientTypeUtils.getType(attribute);
-    String _name_3 = attribute.getName();
-    String _attributeName_1 = this._clientNameUtils.attributeName(_name_3);
-    CharSequence _changeTrackingSetter = this._attributeUtils.changeTrackingSetter(_type_2, _attributeName_1);
-    _builder.append(_changeTrackingSetter, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence genericVOGetter(final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public Object get(java.lang.String name) {");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      EList<EntityAttribute> _attributes = entity.getAttributes();
-      for(final EntityAttribute attribute : _attributes) {
-        _builder.append("\t");
-        _builder.append("if (\"");
-        String _name = attribute.getName();
-        _builder.append(_name, "\t");
-        _builder.append("\".equals(name))");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("return this.");
-        String _name_1 = attribute.getName();
-        _builder.append(_name_1, "\t\t");
-        _builder.append(";");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("return super.get(name);");
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence genericVOSetter(final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public void set(java.lang.String name, java.lang.Object value) {");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("getChangeTracker().addChange(name, value);");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      EList<EntityAttribute> _attributes = entity.getAttributes();
-      for(final EntityAttribute attribute : _attributes) {
-        _builder.append("\t");
-        _builder.append("if (\"");
-        String _name = attribute.getName();
-        _builder.append(_name, "\t");
-        _builder.append("\".equals(name))");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("set");
-        String _name_1 = attribute.getName();
-        String _firstUpper = StringExtensions.toFirstUpper(_name_1);
-        _builder.append(_firstUpper, "\t\t");
-        _builder.append("((");
-        String _type = this._clientTypeUtils.getType(attribute);
-        _builder.append(_type, "\t\t");
-        _builder.append(") value);");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("return;");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("super.set(name, value);");
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator.client;
+
+import com.google.common.base.Objects;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.db.vos.NaturalKey;
+import io.pelle.mango.client.base.vo.BaseVO;
+import io.pelle.mango.client.base.vo.EntityDescriptor;
+import io.pelle.mango.client.base.vo.IEntityDescriptor;
+import io.pelle.mango.client.base.vo.IVOEntity;
+import io.pelle.mango.client.base.vo.LongAttributeDescriptor;
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.BaseEntityGenerator;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
+import io.pelle.mango.dsl.generator.util.AttributeUtils;
+import io.pelle.mango.dsl.generator.util.EntityUtils;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import io.pelle.mango.dsl.mango.Enumeration;
+import io.pelle.mango.dsl.mango.ValueObject;
+import java.util.List;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+@SuppressWarnings("all")
+public class VOGenerator extends BaseEntityGenerator {
+  @Inject
+  @Extension
+  private AttributeUtils _attributeUtils;
+  
+  @Inject
+  @Extension
+  private ClientNameUtils _clientNameUtils;
+  
+  @Inject
+  @Extension
+  private ClientTypeUtils _clientTypeUtils;
+  
+  @Inject
+  @Extension
+  private EntityUtils _entityUtils;
+  
+  public CharSequence compileVO(final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(entity);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("@SuppressWarnings(\"serial\")");
+    _builder.newLine();
+    _builder.append("public class ");
+    String _voName = this._clientNameUtils.voName(entity);
+    _builder.append(_voName, "");
+    _builder.append(" extends ");
+    {
+      Entity _extends = entity.getExtends();
+      boolean _notEquals = (!Objects.equal(_extends, null));
+      if (_notEquals) {
+        Entity _extends_1 = entity.getExtends();
+        String _voFullQualifiedName = this._clientNameUtils.voFullQualifiedName(_extends_1);
+        _builder.append(_voFullQualifiedName, "");
+      } else {
+        String _name = BaseVO.class.getName();
+        _builder.append(_name, "");
+      }
+    }
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public static final ");
+    String _name_1 = IEntityDescriptor.class.getName();
+    _builder.append(_name_1, "\t");
+    _builder.append("<");
+    String _voFullQualifiedName_1 = this._clientNameUtils.voFullQualifiedName(entity);
+    _builder.append(_voFullQualifiedName_1, "\t");
+    _builder.append("> ");
+    String _entityConstantName = this._clientNameUtils.entityConstantName(entity);
+    _builder.append(_entityConstantName, "\t");
+    _builder.append(" = new ");
+    String _name_2 = EntityDescriptor.class.getName();
+    _builder.append(_name_2, "\t");
+    _builder.append("<");
+    String _type = this._clientTypeUtils.getType(entity);
+    _builder.append(_type, "\t");
+    _builder.append(">(");
+    String _typeClass = this._clientTypeUtils.getTypeClass(entity);
+    _builder.append(_typeClass, "\t");
+    _builder.append(");");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public static ");
+    String _name_3 = LongAttributeDescriptor.class.getName();
+    _builder.append(_name_3, "\t");
+    _builder.append(" ");
+    String _attributeConstantName = this._clientNameUtils.attributeConstantName(IVOEntity.ID_FIELD_NAME);
+    _builder.append(_attributeConstantName, "\t");
+    _builder.append(" = new ");
+    String _name_4 = LongAttributeDescriptor.class.getName();
+    _builder.append(_name_4, "\t");
+    _builder.append("(");
+    String _entityConstantName_1 = this._clientNameUtils.entityConstantName(entity);
+    _builder.append(_entityConstantName_1, "\t");
+    _builder.append(", \"");
+    _builder.append(IVOEntity.ID_FIELD_NAME, "\t");
+    _builder.append("\");");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    CharSequence _attributeDescriptorsFromExtends = this.attributeDescriptorsFromExtends(entity);
+    _builder.append(_attributeDescriptorsFromExtends, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    CharSequence _compileGetAttributeDescriptors = this.compileGetAttributeDescriptors(entity);
+    _builder.append(_compileGetAttributeDescriptors, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private long id;");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    CharSequence _terSetter = this._attributeUtils.getterSetter("long", IVOEntity.ID_FIELD_NAME);
+    _builder.append(_terSetter, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    {
+      EList<EntityAttribute> _attributes = entity.getAttributes();
+      for(final EntityAttribute attribute : _attributes) {
+        _builder.append("\t");
+        CharSequence _compileVOAttribute = this.compileVOAttribute(attribute);
+        _builder.append(_compileVOAttribute, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    CharSequence _genericVOGetter = this.genericVOGetter(entity);
+    _builder.append(_genericVOGetter, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    CharSequence _genericVOSetter = this.genericVOSetter(entity);
+    _builder.append(_genericVOSetter, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    {
+      EList<EntityAttribute> _naturalKeyAttributes = entity.getNaturalKeyAttributes();
+      boolean _isEmpty = _naturalKeyAttributes.isEmpty();
+      boolean _not = (!_isEmpty);
+      if (_not) {
+        _builder.append("\t");
+        _builder.append("@java.lang.Override");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("public String getNaturalKey() ");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("java.lang.StringBuffer sb = new java.lang.StringBuffer();");
+        _builder.newLine();
+        {
+          EList<EntityAttribute> _naturalKeyAttributes_1 = entity.getNaturalKeyAttributes();
+          boolean _hasElements = false;
+          for(final EntityAttribute naturalKeyAttribute : _naturalKeyAttributes_1) {
+            if (!_hasElements) {
+              _hasElements = true;
+            } else {
+              _builder.appendImmediate("sb.append(\", \");", "\t\t");
+            }
+            _builder.append("\t");
+            _builder.append("\t");
+            _builder.append("sb.append(this.get");
+            String _name_5 = naturalKeyAttribute.getName();
+            String _firstUpper = StringExtensions.toFirstUpper(_name_5);
+            _builder.append(_firstUpper, "\t\t");
+            _builder.append("());");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("return sb.toString();");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.newLine();
+      }
+    }
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence compileValueObject(final ValueObject valueObject) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(valueObject);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public class ");
+    String _voName = this._clientNameUtils.voName(valueObject);
+    _builder.append(_voName, "");
+    _builder.append(" ");
+    {
+      ValueObject _extends = valueObject.getExtends();
+      boolean _notEquals = (!Objects.equal(_extends, null));
+      if (_notEquals) {
+        _builder.append("extends ");
+        ValueObject _extends_1 = valueObject.getExtends();
+        String _voFullQualifiedName = this._clientNameUtils.voFullQualifiedName(_extends_1);
+        _builder.append(_voFullQualifiedName, "");
+      }
+    }
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _voName_1 = this._clientNameUtils.voName(valueObject);
+    _builder.append(_voName_1, "\t");
+    _builder.append("() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      EList<EntityAttribute> _attributes = valueObject.getAttributes();
+      for(final EntityAttribute attribute : _attributes) {
+        _builder.append("\t");
+        CharSequence _compileValueObjectAttribute = this.compileValueObjectAttribute(attribute);
+        _builder.append(_compileValueObjectAttribute, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence compileEnumeration(final Enumeration enumeration) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(enumeration);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public enum ");
+    String _enumerationName = this._clientNameUtils.enumerationName(enumeration);
+    _builder.append(_enumerationName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<String> _enumerationValues = enumeration.getEnumerationValues();
+      boolean _hasElements = false;
+      for(final String enumerationValue : _enumerationValues) {
+        if (!_hasElements) {
+          _hasElements = true;
+        } else {
+          _builder.appendImmediate(", ", "\t");
+        }
+        _builder.append("\t");
+        String _upperCase = enumerationValue.toUpperCase();
+        _builder.append(_upperCase, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public Object compileValueObjectConstructor(final List<EntityAttribute> attributes) {
+    return null;
+  }
+  
+  public CharSequence compileValueObjectAttribute(final EntityAttribute entityAttribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _type = this._clientTypeUtils.getType(entityAttribute);
+    String _name = entityAttribute.getName();
+    String _initializer = this._clientTypeUtils.getInitializer(entityAttribute);
+    CharSequence _attribute = this._attributeUtils.attribute(_type, _name, _initializer);
+    _builder.append(_attribute, "");
+    _builder.newLineIfNotEmpty();
+    String _type_1 = this._clientTypeUtils.getType(entityAttribute);
+    String _name_1 = entityAttribute.getName();
+    String _attributeName = this._clientNameUtils.attributeName(_name_1);
+    CharSequence _ter = this._attributeUtils.getter(_type_1, _attributeName);
+    _builder.append(_ter, "");
+    _builder.newLineIfNotEmpty();
+    String _type_2 = this._clientTypeUtils.getType(entityAttribute);
+    String _name_2 = entityAttribute.getName();
+    String _attributeName_1 = this._clientNameUtils.attributeName(_name_2);
+    CharSequence _setter = this._attributeUtils.setter(_type_2, _attributeName_1);
+    _builder.append(_setter, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence compileVOAttribute(final EntityAttribute entityAttribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    CharSequence _changeTrackingAttributeGetterSetter = this.changeTrackingAttributeGetterSetter(entityAttribute);
+    _builder.append(_changeTrackingAttributeGetterSetter, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence changeTrackingAttributeGetterSetter(final EntityAttribute attribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Entity _parentEntity = this._attributeUtils.getParentEntity(attribute);
+      EList<EntityAttribute> _naturalKeyAttributes = _parentEntity.getNaturalKeyAttributes();
+      boolean _contains = _naturalKeyAttributes.contains(attribute);
+      if (_contains) {
+        _builder.append("@");
+        String _name = NaturalKey.class.getName();
+        _builder.append(_name, "");
+        _builder.append("( order = ");
+        Entity _parentEntity_1 = ModelUtil.getParentEntity(attribute);
+        EList<EntityAttribute> _naturalKeyAttributes_1 = _parentEntity_1.getNaturalKeyAttributes();
+        int _indexOf = _naturalKeyAttributes_1.indexOf(attribute);
+        _builder.append(_indexOf, "");
+        _builder.append(")");
+      }
+    }
+    _builder.newLineIfNotEmpty();
+    String _type = this._clientTypeUtils.getType(attribute);
+    String _name_1 = attribute.getName();
+    String _initializer = this._clientTypeUtils.getInitializer(attribute);
+    CharSequence _attribute = this._attributeUtils.attribute(_type, _name_1, _initializer);
+    _builder.append(_attribute, "");
+    _builder.newLineIfNotEmpty();
+    {
+      Entity _parentEntity_2 = this._attributeUtils.getParentEntity(attribute);
+      boolean _isExtendedByOtherEntity = this._entityUtils.isExtendedByOtherEntity(_parentEntity_2);
+      boolean _not = (!_isExtendedByOtherEntity);
+      if (_not) {
+        Entity _parentEntity_3 = this._attributeUtils.getParentEntity(attribute);
+        CharSequence _compileEntityAttributeDescriptor = this._clientTypeUtils.compileEntityAttributeDescriptor(attribute, _parentEntity_3);
+        _builder.append(_compileEntityAttributeDescriptor, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    String _type_1 = this._clientTypeUtils.getType(attribute);
+    String _name_2 = attribute.getName();
+    String _attributeName = this._clientNameUtils.attributeName(_name_2);
+    CharSequence _ter = this._attributeUtils.getter(_type_1, _attributeName);
+    _builder.append(_ter, "");
+    _builder.newLineIfNotEmpty();
+    String _type_2 = this._clientTypeUtils.getType(attribute);
+    String _name_3 = attribute.getName();
+    String _attributeName_1 = this._clientNameUtils.attributeName(_name_3);
+    CharSequence _changeTrackingSetter = this._attributeUtils.changeTrackingSetter(_type_2, _attributeName_1);
+    _builder.append(_changeTrackingSetter, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence genericVOGetter(final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public Object get(java.lang.String name) {");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      EList<EntityAttribute> _attributes = entity.getAttributes();
+      for(final EntityAttribute attribute : _attributes) {
+        _builder.append("\t");
+        _builder.append("if (\"");
+        String _name = attribute.getName();
+        _builder.append(_name, "\t");
+        _builder.append("\".equals(name))");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("return this.");
+        String _name_1 = attribute.getName();
+        _builder.append(_name_1, "\t\t");
+        _builder.append(";");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("return super.get(name);");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence genericVOSetter(final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public void set(java.lang.String name, java.lang.Object value) {");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("getChangeTracker().addChange(name, value);");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      EList<EntityAttribute> _attributes = entity.getAttributes();
+      for(final EntityAttribute attribute : _attributes) {
+        _builder.append("\t");
+        _builder.append("if (\"");
+        String _name = attribute.getName();
+        _builder.append(_name, "\t");
+        _builder.append("\".equals(name))");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("set");
+        String _name_1 = attribute.getName();
+        String _firstUpper = StringExtensions.toFirstUpper(_name_1);
+        _builder.append(_firstUpper, "\t\t");
+        _builder.append("((");
+        String _type = this._clientTypeUtils.getType(attribute);
+        _builder.append(_type, "\t\t");
+        _builder.append(") value);");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("return;");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("super.set(name, value);");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryContainerGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryContainerGenerator.java._trace
index 1ed0910..64c17f0 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryContainerGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryContainerGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryControls.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryControls.java._trace
index 6107dae..10433c6 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryControls.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryControls.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryGenerator.java._trace
index 29f2400..6a249ff 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNameUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNameUtils.java._trace
index 34a92c0..6d9f880 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNameUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNameUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNavigationGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNavigationGenerator.java._trace
index 34f3634..8982ecc 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNavigationGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/.DictionaryNavigationGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryContainerGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryContainerGenerator.java
index e61f729..15b58b9 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryContainerGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryContainerGenerator.java
@@ -1,330 +1,330 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.client.dictionary;
-
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.modules.dictionary.model.BaseModel;
-import io.pelle.mango.client.base.modules.dictionary.model.containers.EditableTableModel;
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryControls;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
-import io.pelle.mango.dsl.mango.DictionaryContainer;
-import io.pelle.mango.dsl.mango.DictionaryContainerContent;
-import io.pelle.mango.dsl.mango.DictionaryControl;
-import io.pelle.mango.dsl.mango.DictionaryEditableTable;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import java.util.List;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.generator.IFileSystemAccess;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-@SuppressWarnings("all")
-public class DictionaryContainerGenerator {
-  @Inject
-  @Extension
-  private DictionaryNameUtils _dictionaryNameUtils;
-  
-  @Inject
-  @Extension
-  private DictionaryControls _dictionaryControls;
-  
-  public CharSequence dictionaryConstant(final DictionaryContainer dictionaryContainer) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryContainer);
-    _builder.append(_dictionaryClassFullQualifiedName, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryContainer);
-    _builder.append(_dictionaryClassFullQualifiedName_1, "");
-    _builder.append("(this);");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryClass(final List<DictionaryContainerContent> dictionaryContainerContents) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
-      for(final DictionaryContainer dictionaryContainer : _filter) {
-        _builder.append("\t");
-        CharSequence _dictionaryConstant = this.dictionaryConstant(dictionaryContainer);
-        _builder.append(_dictionaryConstant, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
-      for(final DictionaryControl dictionaryControl : _filter_1) {
-        _builder.append("\t");
-        CharSequence _dictionaryConstant_1 = this._dictionaryControls.dictionaryConstant(dictionaryControl);
-        _builder.append(_dictionaryConstant_1, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  public CharSequence dictionaryContainerContentsConstructor(final List<DictionaryContainerContent> dictionaryContainerContents) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
-      for(final DictionaryContainer dictionaryContainer : _filter) {
-        _builder.append("this.getChildren().add(");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
-        _builder.append(_dictionaryConstantName, "");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
-      for(final DictionaryControl dictionaryControl : _filter_1) {
-        _builder.append("this.getControls().add(");
-        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-        _builder.append(_dictionaryConstantName_1, "");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      Iterable<DictionaryControl> _filter_2 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
-      for(final DictionaryControl dictionaryControl_1 : _filter_2) {
-        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(dictionaryControl_1);
-        _builder.append(_dictionaryControlConstantSetters, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  public CharSequence dictionaryContainerContentsConstants(final List<DictionaryContainerContent> dictionaryContainerContents) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
-      for(final DictionaryContainer dictionaryContainer : _filter) {
-        _builder.append("public ");
-        String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryContainer);
-        _builder.append(_dictionaryClassFullQualifiedName, "");
-        _builder.append(" ");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
-        _builder.append(_dictionaryConstantName, "");
-        _builder.append(" = rootComposite.");
-        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
-        _builder.append(_dictionaryConstantName_1, "");
-        _builder.append(";");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
-      for(final DictionaryControl dictionaryControl : _filter_1) {
-        _builder.append("public ");
-        CharSequence _dictionaryControlType = this._dictionaryControls.dictionaryControlType(dictionaryControl);
-        _builder.append(_dictionaryControlType, "");
-        _builder.append(" ");
-        String _dictionaryConstantName_2 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-        _builder.append(_dictionaryConstantName_2, "");
-        _builder.append(" = rootComposite.");
-        String _dictionaryConstantName_3 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-        _builder.append(_dictionaryConstantName_3, "");
-        _builder.append(";");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  public void dictionaryGenerator(final DictionaryContainer dictionaryContainer, final IFileSystemAccess fsa) {
-    EList<DictionaryContainerContent> _containercontents = dictionaryContainer.getContainercontents();
-    this.dictionaryGenerator(_containercontents, fsa);
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryContainer);
-    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryContainer);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-  }
-  
-  public CharSequence dictionaryClass(final DictionaryContainer dictionaryContainer) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("\t");
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryContainer);
-    _builder.append(_packageName, "\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "\t");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
-    _builder.append(_dictionaryClassName, "\t");
-    _builder.append(" extends de.pellepelster.myadmin.client.base.modules.dictionary.model.containers.CompositeModel {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    EList<DictionaryContainerContent> _containercontents = dictionaryContainer.getContainercontents();
-    CharSequence _dictionaryClass = this.dictionaryClass(_containercontents);
-    _builder.append(_dictionaryClass, "\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
-    _builder.append(_dictionaryClassName_1, "\t\t");
-    _builder.append("(de.pellepelster.myadmin.client.base.modules.dictionary.model.BaseModel<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("super(\"");
-    String _name_1 = dictionaryContainer.getName();
-    _builder.append(_name_1, "\t\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    EList<DictionaryContainerContent> _containercontents_1 = dictionaryContainer.getContainercontents();
-    CharSequence _dictionaryContainerContentsConstructor = this.dictionaryContainerContentsConstructor(_containercontents_1);
-    _builder.append(_dictionaryContainerContentsConstructor, "\t\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public void dictionaryGenerator(final DictionaryEditableTable dictionaryContainer, final IFileSystemAccess fsa) {
-    EList<DictionaryContainerContent> _containercontents = dictionaryContainer.getContainercontents();
-    this.dictionaryGenerator(_containercontents, fsa);
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryContainer);
-    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryContainer);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-  }
-  
-  public CharSequence dictionaryClass(final DictionaryEditableTable dictionaryContainer) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("\t");
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryContainer);
-    _builder.append(_packageName, "\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "\t");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
-    _builder.append(_dictionaryClassName, "\t");
-    _builder.append(" extends ");
-    String _name_1 = EditableTableModel.class.getName();
-    _builder.append(_name_1, "\t");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _columncontrols = dictionaryContainer.getColumncontrols();
-      for(final DictionaryControl dictionaryControl : _columncontrols) {
-        _builder.append("\t\t");
-        CharSequence _dictionaryConstant = this._dictionaryControls.dictionaryConstant(dictionaryControl);
-        _builder.append(_dictionaryConstant, "\t\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
-    _builder.append(_dictionaryClassName_1, "\t\t");
-    _builder.append("(");
-    String _name_2 = BaseModel.class.getName();
-    _builder.append(_name_2, "\t\t");
-    _builder.append("<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("super(\"");
-    String _name_3 = dictionaryContainer.getName();
-    _builder.append(_name_3, "\t\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _columncontrols_1 = dictionaryContainer.getColumncontrols();
-      for(final DictionaryControl dictionaryControl_1 : _columncontrols_1) {
-        _builder.append("\t\t\t");
-        _builder.append("this.getControls().add(");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl_1);
-        _builder.append(_dictionaryConstantName, "\t\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t\t\t");
-        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(dictionaryControl_1);
-        _builder.append(_dictionaryControlConstantSetters, "\t\t\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("setVoName(");
-    EntityAttribute _entityattribute = dictionaryContainer.getEntityattribute();
-    Entity _entity = ModelUtil.getEntity(_entityattribute);
-    String _voFullQualifiedName = this._dictionaryNameUtils.voFullQualifiedName(_entity);
-    _builder.append(_voFullQualifiedName, "\t\t\t");
-    _builder.append(".class);");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.append("setAttributePath(\"");
-    EntityAttribute _entityattribute_1 = dictionaryContainer.getEntityattribute();
-    String _name_4 = _entityattribute_1.getName();
-    _builder.append(_name_4, "\t\t\t");
-    _builder.append("\");");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public void dictionaryGenerator(final List<DictionaryContainerContent> dictionaryContainerContents, final IFileSystemAccess fsa) {
-    Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
-    for (final DictionaryContainer dictionaryContainer : _filter) {
-      String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryContainer);
-      CharSequence _dictionaryClass = this.dictionaryClass(dictionaryContainer);
-      fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-    }
-    Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
-    for (final DictionaryControl dictionaryControl : _filter_1) {
-    }
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.client.dictionary;
+
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.modules.dictionary.model.BaseModel;
+import io.pelle.mango.client.base.modules.dictionary.model.containers.EditableTableModel;
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryControls;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
+import io.pelle.mango.dsl.mango.DictionaryContainer;
+import io.pelle.mango.dsl.mango.DictionaryContainerContent;
+import io.pelle.mango.dsl.mango.DictionaryControl;
+import io.pelle.mango.dsl.mango.DictionaryEditableTable;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import java.util.List;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.generator.IFileSystemAccess;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+@SuppressWarnings("all")
+public class DictionaryContainerGenerator {
+  @Inject
+  @Extension
+  private DictionaryNameUtils _dictionaryNameUtils;
+  
+  @Inject
+  @Extension
+  private DictionaryControls _dictionaryControls;
+  
+  public CharSequence dictionaryConstant(final DictionaryContainer dictionaryContainer) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryContainer);
+    _builder.append(_dictionaryClassFullQualifiedName, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryContainer);
+    _builder.append(_dictionaryClassFullQualifiedName_1, "");
+    _builder.append("(this);");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryClass(final List<DictionaryContainerContent> dictionaryContainerContents) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
+      for(final DictionaryContainer dictionaryContainer : _filter) {
+        _builder.append("\t");
+        CharSequence _dictionaryConstant = this.dictionaryConstant(dictionaryContainer);
+        _builder.append(_dictionaryConstant, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
+      for(final DictionaryControl dictionaryControl : _filter_1) {
+        _builder.append("\t");
+        CharSequence _dictionaryConstant_1 = this._dictionaryControls.dictionaryConstant(dictionaryControl);
+        _builder.append(_dictionaryConstant_1, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  public CharSequence dictionaryContainerContentsConstructor(final List<DictionaryContainerContent> dictionaryContainerContents) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
+      for(final DictionaryContainer dictionaryContainer : _filter) {
+        _builder.append("this.getChildren().add(");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
+        _builder.append(_dictionaryConstantName, "");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
+      for(final DictionaryControl dictionaryControl : _filter_1) {
+        _builder.append("this.getControls().add(");
+        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+        _builder.append(_dictionaryConstantName_1, "");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      Iterable<DictionaryControl> _filter_2 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
+      for(final DictionaryControl dictionaryControl_1 : _filter_2) {
+        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(dictionaryControl_1);
+        _builder.append(_dictionaryControlConstantSetters, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  public CharSequence dictionaryContainerContentsConstants(final List<DictionaryContainerContent> dictionaryContainerContents) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
+      for(final DictionaryContainer dictionaryContainer : _filter) {
+        _builder.append("public ");
+        String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryContainer);
+        _builder.append(_dictionaryClassFullQualifiedName, "");
+        _builder.append(" ");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
+        _builder.append(_dictionaryConstantName, "");
+        _builder.append(" = rootComposite.");
+        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryContainer);
+        _builder.append(_dictionaryConstantName_1, "");
+        _builder.append(";");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
+      for(final DictionaryControl dictionaryControl : _filter_1) {
+        _builder.append("public ");
+        CharSequence _dictionaryControlType = this._dictionaryControls.dictionaryControlType(dictionaryControl);
+        _builder.append(_dictionaryControlType, "");
+        _builder.append(" ");
+        String _dictionaryConstantName_2 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+        _builder.append(_dictionaryConstantName_2, "");
+        _builder.append(" = rootComposite.");
+        String _dictionaryConstantName_3 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+        _builder.append(_dictionaryConstantName_3, "");
+        _builder.append(";");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  public void dictionaryGenerator(final DictionaryContainer dictionaryContainer, final IFileSystemAccess fsa) {
+    EList<DictionaryContainerContent> _containercontents = dictionaryContainer.getContainercontents();
+    this.dictionaryGenerator(_containercontents, fsa);
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryContainer);
+    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryContainer);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+  }
+  
+  public CharSequence dictionaryClass(final DictionaryContainer dictionaryContainer) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("\t");
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryContainer);
+    _builder.append(_packageName, "\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "\t");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
+    _builder.append(_dictionaryClassName, "\t");
+    _builder.append(" extends de.pellepelster.myadmin.client.base.modules.dictionary.model.containers.CompositeModel {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    EList<DictionaryContainerContent> _containercontents = dictionaryContainer.getContainercontents();
+    CharSequence _dictionaryClass = this.dictionaryClass(_containercontents);
+    _builder.append(_dictionaryClass, "\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
+    _builder.append(_dictionaryClassName_1, "\t\t");
+    _builder.append("(de.pellepelster.myadmin.client.base.modules.dictionary.model.BaseModel<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("super(\"");
+    String _name_1 = dictionaryContainer.getName();
+    _builder.append(_name_1, "\t\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    EList<DictionaryContainerContent> _containercontents_1 = dictionaryContainer.getContainercontents();
+    CharSequence _dictionaryContainerContentsConstructor = this.dictionaryContainerContentsConstructor(_containercontents_1);
+    _builder.append(_dictionaryContainerContentsConstructor, "\t\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public void dictionaryGenerator(final DictionaryEditableTable dictionaryContainer, final IFileSystemAccess fsa) {
+    EList<DictionaryContainerContent> _containercontents = dictionaryContainer.getContainercontents();
+    this.dictionaryGenerator(_containercontents, fsa);
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryContainer);
+    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryContainer);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+  }
+  
+  public CharSequence dictionaryClass(final DictionaryEditableTable dictionaryContainer) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("\t");
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryContainer);
+    _builder.append(_packageName, "\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "\t");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
+    _builder.append(_dictionaryClassName, "\t");
+    _builder.append(" extends ");
+    String _name_1 = EditableTableModel.class.getName();
+    _builder.append(_name_1, "\t");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _columncontrols = dictionaryContainer.getColumncontrols();
+      for(final DictionaryControl dictionaryControl : _columncontrols) {
+        _builder.append("\t\t");
+        CharSequence _dictionaryConstant = this._dictionaryControls.dictionaryConstant(dictionaryControl);
+        _builder.append(_dictionaryConstant, "\t\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryContainer);
+    _builder.append(_dictionaryClassName_1, "\t\t");
+    _builder.append("(");
+    String _name_2 = BaseModel.class.getName();
+    _builder.append(_name_2, "\t\t");
+    _builder.append("<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("super(\"");
+    String _name_3 = dictionaryContainer.getName();
+    _builder.append(_name_3, "\t\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _columncontrols_1 = dictionaryContainer.getColumncontrols();
+      for(final DictionaryControl dictionaryControl_1 : _columncontrols_1) {
+        _builder.append("\t\t\t");
+        _builder.append("this.getControls().add(");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl_1);
+        _builder.append(_dictionaryConstantName, "\t\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t\t\t");
+        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(dictionaryControl_1);
+        _builder.append(_dictionaryControlConstantSetters, "\t\t\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("setVoName(");
+    EntityAttribute _entityattribute = dictionaryContainer.getEntityattribute();
+    Entity _entity = ModelUtil.getEntity(_entityattribute);
+    String _voFullQualifiedName = this._dictionaryNameUtils.voFullQualifiedName(_entity);
+    _builder.append(_voFullQualifiedName, "\t\t\t");
+    _builder.append(".class);");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.append("setAttributePath(\"");
+    EntityAttribute _entityattribute_1 = dictionaryContainer.getEntityattribute();
+    String _name_4 = _entityattribute_1.getName();
+    _builder.append(_name_4, "\t\t\t");
+    _builder.append("\");");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public void dictionaryGenerator(final List<DictionaryContainerContent> dictionaryContainerContents, final IFileSystemAccess fsa) {
+    Iterable<DictionaryContainer> _filter = Iterables.<DictionaryContainer>filter(dictionaryContainerContents, DictionaryContainer.class);
+    for (final DictionaryContainer dictionaryContainer : _filter) {
+      String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryContainer);
+      CharSequence _dictionaryClass = this.dictionaryClass(dictionaryContainer);
+      fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+    }
+    Iterable<DictionaryControl> _filter_1 = Iterables.<DictionaryControl>filter(dictionaryContainerContents, DictionaryControl.class);
+    for (final DictionaryControl dictionaryControl : _filter_1) {
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryControls.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryControls.java
index 6947ca5..9ff5265 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryControls.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryControls.java
@@ -1,537 +1,537 @@
-package io.pelle.mango.dsl.generator.client.dictionary;
-
-import com.google.common.base.Objects;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.modules.dictionary.controls.IBaseControl;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.BaseControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.BigDecimalControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.BooleanControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.DateControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.EnumerationControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.FileControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.HierarchicalControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.IntegerControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.ReferenceControlModel;
-import io.pelle.mango.client.base.modules.dictionary.model.controls.TextControlModel;
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
-import io.pelle.mango.dsl.generator.util.TypeUtils;
-import io.pelle.mango.dsl.mango.BaseDictionaryControl;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.DictionaryBigDecimalControl;
-import io.pelle.mango.dsl.mango.DictionaryBooleanControl;
-import io.pelle.mango.dsl.mango.DictionaryControl;
-import io.pelle.mango.dsl.mango.DictionaryControlGroup;
-import io.pelle.mango.dsl.mango.DictionaryDateControl;
-import io.pelle.mango.dsl.mango.DictionaryEnumerationControl;
-import io.pelle.mango.dsl.mango.DictionaryFileControl;
-import io.pelle.mango.dsl.mango.DictionaryHierarchicalControl;
-import io.pelle.mango.dsl.mango.DictionaryIntegerControl;
-import io.pelle.mango.dsl.mango.DictionaryReferenceControl;
-import io.pelle.mango.dsl.mango.DictionaryTextControl;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import io.pelle.mango.dsl.mango.Labels;
-import java.util.Arrays;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-@SuppressWarnings("all")
-public class DictionaryControls {
-  @Inject
-  @Extension
-  private DictionaryNameUtils _dictionaryNameUtils;
-  
-  @Inject
-  @Extension
-  private TypeUtils _typeUtils;
-  
-  public CharSequence dictionaryControlClass(final DictionaryControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = BaseControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.append("<");
-    String _name_1 = IBaseControl.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(">");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlConstantSetters(final DictionaryControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryConstant(final DictionaryControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    CharSequence _dictionaryControlType = this.dictionaryControlType(dictionaryControl);
-    _builder.append(_dictionaryControlType, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    CharSequence _dictionaryControlType_1 = this.dictionaryControlType(dictionaryControl);
-    _builder.append(_dictionaryControlType_1, "");
-    _builder.append("(\"");
-    String _controlName = ModelUtil.getControlName(dictionaryControl);
-    _builder.append(_controlName, "");
-    _builder.append("\", this);");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  /**
-   * def dictionaryControlTypeSetters(DictionaryControl dictionaryControl, Type type) {
-   * }
-   * 
-   * «DEFINE dictionaryControlTypeSetters(DictionaryControl dictionaryControl) FOR DatatypeType»
-   * «IF this.type.baseDatatype.labels != null»
-   * «EXPAND dictionaryControlLabelSetters(this.type.baseDatatype.labels) FOR dictionaryControl»
-   * «ENDIF»
-   * «ENDDEFINE»
-   */
-  public CharSequence dictionaryControlCommonSetters(final DictionaryControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      BaseDictionaryControl _baseControl = dictionaryControl.getBaseControl();
-      boolean _notEquals = (!Objects.equal(_baseControl, null));
-      if (_notEquals) {
-        _builder.newLine();
-        _builder.append("\t");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-        _builder.append(_dictionaryConstantName, "\t");
-        _builder.append(".setMandatory(");
-        BaseDictionaryControl _baseControl_1 = dictionaryControl.getBaseControl();
-        boolean _isMandatory = _baseControl_1.isMandatory();
-        String _string = Boolean.valueOf(_isMandatory).toString();
-        String _lowerCase = _string.toLowerCase();
-        _builder.append(_lowerCase, "\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.newLine();
-        {
-          BaseDictionaryControl _baseControl_2 = dictionaryControl.getBaseControl();
-          EntityAttribute _entityattribute = _baseControl_2.getEntityattribute();
-          boolean _notEquals_1 = (!Objects.equal(_entityattribute, null));
-          if (_notEquals_1) {
-            _builder.append("\t");
-            String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-            _builder.append(_dictionaryConstantName_1, "\t");
-            _builder.append(".setAttributePath(\"");
-            BaseDictionaryControl _baseControl_3 = dictionaryControl.getBaseControl();
-            EntityAttribute _entityattribute_1 = _baseControl_3.getEntityattribute();
-            String _name = _entityattribute_1.getName();
-            _builder.append(_name, "\t");
-            _builder.append("\");");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-        _builder.newLine();
-        {
-          BaseDictionaryControl _baseControl_4 = dictionaryControl.getBaseControl();
-          Labels _labels = _baseControl_4.getLabels();
-          boolean _notEquals_2 = (!Objects.equal(_labels, null));
-          if (_notEquals_2) {
-            _builder.append("\t");
-            BaseDictionaryControl _baseControl_5 = dictionaryControl.getBaseControl();
-            Labels _labels_1 = _baseControl_5.getLabels();
-            CharSequence _dictionaryControlLabelSetters = this.dictionaryControlLabelSetters(dictionaryControl, _labels_1);
-            _builder.append(_dictionaryControlLabelSetters, "\t");
-            _builder.newLineIfNotEmpty();
-            _builder.append("\t");
-            _builder.append("//IF dictionaryControl.baseControl.entityattribute != null");
-            _builder.newLine();
-            _builder.append("\t");
-            _builder.append("//\tdictionaryControl.baseControl.entityattribute.dictionaryControlTypeSetters");
-            _builder.newLine();
-            _builder.append("\t");
-            _builder.append("//ENDIF");
-            _builder.newLine();
-          }
-        }
-      }
-    }
-    return _builder;
-  }
-  
-  public CharSequence dictionaryControlLabelSetters(final DictionaryControl dictionaryControl, final Labels labels) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      boolean _notEquals = (!Objects.equal(labels, null));
-      if (_notEquals) {
-        {
-          String _label = labels.getLabel();
-          boolean _notEquals_1 = (!Objects.equal(_label, null));
-          if (_notEquals_1) {
-            _builder.append("\t");
-            String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-            _builder.append(_dictionaryConstantName, "\t");
-            _builder.append(".setLabel(\"");
-            String _label_1 = labels.getLabel();
-            _builder.append(_label_1, "\t");
-            _builder.append("\");");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-        _builder.newLine();
-        {
-          String _columnLabel = labels.getColumnLabel();
-          boolean _notEquals_2 = (!Objects.equal(_columnLabel, null));
-          if (_notEquals_2) {
-            _builder.append("\t");
-            String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-            _builder.append(_dictionaryConstantName_1, "\t");
-            _builder.append(".setColumnLabel(\"");
-            String _columnLabel_1 = labels.getColumnLabel();
-            _builder.append(_columnLabel_1, "\t");
-            _builder.append("\");");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-        _builder.newLine();
-        {
-          String _editorLabel = labels.getEditorLabel();
-          boolean _notEquals_3 = (!Objects.equal(_editorLabel, null));
-          if (_notEquals_3) {
-            _builder.append("\t");
-            String _dictionaryConstantName_2 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-            _builder.append(_dictionaryConstantName_2, "\t");
-            _builder.append(".setEditorLabel(\"");
-            String _editorLabel_1 = labels.getEditorLabel();
-            _builder.append(_editorLabel_1, "\t");
-            _builder.append("\");");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-        _builder.newLine();
-        {
-          String _filterLabel = labels.getFilterLabel();
-          boolean _notEquals_4 = (!Objects.equal(_filterLabel, null));
-          if (_notEquals_4) {
-            _builder.append("\t");
-            String _dictionaryConstantName_3 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-            _builder.append(_dictionaryConstantName_3, "\t");
-            _builder.append(".setFilterLabel(\"");
-            String _filterLabel_1 = labels.getFilterLabel();
-            _builder.append(_filterLabel_1, "\t");
-            _builder.append("\");");
-            _builder.newLineIfNotEmpty();
-          }
-        }
-      }
-    }
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryTextControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = TextControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlConstantSetters(final DictionaryTextControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      DictionaryTextControl _ref = dictionaryControl.getRef();
-      boolean _notEquals = (!Objects.equal(_ref, null));
-      if (_notEquals) {
-        DictionaryTextControl _ref_1 = dictionaryControl.getRef();
-        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(_ref_1);
-        _builder.append(_dictionaryControlConstantSetters, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    CharSequence _dictionaryControlCommonSetters = this.dictionaryControlCommonSetters(dictionaryControl);
-    _builder.append(_dictionaryControlCommonSetters, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryIntegerControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = IntegerControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryBigDecimalControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = BigDecimalControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryBooleanControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = BooleanControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryDateControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = DateControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryEnumerationControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = EnumerationControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryReferenceControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append(ReferenceControlModel.class, "");
-    _builder.append("<");
-    EntityAttribute _entityAttribute = ModelUtil.getEntityAttribute(dictionaryControl);
-    String _type = this._typeUtils.getType(_entityAttribute);
-    _builder.append(_type, "");
-    _builder.append(">");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryConstant(final DictionaryReferenceControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryControl);
-    _builder.append(_dictionaryClassFullQualifiedName, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryControl);
-    _builder.append(_dictionaryClassFullQualifiedName_1, "");
-    _builder.append("(this);");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryControlClass(final DictionaryReferenceControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryControl);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryControl);
-    _builder.append(_dictionaryClassName, "");
-    _builder.append(" extends ");
-    CharSequence _dictionaryControlType = this.dictionaryControlType(dictionaryControl);
-    _builder.append(_dictionaryControlType, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _labelcontrols = dictionaryControl.getLabelcontrols();
-      for(final DictionaryControl dictionaryLabelControl : _labelcontrols) {
-        _builder.append("\t");
-        CharSequence _dictionaryConstant = this.dictionaryConstant(dictionaryLabelControl);
-        _builder.append(_dictionaryConstant, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryControl);
-    _builder.append(_dictionaryClassName_1, "\t");
-    _builder.append("(de.pellepelster.myadmin.client.base.modules.dictionary.model.BaseModel<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("super(\"");
-    String _controlName = ModelUtil.getControlName(dictionaryControl);
-    _builder.append(_controlName, "\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _labelcontrols_1 = dictionaryControl.getLabelcontrols();
-      for(final DictionaryControl dictionaryLabelControl_1 : _labelcontrols_1) {
-        _builder.append("\t\t");
-        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(dictionaryControl);
-        _builder.append(_dictionaryControlConstantSetters, "\t\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _labelcontrols_2 = dictionaryControl.getLabelcontrols();
-      for(final DictionaryControl dictionaryLabelControl_2 : _labelcontrols_2) {
-        _builder.append("\t\t");
-        _builder.append("this.getLabelControls().add(");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryLabelControl_2);
-        _builder.append(_dictionaryConstantName, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlConstantSetters(final DictionaryReferenceControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      DictionaryReferenceControl _ref = dictionaryControl.getRef();
-      boolean _notEquals = (!Objects.equal(_ref, null));
-      if (_notEquals) {
-        _builder.append("\t");
-        DictionaryReferenceControl _ref_1 = dictionaryControl.getRef();
-        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(_ref_1);
-        _builder.append(_dictionaryControlConstantSetters, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    CharSequence _dictionaryControlCommonSetters = this.dictionaryControlCommonSetters(dictionaryControl);
-    _builder.append(_dictionaryControlCommonSetters, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      Dictionary _dictionary = dictionaryControl.getDictionary();
-      boolean _notEquals_1 = (!Objects.equal(_dictionary, null));
-      if (_notEquals_1) {
-        _builder.append("\t");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
-        _builder.append(_dictionaryConstantName, "\t");
-        _builder.append(".setDictionaryName(\"");
-        Dictionary _dictionary_1 = dictionaryControl.getDictionary();
-        String _name = _dictionary_1.getName();
-        _builder.append(_name, "\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryHierarchicalControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = HierarchicalControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.append("<");
-    String _name_1 = IBaseControl.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(">");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlType(final DictionaryFileControl dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    String _name = FileControlModel.class.getName();
-    _builder.append(_name, "");
-    _builder.append("<");
-    String _name_1 = IBaseControl.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(">");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryControlConstantSetters(final DictionaryControlGroup dictionaryControl) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      DictionaryControlGroup _ref = dictionaryControl.getRef();
-      boolean _notEquals = (!Objects.equal(_ref, null));
-      if (_notEquals) {
-        DictionaryControlGroup _ref_1 = dictionaryControl.getRef();
-        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(_ref_1);
-        _builder.append(_dictionaryControlConstantSetters, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    CharSequence _dictionaryControlCommonSetters = this.dictionaryControlCommonSetters(dictionaryControl);
-    _builder.append(_dictionaryControlCommonSetters, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryControlType(final EObject dictionaryControl) {
-    if (dictionaryControl instanceof DictionaryBigDecimalControl) {
-      return _dictionaryControlType((DictionaryBigDecimalControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryBooleanControl) {
-      return _dictionaryControlType((DictionaryBooleanControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryDateControl) {
-      return _dictionaryControlType((DictionaryDateControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryEnumerationControl) {
-      return _dictionaryControlType((DictionaryEnumerationControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryFileControl) {
-      return _dictionaryControlType((DictionaryFileControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryIntegerControl) {
-      return _dictionaryControlType((DictionaryIntegerControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryReferenceControl) {
-      return _dictionaryControlType((DictionaryReferenceControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryTextControl) {
-      return _dictionaryControlType((DictionaryTextControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryControl) {
-      return _dictionaryControlType((DictionaryControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryHierarchicalControl) {
-      return _dictionaryControlType((DictionaryHierarchicalControl)dictionaryControl);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(dictionaryControl).toString());
-    }
-  }
-  
-  public Object dictionaryControlConstantSetters(final DictionaryControl dictionaryControl) {
-    if (dictionaryControl instanceof DictionaryControlGroup) {
-      return _dictionaryControlConstantSetters((DictionaryControlGroup)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryReferenceControl) {
-      return _dictionaryControlConstantSetters((DictionaryReferenceControl)dictionaryControl);
-    } else if (dictionaryControl instanceof DictionaryTextControl) {
-      return _dictionaryControlConstantSetters((DictionaryTextControl)dictionaryControl);
-    } else if (dictionaryControl != null) {
-      return _dictionaryControlConstantSetters(dictionaryControl);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(dictionaryControl).toString());
-    }
-  }
-  
-  public CharSequence dictionaryConstant(final DictionaryControl dictionaryControl) {
-    if (dictionaryControl instanceof DictionaryReferenceControl) {
-      return _dictionaryConstant((DictionaryReferenceControl)dictionaryControl);
-    } else if (dictionaryControl != null) {
-      return _dictionaryConstant(dictionaryControl);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(dictionaryControl).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.client.dictionary;
+
+import com.google.common.base.Objects;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.modules.dictionary.controls.IBaseControl;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.BaseControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.BigDecimalControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.BooleanControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.DateControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.EnumerationControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.FileControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.HierarchicalControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.IntegerControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.ReferenceControlModel;
+import io.pelle.mango.client.base.modules.dictionary.model.controls.TextControlModel;
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
+import io.pelle.mango.dsl.generator.util.TypeUtils;
+import io.pelle.mango.dsl.mango.BaseDictionaryControl;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.DictionaryBigDecimalControl;
+import io.pelle.mango.dsl.mango.DictionaryBooleanControl;
+import io.pelle.mango.dsl.mango.DictionaryControl;
+import io.pelle.mango.dsl.mango.DictionaryControlGroup;
+import io.pelle.mango.dsl.mango.DictionaryDateControl;
+import io.pelle.mango.dsl.mango.DictionaryEnumerationControl;
+import io.pelle.mango.dsl.mango.DictionaryFileControl;
+import io.pelle.mango.dsl.mango.DictionaryHierarchicalControl;
+import io.pelle.mango.dsl.mango.DictionaryIntegerControl;
+import io.pelle.mango.dsl.mango.DictionaryReferenceControl;
+import io.pelle.mango.dsl.mango.DictionaryTextControl;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import io.pelle.mango.dsl.mango.Labels;
+import java.util.Arrays;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+@SuppressWarnings("all")
+public class DictionaryControls {
+  @Inject
+  @Extension
+  private DictionaryNameUtils _dictionaryNameUtils;
+  
+  @Inject
+  @Extension
+  private TypeUtils _typeUtils;
+  
+  public CharSequence dictionaryControlClass(final DictionaryControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = BaseControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.append("<");
+    String _name_1 = IBaseControl.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(">");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlConstantSetters(final DictionaryControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryConstant(final DictionaryControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    CharSequence _dictionaryControlType = this.dictionaryControlType(dictionaryControl);
+    _builder.append(_dictionaryControlType, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    CharSequence _dictionaryControlType_1 = this.dictionaryControlType(dictionaryControl);
+    _builder.append(_dictionaryControlType_1, "");
+    _builder.append("(\"");
+    String _controlName = ModelUtil.getControlName(dictionaryControl);
+    _builder.append(_controlName, "");
+    _builder.append("\", this);");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  /**
+   * def dictionaryControlTypeSetters(DictionaryControl dictionaryControl, Type type) {
+   * }
+   * 
+   * «DEFINE dictionaryControlTypeSetters(DictionaryControl dictionaryControl) FOR DatatypeType»
+   * «IF this.type.baseDatatype.labels != null»
+   * «EXPAND dictionaryControlLabelSetters(this.type.baseDatatype.labels) FOR dictionaryControl»
+   * «ENDIF»
+   * «ENDDEFINE»
+   */
+  public CharSequence dictionaryControlCommonSetters(final DictionaryControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      BaseDictionaryControl _baseControl = dictionaryControl.getBaseControl();
+      boolean _notEquals = (!Objects.equal(_baseControl, null));
+      if (_notEquals) {
+        _builder.newLine();
+        _builder.append("\t");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+        _builder.append(_dictionaryConstantName, "\t");
+        _builder.append(".setMandatory(");
+        BaseDictionaryControl _baseControl_1 = dictionaryControl.getBaseControl();
+        boolean _isMandatory = _baseControl_1.isMandatory();
+        String _string = Boolean.valueOf(_isMandatory).toString();
+        String _lowerCase = _string.toLowerCase();
+        _builder.append(_lowerCase, "\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.newLine();
+        {
+          BaseDictionaryControl _baseControl_2 = dictionaryControl.getBaseControl();
+          EntityAttribute _entityattribute = _baseControl_2.getEntityattribute();
+          boolean _notEquals_1 = (!Objects.equal(_entityattribute, null));
+          if (_notEquals_1) {
+            _builder.append("\t");
+            String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+            _builder.append(_dictionaryConstantName_1, "\t");
+            _builder.append(".setAttributePath(\"");
+            BaseDictionaryControl _baseControl_3 = dictionaryControl.getBaseControl();
+            EntityAttribute _entityattribute_1 = _baseControl_3.getEntityattribute();
+            String _name = _entityattribute_1.getName();
+            _builder.append(_name, "\t");
+            _builder.append("\");");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+        _builder.newLine();
+        {
+          BaseDictionaryControl _baseControl_4 = dictionaryControl.getBaseControl();
+          Labels _labels = _baseControl_4.getLabels();
+          boolean _notEquals_2 = (!Objects.equal(_labels, null));
+          if (_notEquals_2) {
+            _builder.append("\t");
+            BaseDictionaryControl _baseControl_5 = dictionaryControl.getBaseControl();
+            Labels _labels_1 = _baseControl_5.getLabels();
+            CharSequence _dictionaryControlLabelSetters = this.dictionaryControlLabelSetters(dictionaryControl, _labels_1);
+            _builder.append(_dictionaryControlLabelSetters, "\t");
+            _builder.newLineIfNotEmpty();
+            _builder.append("\t");
+            _builder.append("//IF dictionaryControl.baseControl.entityattribute != null");
+            _builder.newLine();
+            _builder.append("\t");
+            _builder.append("//\tdictionaryControl.baseControl.entityattribute.dictionaryControlTypeSetters");
+            _builder.newLine();
+            _builder.append("\t");
+            _builder.append("//ENDIF");
+            _builder.newLine();
+          }
+        }
+      }
+    }
+    return _builder;
+  }
+  
+  public CharSequence dictionaryControlLabelSetters(final DictionaryControl dictionaryControl, final Labels labels) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      boolean _notEquals = (!Objects.equal(labels, null));
+      if (_notEquals) {
+        {
+          String _label = labels.getLabel();
+          boolean _notEquals_1 = (!Objects.equal(_label, null));
+          if (_notEquals_1) {
+            _builder.append("\t");
+            String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+            _builder.append(_dictionaryConstantName, "\t");
+            _builder.append(".setLabel(\"");
+            String _label_1 = labels.getLabel();
+            _builder.append(_label_1, "\t");
+            _builder.append("\");");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+        _builder.newLine();
+        {
+          String _columnLabel = labels.getColumnLabel();
+          boolean _notEquals_2 = (!Objects.equal(_columnLabel, null));
+          if (_notEquals_2) {
+            _builder.append("\t");
+            String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+            _builder.append(_dictionaryConstantName_1, "\t");
+            _builder.append(".setColumnLabel(\"");
+            String _columnLabel_1 = labels.getColumnLabel();
+            _builder.append(_columnLabel_1, "\t");
+            _builder.append("\");");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+        _builder.newLine();
+        {
+          String _editorLabel = labels.getEditorLabel();
+          boolean _notEquals_3 = (!Objects.equal(_editorLabel, null));
+          if (_notEquals_3) {
+            _builder.append("\t");
+            String _dictionaryConstantName_2 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+            _builder.append(_dictionaryConstantName_2, "\t");
+            _builder.append(".setEditorLabel(\"");
+            String _editorLabel_1 = labels.getEditorLabel();
+            _builder.append(_editorLabel_1, "\t");
+            _builder.append("\");");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+        _builder.newLine();
+        {
+          String _filterLabel = labels.getFilterLabel();
+          boolean _notEquals_4 = (!Objects.equal(_filterLabel, null));
+          if (_notEquals_4) {
+            _builder.append("\t");
+            String _dictionaryConstantName_3 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+            _builder.append(_dictionaryConstantName_3, "\t");
+            _builder.append(".setFilterLabel(\"");
+            String _filterLabel_1 = labels.getFilterLabel();
+            _builder.append(_filterLabel_1, "\t");
+            _builder.append("\");");
+            _builder.newLineIfNotEmpty();
+          }
+        }
+      }
+    }
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryTextControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = TextControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlConstantSetters(final DictionaryTextControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      DictionaryTextControl _ref = dictionaryControl.getRef();
+      boolean _notEquals = (!Objects.equal(_ref, null));
+      if (_notEquals) {
+        DictionaryTextControl _ref_1 = dictionaryControl.getRef();
+        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(_ref_1);
+        _builder.append(_dictionaryControlConstantSetters, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    CharSequence _dictionaryControlCommonSetters = this.dictionaryControlCommonSetters(dictionaryControl);
+    _builder.append(_dictionaryControlCommonSetters, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryIntegerControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = IntegerControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryBigDecimalControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = BigDecimalControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryBooleanControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = BooleanControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryDateControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = DateControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryEnumerationControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = EnumerationControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryReferenceControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append(ReferenceControlModel.class, "");
+    _builder.append("<");
+    EntityAttribute _entityAttribute = ModelUtil.getEntityAttribute(dictionaryControl);
+    String _type = this._typeUtils.getType(_entityAttribute);
+    _builder.append(_type, "");
+    _builder.append(">");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryConstant(final DictionaryReferenceControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryControl);
+    _builder.append(_dictionaryClassFullQualifiedName, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryControl);
+    _builder.append(_dictionaryClassFullQualifiedName_1, "");
+    _builder.append("(this);");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryControlClass(final DictionaryReferenceControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryControl);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryControl);
+    _builder.append(_dictionaryClassName, "");
+    _builder.append(" extends ");
+    CharSequence _dictionaryControlType = this.dictionaryControlType(dictionaryControl);
+    _builder.append(_dictionaryControlType, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _labelcontrols = dictionaryControl.getLabelcontrols();
+      for(final DictionaryControl dictionaryLabelControl : _labelcontrols) {
+        _builder.append("\t");
+        CharSequence _dictionaryConstant = this.dictionaryConstant(dictionaryLabelControl);
+        _builder.append(_dictionaryConstant, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryControl);
+    _builder.append(_dictionaryClassName_1, "\t");
+    _builder.append("(de.pellepelster.myadmin.client.base.modules.dictionary.model.BaseModel<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("super(\"");
+    String _controlName = ModelUtil.getControlName(dictionaryControl);
+    _builder.append(_controlName, "\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _labelcontrols_1 = dictionaryControl.getLabelcontrols();
+      for(final DictionaryControl dictionaryLabelControl_1 : _labelcontrols_1) {
+        _builder.append("\t\t");
+        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(dictionaryControl);
+        _builder.append(_dictionaryControlConstantSetters, "\t\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _labelcontrols_2 = dictionaryControl.getLabelcontrols();
+      for(final DictionaryControl dictionaryLabelControl_2 : _labelcontrols_2) {
+        _builder.append("\t\t");
+        _builder.append("this.getLabelControls().add(");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryLabelControl_2);
+        _builder.append(_dictionaryConstantName, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlConstantSetters(final DictionaryReferenceControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      DictionaryReferenceControl _ref = dictionaryControl.getRef();
+      boolean _notEquals = (!Objects.equal(_ref, null));
+      if (_notEquals) {
+        _builder.append("\t");
+        DictionaryReferenceControl _ref_1 = dictionaryControl.getRef();
+        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(_ref_1);
+        _builder.append(_dictionaryControlConstantSetters, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    CharSequence _dictionaryControlCommonSetters = this.dictionaryControlCommonSetters(dictionaryControl);
+    _builder.append(_dictionaryControlCommonSetters, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      Dictionary _dictionary = dictionaryControl.getDictionary();
+      boolean _notEquals_1 = (!Objects.equal(_dictionary, null));
+      if (_notEquals_1) {
+        _builder.append("\t");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl);
+        _builder.append(_dictionaryConstantName, "\t");
+        _builder.append(".setDictionaryName(\"");
+        Dictionary _dictionary_1 = dictionaryControl.getDictionary();
+        String _name = _dictionary_1.getName();
+        _builder.append(_name, "\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryHierarchicalControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = HierarchicalControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.append("<");
+    String _name_1 = IBaseControl.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(">");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlType(final DictionaryFileControl dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    String _name = FileControlModel.class.getName();
+    _builder.append(_name, "");
+    _builder.append("<");
+    String _name_1 = IBaseControl.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(">");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryControlConstantSetters(final DictionaryControlGroup dictionaryControl) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      DictionaryControlGroup _ref = dictionaryControl.getRef();
+      boolean _notEquals = (!Objects.equal(_ref, null));
+      if (_notEquals) {
+        DictionaryControlGroup _ref_1 = dictionaryControl.getRef();
+        Object _dictionaryControlConstantSetters = this.dictionaryControlConstantSetters(_ref_1);
+        _builder.append(_dictionaryControlConstantSetters, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    CharSequence _dictionaryControlCommonSetters = this.dictionaryControlCommonSetters(dictionaryControl);
+    _builder.append(_dictionaryControlCommonSetters, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryControlType(final EObject dictionaryControl) {
+    if (dictionaryControl instanceof DictionaryBigDecimalControl) {
+      return _dictionaryControlType((DictionaryBigDecimalControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryBooleanControl) {
+      return _dictionaryControlType((DictionaryBooleanControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryDateControl) {
+      return _dictionaryControlType((DictionaryDateControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryEnumerationControl) {
+      return _dictionaryControlType((DictionaryEnumerationControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryFileControl) {
+      return _dictionaryControlType((DictionaryFileControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryIntegerControl) {
+      return _dictionaryControlType((DictionaryIntegerControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryReferenceControl) {
+      return _dictionaryControlType((DictionaryReferenceControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryTextControl) {
+      return _dictionaryControlType((DictionaryTextControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryControl) {
+      return _dictionaryControlType((DictionaryControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryHierarchicalControl) {
+      return _dictionaryControlType((DictionaryHierarchicalControl)dictionaryControl);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(dictionaryControl).toString());
+    }
+  }
+  
+  public Object dictionaryControlConstantSetters(final DictionaryControl dictionaryControl) {
+    if (dictionaryControl instanceof DictionaryControlGroup) {
+      return _dictionaryControlConstantSetters((DictionaryControlGroup)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryReferenceControl) {
+      return _dictionaryControlConstantSetters((DictionaryReferenceControl)dictionaryControl);
+    } else if (dictionaryControl instanceof DictionaryTextControl) {
+      return _dictionaryControlConstantSetters((DictionaryTextControl)dictionaryControl);
+    } else if (dictionaryControl != null) {
+      return _dictionaryControlConstantSetters(dictionaryControl);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(dictionaryControl).toString());
+    }
+  }
+  
+  public CharSequence dictionaryConstant(final DictionaryControl dictionaryControl) {
+    if (dictionaryControl instanceof DictionaryReferenceControl) {
+      return _dictionaryConstant((DictionaryReferenceControl)dictionaryControl);
+    } else if (dictionaryControl != null) {
+      return _dictionaryConstant(dictionaryControl);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(dictionaryControl).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryGenerator.java
index ec31f4c..29516da 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryGenerator.java
@@ -1,861 +1,861 @@
-package io.pelle.mango.dsl.generator.client.dictionary;
-
-import com.google.common.base.Objects;
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.modules.dictionary.model.BaseModel;
-import io.pelle.mango.client.base.modules.dictionary.model.DictionaryModel;
-import io.pelle.mango.client.base.modules.dictionary.model.containers.CompositeModel;
-import io.pelle.mango.client.base.modules.dictionary.model.containers.ICompositeModel;
-import io.pelle.mango.client.base.modules.dictionary.model.editor.EditorModel;
-import io.pelle.mango.client.base.modules.dictionary.model.search.FilterModel;
-import io.pelle.mango.client.base.modules.dictionary.model.search.ResultModel;
-import io.pelle.mango.client.base.modules.dictionary.model.search.SearchModel;
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryContainerGenerator;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryControls;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.DictionaryContainerContent;
-import io.pelle.mango.dsl.mango.DictionaryControl;
-import io.pelle.mango.dsl.mango.DictionaryEditor;
-import io.pelle.mango.dsl.mango.DictionaryFilter;
-import io.pelle.mango.dsl.mango.DictionaryResult;
-import io.pelle.mango.dsl.mango.DictionarySearch;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.Model;
-import java.util.Arrays;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.generator.IFileSystemAccess;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class DictionaryGenerator {
-  @Inject
-  @Extension
-  private DictionaryNameUtils _dictionaryNameUtils;
-  
-  @Inject
-  @Extension
-  private DictionaryControls _dictionaryControls;
-  
-  @Inject
-  @Extension
-  private DictionaryContainerGenerator _dictionaryContainerGenerator;
-  
-  protected CharSequence _dictionaryConstant(final DictionaryEditor dictionaryEditor) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryEditor);
-    _builder.append(_dictionaryClassFullQualifiedName, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryEditor);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryEditor);
-    _builder.append(_dictionaryClassFullQualifiedName_1, "");
-    _builder.append("(this);");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryConstant(final Dictionary dictionary) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public static final ");
-    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionary);
-    _builder.append(_dictionaryClassFullQualifiedName, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionary);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionary);
-    _builder.append(_dictionaryClassFullQualifiedName_1, "");
-    _builder.append("();");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public void dictionaryGenerator(final Model model, final IFileSystemAccess fsa) {
-    TreeIterator<EObject> _eAllContents = model.eAllContents();
-    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-    Iterable<Dictionary> _filter = Iterables.<Dictionary>filter(_iterable, Dictionary.class);
-    for (final Dictionary dictionary : _filter) {
-      this.dictionaryGenerator(dictionary, fsa);
-    }
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(model);
-    CharSequence _dictionaryClass = this.dictionaryClass(model);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-  }
-  
-  public CharSequence dictionaryClass(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("package ");
-    String _modelPackageName = this._dictionaryNameUtils.modelPackageName(model);
-    _builder.append(_modelPackageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(model);
-    _builder.append(_dictionaryClassName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(model);
-    _builder.append(_dictionaryClassName_1, "\t");
-    _builder.append("() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<Dictionary> _filter = Iterables.<Dictionary>filter(_iterable, Dictionary.class);
-      for(final Dictionary dictionary : _filter) {
-        _builder.append("\t");
-        CharSequence _dictionaryConstant = this.dictionaryConstant(dictionary);
-        _builder.append(_dictionaryConstant, "\t");
-        _builder.append(";");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public void dictionaryGenerator(final Dictionary dictionary, final IFileSystemAccess fsa) {
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionary);
-    CharSequence _dictionaryClass = this.dictionaryClass(dictionary);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-    EList<DictionaryControl> _labelcontrols = dictionary.getLabelcontrols();
-    for (final DictionaryControl dictionaryLabelControl : _labelcontrols) {
-      String _dictionaryClassFullQualifiedFileName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryLabelControl);
-      CharSequence _dictionaryControlClass = this._dictionaryControls.dictionaryControlClass(dictionaryLabelControl);
-      fsa.generateFile(_dictionaryClassFullQualifiedFileName_1, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryControlClass);
-    }
-    DictionaryEditor _dictionaryeditor = dictionary.getDictionaryeditor();
-    boolean _notEquals = (!Objects.equal(_dictionaryeditor, null));
-    if (_notEquals) {
-      DictionaryEditor _dictionaryeditor_1 = dictionary.getDictionaryeditor();
-      this.dictionaryGenerator(_dictionaryeditor_1, fsa);
-    }
-    DictionarySearch _dictionarysearch = dictionary.getDictionarysearch();
-    boolean _notEquals_1 = (!Objects.equal(_dictionarysearch, null));
-    if (_notEquals_1) {
-      DictionarySearch _dictionarysearch_1 = dictionary.getDictionarysearch();
-      this.dictionaryGenerator(_dictionarysearch_1, fsa);
-    }
-  }
-  
-  public void dictionaryGenerator(final DictionaryEditor dictionaryEditor, final IFileSystemAccess fsa) {
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryEditor);
-    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryEditor);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-    EList<DictionaryContainerContent> _containercontents = dictionaryEditor.getContainercontents();
-    this._dictionaryContainerGenerator.dictionaryGenerator(_containercontents, fsa);
-  }
-  
-  public CharSequence dictionaryClass(final DictionaryEditor dictionaryEditor) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryEditor);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryEditor);
-    _builder.append(_dictionaryClassName, "");
-    _builder.append(" extends ");
-    String _name_1 = EditorModel.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append("<");
-    Dictionary _parentDictionary = ModelUtil.getParentDictionary(dictionaryEditor);
-    Entity _entity = _parentDictionary.getEntity();
-    String _voFullQualifiedName = this._dictionaryNameUtils.voFullQualifiedName(_entity);
-    _builder.append(_voFullQualifiedName, "");
-    _builder.append("> {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private class RootComposite extends ");
-    String _name_2 = CompositeModel.class.getName();
-    _builder.append(_name_2, "\t");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    EList<DictionaryContainerContent> _containercontents = dictionaryEditor.getContainercontents();
-    CharSequence _dictionaryClass = this._dictionaryContainerGenerator.dictionaryClass(_containercontents);
-    _builder.append(_dictionaryClass, "\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public RootComposite(");
-    String _name_3 = BaseModel.class.getName();
-    _builder.append(_name_3, "\t\t");
-    _builder.append("<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.append("super(\"");
-    _builder.append(ICompositeModel.ROOT_COMPOSITE_NAME, "\t\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    EList<DictionaryContainerContent> _containercontents_1 = dictionaryEditor.getContainercontents();
-    CharSequence _dictionaryContainerContentsConstructor = this._dictionaryContainerGenerator.dictionaryContainerContentsConstructor(_containercontents_1);
-    _builder.append(_dictionaryContainerContentsConstructor, "\t\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private RootComposite rootComposite = new RootComposite(this);");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryEditor);
-    _builder.append(_dictionaryClassName_1, "\t");
-    _builder.append("(");
-    String _name_4 = BaseModel.class.getName();
-    _builder.append(_name_4, "\t");
-    _builder.append("<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("super(\"");
-    String _name_5 = dictionaryEditor.getName();
-    _builder.append(_name_5, "\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    {
-      String _label = dictionaryEditor.getLabel();
-      boolean _notEquals = (!Objects.equal(_label, null));
-      if (_notEquals) {
-        _builder.append("\t\t");
-        _builder.append("setLabel(\"");
-        String _label_1 = dictionaryEditor.getLabel();
-        _builder.append(_label_1, "\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("setCompositeModel(rootComposite);");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    EList<DictionaryContainerContent> _containercontents_2 = dictionaryEditor.getContainercontents();
-    CharSequence _dictionaryContainerContentsConstants = this._dictionaryContainerGenerator.dictionaryContainerContentsConstants(_containercontents_2);
-    _builder.append(_dictionaryContainerContentsConstants, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryConstant(final DictionaryResult dictionaryResult) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryResult);
-    _builder.append(_dictionaryClassFullQualifiedName, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryResult);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryResult);
-    _builder.append(_dictionaryClassFullQualifiedName_1, "");
-    _builder.append("(this);");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryConstant(final DictionaryFilter dictionaryFilter) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryFilter);
-    _builder.append(_dictionaryClassFullQualifiedName, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryFilter);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryFilter);
-    _builder.append(_dictionaryClassFullQualifiedName_1, "");
-    _builder.append("(this);");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryClass(final Dictionary dictionary) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionary);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionary);
-    _builder.append(_dictionaryClassName, "");
-    _builder.append(" extends ");
-    String _name_1 = DictionaryModel.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("// label controls");
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _labelcontrols = dictionary.getLabelcontrols();
-      for(final DictionaryControl dictionaryControl : _labelcontrols) {
-        _builder.append("\t");
-        CharSequence _dictionaryConstant = this._dictionaryControls.dictionaryConstant(dictionaryControl);
-        _builder.append(_dictionaryConstant, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      DictionaryEditor _dictionaryeditor = dictionary.getDictionaryeditor();
-      boolean _notEquals = (!Objects.equal(_dictionaryeditor, null));
-      if (_notEquals) {
-        _builder.append("\t");
-        _builder.append("// dictionary editor");
-        _builder.newLine();
-        _builder.append("\t");
-        DictionaryEditor _dictionaryeditor_1 = dictionary.getDictionaryeditor();
-        CharSequence _dictionaryConstant_1 = this.dictionaryConstant(_dictionaryeditor_1);
-        _builder.append(_dictionaryConstant_1, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      DictionarySearch _dictionarysearch = dictionary.getDictionarysearch();
-      boolean _notEquals_1 = (!Objects.equal(_dictionarysearch, null));
-      if (_notEquals_1) {
-        _builder.append("\t");
-        _builder.append("// dictionary search");
-        _builder.newLine();
-        _builder.append("\t");
-        DictionarySearch _dictionarysearch_1 = dictionary.getDictionarysearch();
-        CharSequence _dictionaryConstant_2 = this.dictionaryConstant(_dictionarysearch_1);
-        _builder.append(_dictionaryConstant_2, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionary);
-    _builder.append(_dictionaryClassName_1, "\t");
-    _builder.append("() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("super(\"");
-    String _name_2 = dictionary.getName();
-    _builder.append(_name_2, "\t\t");
-    _builder.append("\", null);");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("setVoName(");
-    Entity _entity = dictionary.getEntity();
-    String _voFullQualifiedName = this._dictionaryNameUtils.voFullQualifiedName(_entity);
-    _builder.append(_voFullQualifiedName, "\t\t");
-    _builder.append(".class);");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("// label controls");
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _labelcontrols_1 = dictionary.getLabelcontrols();
-      for(final DictionaryControl labelcontrol : _labelcontrols_1) {
-        _builder.append("\t\t");
-        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(labelcontrol);
-        _builder.append(_dictionaryControlConstantSetters, "\t\t");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t\t");
-        _builder.append("this.getLabelControls().add(");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(labelcontrol);
-        _builder.append(_dictionaryConstantName, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    {
-      DictionaryEditor _dictionaryeditor_2 = dictionary.getDictionaryeditor();
-      boolean _notEquals_2 = (!Objects.equal(_dictionaryeditor_2, null));
-      if (_notEquals_2) {
-        _builder.append("\t\t");
-        _builder.append("// dictionary editor \'");
-        DictionaryEditor _dictionaryeditor_3 = dictionary.getDictionaryeditor();
-        String _name_3 = _dictionaryeditor_3.getName();
-        _builder.append(_name_3, "\t\t");
-        _builder.append("\'");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t\t");
-        _builder.append("setEditorModel(");
-        DictionaryEditor _dictionaryeditor_4 = dictionary.getDictionaryeditor();
-        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(_dictionaryeditor_4);
-        _builder.append(_dictionaryConstantName_1, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      DictionarySearch _dictionarysearch_2 = dictionary.getDictionarysearch();
-      boolean _notEquals_3 = (!Objects.equal(_dictionarysearch_2, null));
-      if (_notEquals_3) {
-        _builder.append("\t\t");
-        _builder.append("// dictionary search \'");
-        DictionarySearch _dictionarysearch_3 = dictionary.getDictionarysearch();
-        String _name_4 = _dictionarysearch_3.getName();
-        _builder.append(_name_4, "\t\t");
-        _builder.append("\'");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t\t");
-        _builder.append("setSearchModel(");
-        DictionarySearch _dictionarysearch_4 = dictionary.getDictionarysearch();
-        String _dictionaryConstantName_2 = this._dictionaryNameUtils.dictionaryConstantName(_dictionarysearch_4);
-        _builder.append(_dictionaryConstantName_2, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    {
-      String _label = dictionary.getLabel();
-      boolean _notEquals_4 = (!Objects.equal(_label, null));
-      if (_notEquals_4) {
-        _builder.append("\t\t");
-        _builder.append("setLabel(\"");
-        String _label_1 = dictionary.getLabel();
-        _builder.append(_label_1, "\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      String _pluralLabel = dictionary.getPluralLabel();
-      boolean _notEquals_5 = (!Objects.equal(_pluralLabel, null));
-      if (_notEquals_5) {
-        _builder.append("\t\t");
-        _builder.append("setPluralLabel(\"");
-        String _pluralLabel_1 = dictionary.getPluralLabel();
-        _builder.append(_pluralLabel_1, "\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  protected CharSequence _dictionaryConstant(final DictionarySearch dictionarySearch) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionarySearch);
-    _builder.append(_dictionaryClassFullQualifiedName, "");
-    _builder.append(" ");
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionarySearch);
-    _builder.append(_dictionaryConstantName, "");
-    _builder.append(" = new ");
-    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionarySearch);
-    _builder.append(_dictionaryClassFullQualifiedName_1, "");
-    _builder.append("(this);");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public void dictionaryFilterGenerator(final DictionaryFilter dictionaryFilter, final IFileSystemAccess fsa) {
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryFilter);
-    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryFilter);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-    EList<DictionaryContainerContent> _containercontents = dictionaryFilter.getContainercontents();
-    this._dictionaryContainerGenerator.dictionaryGenerator(_containercontents, fsa);
-  }
-  
-  public void dictionaryResultGenerator(final DictionaryResult dictionaryResult, final IFileSystemAccess fsa) {
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryResult);
-    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryResult);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-  }
-  
-  public void dictionaryGenerator(final DictionarySearch dictionarySearch, final IFileSystemAccess fsa) {
-    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionarySearch);
-    CharSequence _dictionaryClass = this.dictionaryClass(dictionarySearch);
-    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
-    DictionaryResult _dictionaryresult = dictionarySearch.getDictionaryresult();
-    this.dictionaryResultGenerator(_dictionaryresult, fsa);
-    EList<DictionaryFilter> _dictionaryfilters = dictionarySearch.getDictionaryfilters();
-    for (final DictionaryFilter dictionaryfilter : _dictionaryfilters) {
-      this.dictionaryFilterGenerator(dictionaryfilter, fsa);
-    }
-  }
-  
-  public CharSequence dictionaryClass(final DictionarySearch dictionarySearch) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionarySearch);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionarySearch);
-    _builder.append(_dictionaryClassName, "");
-    _builder.append(" extends ");
-    String _name_1 = SearchModel.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    DictionaryResult _dictionaryresult = dictionarySearch.getDictionaryresult();
-    CharSequence _dictionaryConstant = this.dictionaryConstant(_dictionaryresult);
-    _builder.append(_dictionaryConstant, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<DictionaryFilter> _dictionaryfilters = dictionarySearch.getDictionaryfilters();
-      for(final DictionaryFilter dictionaryFilter : _dictionaryfilters) {
-        _builder.append("\t");
-        CharSequence _dictionaryConstant_1 = this.dictionaryConstant(dictionaryFilter);
-        _builder.append(_dictionaryConstant_1, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionarySearch);
-    _builder.append(_dictionaryClassName_1, "\t");
-    _builder.append("(");
-    String _name_2 = BaseModel.class.getName();
-    _builder.append(_name_2, "\t");
-    _builder.append("<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("super(\"");
-    String _name_3 = dictionarySearch.getName();
-    _builder.append(_name_3, "\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.newLine();
-    {
-      String _label = dictionarySearch.getLabel();
-      boolean _notEquals = (!Objects.equal(_label, null));
-      if (_notEquals) {
-        _builder.append("\t\t");
-        _builder.append("setLabel(\"");
-        String _label_1 = dictionarySearch.getLabel();
-        _builder.append(_label_1, "\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("// result");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("setResultModel(");
-    DictionaryResult _dictionaryresult_1 = dictionarySearch.getDictionaryresult();
-    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(_dictionaryresult_1);
-    _builder.append(_dictionaryConstantName, "\t\t");
-    _builder.append(");");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("// filters");
-    _builder.newLine();
-    {
-      EList<DictionaryFilter> _dictionaryfilters_1 = dictionarySearch.getDictionaryfilters();
-      for(final DictionaryFilter dictionaryfilter : _dictionaryfilters_1) {
-        _builder.append("\t\t");
-        _builder.append("getFilterModels().add(");
-        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryfilter);
-        _builder.append(_dictionaryConstantName_1, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryClass(final DictionaryResult dictionaryResult) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryResult);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryResult);
-    _builder.append(_dictionaryClassName, "");
-    _builder.append(" extends ");
-    String _name_1 = ResultModel.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _resultcolumns = dictionaryResult.getResultcolumns();
-      for(final DictionaryControl dictionaryControl : _resultcolumns) {
-        _builder.append("\t");
-        CharSequence _dictionaryConstant = this._dictionaryControls.dictionaryConstant(dictionaryControl);
-        _builder.append(_dictionaryConstant, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryResult);
-    _builder.append(_dictionaryClassName_1, "\t");
-    _builder.append("(");
-    String _name_2 = BaseModel.class.getName();
-    _builder.append(_name_2, "\t");
-    _builder.append("<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("super(\"");
-    String _name_3 = dictionaryResult.getName();
-    _builder.append(_name_3, "\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _resultcolumns_1 = dictionaryResult.getResultcolumns();
-      for(final DictionaryControl dictionaryControl_1 : _resultcolumns_1) {
-        _builder.append("\t\t");
-        _builder.append("this.getControls().add(");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl_1);
-        _builder.append(_dictionaryConstantName, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    {
-      EList<DictionaryControl> _resultcolumns_2 = dictionaryResult.getResultcolumns();
-      for(final DictionaryControl dictionaryControl_2 : _resultcolumns_2) {
-        _builder.append("\t\t");
-        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(dictionaryControl_2);
-        _builder.append(_dictionaryControlConstantSetters, "\t\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryClass(final DictionaryFilter dictionaryFilter) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryFilter);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("@");
-    String _name = SuppressWarnings.class.getName();
-    _builder.append(_name, "");
-    _builder.append("(\"all\")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("public class ");
-    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryFilter);
-    _builder.append(_dictionaryClassName, "");
-    _builder.append(" extends ");
-    String _name_1 = FilterModel.class.getName();
-    _builder.append(_name_1, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private class RootComposite extends ");
-    String _name_2 = CompositeModel.class.getName();
-    _builder.append(_name_2, "\t");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    EList<DictionaryContainerContent> _containercontents = dictionaryFilter.getContainercontents();
-    CharSequence _dictionaryClass = this._dictionaryContainerGenerator.dictionaryClass(_containercontents);
-    _builder.append(_dictionaryClass, "\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public RootComposite(");
-    String _name_3 = BaseModel.class.getName();
-    _builder.append(_name_3, "\t\t");
-    _builder.append("<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.append("super(\"");
-    _builder.append(ICompositeModel.ROOT_COMPOSITE_NAME, "\t\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    EList<DictionaryContainerContent> _containercontents_1 = dictionaryFilter.getContainercontents();
-    CharSequence _dictionaryContainerContentsConstructor = this._dictionaryContainerGenerator.dictionaryContainerContentsConstructor(_containercontents_1);
-    _builder.append(_dictionaryContainerContentsConstructor, "\t\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private RootComposite rootComposite = new RootComposite(this);");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryFilter);
-    _builder.append(_dictionaryClassName_1, "\t");
-    _builder.append("(");
-    String _name_4 = BaseModel.class.getName();
-    _builder.append(_name_4, "\t");
-    _builder.append("<?> parent) {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("super(\"");
-    String _name_5 = dictionaryFilter.getName();
-    _builder.append(_name_5, "\t\t");
-    _builder.append("\", parent);");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("setCompositeModel(rootComposite);");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    EList<DictionaryContainerContent> _containercontents_2 = dictionaryFilter.getContainercontents();
-    CharSequence _dictionaryContainerContentsConstants = this._dictionaryContainerGenerator.dictionaryContainerContentsConstants(_containercontents_2);
-    _builder.append(_dictionaryContainerContentsConstants, "\t");
-    _builder.newLineIfNotEmpty();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryConstant(final EObject dictionary) {
-    if (dictionary instanceof Dictionary) {
-      return _dictionaryConstant((Dictionary)dictionary);
-    } else if (dictionary instanceof DictionaryEditor) {
-      return _dictionaryConstant((DictionaryEditor)dictionary);
-    } else if (dictionary instanceof DictionaryFilter) {
-      return _dictionaryConstant((DictionaryFilter)dictionary);
-    } else if (dictionary instanceof DictionaryResult) {
-      return _dictionaryConstant((DictionaryResult)dictionary);
-    } else if (dictionary instanceof DictionarySearch) {
-      return _dictionaryConstant((DictionarySearch)dictionary);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(dictionary).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.client.dictionary;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.modules.dictionary.model.BaseModel;
+import io.pelle.mango.client.base.modules.dictionary.model.DictionaryModel;
+import io.pelle.mango.client.base.modules.dictionary.model.containers.CompositeModel;
+import io.pelle.mango.client.base.modules.dictionary.model.containers.ICompositeModel;
+import io.pelle.mango.client.base.modules.dictionary.model.editor.EditorModel;
+import io.pelle.mango.client.base.modules.dictionary.model.search.FilterModel;
+import io.pelle.mango.client.base.modules.dictionary.model.search.ResultModel;
+import io.pelle.mango.client.base.modules.dictionary.model.search.SearchModel;
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryContainerGenerator;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryControls;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.DictionaryContainerContent;
+import io.pelle.mango.dsl.mango.DictionaryControl;
+import io.pelle.mango.dsl.mango.DictionaryEditor;
+import io.pelle.mango.dsl.mango.DictionaryFilter;
+import io.pelle.mango.dsl.mango.DictionaryResult;
+import io.pelle.mango.dsl.mango.DictionarySearch;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.Model;
+import java.util.Arrays;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.generator.IFileSystemAccess;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class DictionaryGenerator {
+  @Inject
+  @Extension
+  private DictionaryNameUtils _dictionaryNameUtils;
+  
+  @Inject
+  @Extension
+  private DictionaryControls _dictionaryControls;
+  
+  @Inject
+  @Extension
+  private DictionaryContainerGenerator _dictionaryContainerGenerator;
+  
+  protected CharSequence _dictionaryConstant(final DictionaryEditor dictionaryEditor) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryEditor);
+    _builder.append(_dictionaryClassFullQualifiedName, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryEditor);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryEditor);
+    _builder.append(_dictionaryClassFullQualifiedName_1, "");
+    _builder.append("(this);");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryConstant(final Dictionary dictionary) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public static final ");
+    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionary);
+    _builder.append(_dictionaryClassFullQualifiedName, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionary);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionary);
+    _builder.append(_dictionaryClassFullQualifiedName_1, "");
+    _builder.append("();");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public void dictionaryGenerator(final Model model, final IFileSystemAccess fsa) {
+    TreeIterator<EObject> _eAllContents = model.eAllContents();
+    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+    Iterable<Dictionary> _filter = Iterables.<Dictionary>filter(_iterable, Dictionary.class);
+    for (final Dictionary dictionary : _filter) {
+      this.dictionaryGenerator(dictionary, fsa);
+    }
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(model);
+    CharSequence _dictionaryClass = this.dictionaryClass(model);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+  }
+  
+  public CharSequence dictionaryClass(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("package ");
+    String _modelPackageName = this._dictionaryNameUtils.modelPackageName(model);
+    _builder.append(_modelPackageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(model);
+    _builder.append(_dictionaryClassName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(model);
+    _builder.append(_dictionaryClassName_1, "\t");
+    _builder.append("() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<Dictionary> _filter = Iterables.<Dictionary>filter(_iterable, Dictionary.class);
+      for(final Dictionary dictionary : _filter) {
+        _builder.append("\t");
+        CharSequence _dictionaryConstant = this.dictionaryConstant(dictionary);
+        _builder.append(_dictionaryConstant, "\t");
+        _builder.append(";");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public void dictionaryGenerator(final Dictionary dictionary, final IFileSystemAccess fsa) {
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionary);
+    CharSequence _dictionaryClass = this.dictionaryClass(dictionary);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+    EList<DictionaryControl> _labelcontrols = dictionary.getLabelcontrols();
+    for (final DictionaryControl dictionaryLabelControl : _labelcontrols) {
+      String _dictionaryClassFullQualifiedFileName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryLabelControl);
+      CharSequence _dictionaryControlClass = this._dictionaryControls.dictionaryControlClass(dictionaryLabelControl);
+      fsa.generateFile(_dictionaryClassFullQualifiedFileName_1, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryControlClass);
+    }
+    DictionaryEditor _dictionaryeditor = dictionary.getDictionaryeditor();
+    boolean _notEquals = (!Objects.equal(_dictionaryeditor, null));
+    if (_notEquals) {
+      DictionaryEditor _dictionaryeditor_1 = dictionary.getDictionaryeditor();
+      this.dictionaryGenerator(_dictionaryeditor_1, fsa);
+    }
+    DictionarySearch _dictionarysearch = dictionary.getDictionarysearch();
+    boolean _notEquals_1 = (!Objects.equal(_dictionarysearch, null));
+    if (_notEquals_1) {
+      DictionarySearch _dictionarysearch_1 = dictionary.getDictionarysearch();
+      this.dictionaryGenerator(_dictionarysearch_1, fsa);
+    }
+  }
+  
+  public void dictionaryGenerator(final DictionaryEditor dictionaryEditor, final IFileSystemAccess fsa) {
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryEditor);
+    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryEditor);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+    EList<DictionaryContainerContent> _containercontents = dictionaryEditor.getContainercontents();
+    this._dictionaryContainerGenerator.dictionaryGenerator(_containercontents, fsa);
+  }
+  
+  public CharSequence dictionaryClass(final DictionaryEditor dictionaryEditor) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryEditor);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryEditor);
+    _builder.append(_dictionaryClassName, "");
+    _builder.append(" extends ");
+    String _name_1 = EditorModel.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append("<");
+    Dictionary _parentDictionary = ModelUtil.getParentDictionary(dictionaryEditor);
+    Entity _entity = _parentDictionary.getEntity();
+    String _voFullQualifiedName = this._dictionaryNameUtils.voFullQualifiedName(_entity);
+    _builder.append(_voFullQualifiedName, "");
+    _builder.append("> {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private class RootComposite extends ");
+    String _name_2 = CompositeModel.class.getName();
+    _builder.append(_name_2, "\t");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    EList<DictionaryContainerContent> _containercontents = dictionaryEditor.getContainercontents();
+    CharSequence _dictionaryClass = this._dictionaryContainerGenerator.dictionaryClass(_containercontents);
+    _builder.append(_dictionaryClass, "\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public RootComposite(");
+    String _name_3 = BaseModel.class.getName();
+    _builder.append(_name_3, "\t\t");
+    _builder.append("<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.append("super(\"");
+    _builder.append(ICompositeModel.ROOT_COMPOSITE_NAME, "\t\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    EList<DictionaryContainerContent> _containercontents_1 = dictionaryEditor.getContainercontents();
+    CharSequence _dictionaryContainerContentsConstructor = this._dictionaryContainerGenerator.dictionaryContainerContentsConstructor(_containercontents_1);
+    _builder.append(_dictionaryContainerContentsConstructor, "\t\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private RootComposite rootComposite = new RootComposite(this);");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryEditor);
+    _builder.append(_dictionaryClassName_1, "\t");
+    _builder.append("(");
+    String _name_4 = BaseModel.class.getName();
+    _builder.append(_name_4, "\t");
+    _builder.append("<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("super(\"");
+    String _name_5 = dictionaryEditor.getName();
+    _builder.append(_name_5, "\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    {
+      String _label = dictionaryEditor.getLabel();
+      boolean _notEquals = (!Objects.equal(_label, null));
+      if (_notEquals) {
+        _builder.append("\t\t");
+        _builder.append("setLabel(\"");
+        String _label_1 = dictionaryEditor.getLabel();
+        _builder.append(_label_1, "\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("setCompositeModel(rootComposite);");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    EList<DictionaryContainerContent> _containercontents_2 = dictionaryEditor.getContainercontents();
+    CharSequence _dictionaryContainerContentsConstants = this._dictionaryContainerGenerator.dictionaryContainerContentsConstants(_containercontents_2);
+    _builder.append(_dictionaryContainerContentsConstants, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryConstant(final DictionaryResult dictionaryResult) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryResult);
+    _builder.append(_dictionaryClassFullQualifiedName, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryResult);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryResult);
+    _builder.append(_dictionaryClassFullQualifiedName_1, "");
+    _builder.append("(this);");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryConstant(final DictionaryFilter dictionaryFilter) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryFilter);
+    _builder.append(_dictionaryClassFullQualifiedName, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryFilter);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionaryFilter);
+    _builder.append(_dictionaryClassFullQualifiedName_1, "");
+    _builder.append("(this);");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryClass(final Dictionary dictionary) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionary);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionary);
+    _builder.append(_dictionaryClassName, "");
+    _builder.append(" extends ");
+    String _name_1 = DictionaryModel.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("// label controls");
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _labelcontrols = dictionary.getLabelcontrols();
+      for(final DictionaryControl dictionaryControl : _labelcontrols) {
+        _builder.append("\t");
+        CharSequence _dictionaryConstant = this._dictionaryControls.dictionaryConstant(dictionaryControl);
+        _builder.append(_dictionaryConstant, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      DictionaryEditor _dictionaryeditor = dictionary.getDictionaryeditor();
+      boolean _notEquals = (!Objects.equal(_dictionaryeditor, null));
+      if (_notEquals) {
+        _builder.append("\t");
+        _builder.append("// dictionary editor");
+        _builder.newLine();
+        _builder.append("\t");
+        DictionaryEditor _dictionaryeditor_1 = dictionary.getDictionaryeditor();
+        CharSequence _dictionaryConstant_1 = this.dictionaryConstant(_dictionaryeditor_1);
+        _builder.append(_dictionaryConstant_1, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      DictionarySearch _dictionarysearch = dictionary.getDictionarysearch();
+      boolean _notEquals_1 = (!Objects.equal(_dictionarysearch, null));
+      if (_notEquals_1) {
+        _builder.append("\t");
+        _builder.append("// dictionary search");
+        _builder.newLine();
+        _builder.append("\t");
+        DictionarySearch _dictionarysearch_1 = dictionary.getDictionarysearch();
+        CharSequence _dictionaryConstant_2 = this.dictionaryConstant(_dictionarysearch_1);
+        _builder.append(_dictionaryConstant_2, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionary);
+    _builder.append(_dictionaryClassName_1, "\t");
+    _builder.append("() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("super(\"");
+    String _name_2 = dictionary.getName();
+    _builder.append(_name_2, "\t\t");
+    _builder.append("\", null);");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("setVoName(");
+    Entity _entity = dictionary.getEntity();
+    String _voFullQualifiedName = this._dictionaryNameUtils.voFullQualifiedName(_entity);
+    _builder.append(_voFullQualifiedName, "\t\t");
+    _builder.append(".class);");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("// label controls");
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _labelcontrols_1 = dictionary.getLabelcontrols();
+      for(final DictionaryControl labelcontrol : _labelcontrols_1) {
+        _builder.append("\t\t");
+        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(labelcontrol);
+        _builder.append(_dictionaryControlConstantSetters, "\t\t");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t\t");
+        _builder.append("this.getLabelControls().add(");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(labelcontrol);
+        _builder.append(_dictionaryConstantName, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    {
+      DictionaryEditor _dictionaryeditor_2 = dictionary.getDictionaryeditor();
+      boolean _notEquals_2 = (!Objects.equal(_dictionaryeditor_2, null));
+      if (_notEquals_2) {
+        _builder.append("\t\t");
+        _builder.append("// dictionary editor \'");
+        DictionaryEditor _dictionaryeditor_3 = dictionary.getDictionaryeditor();
+        String _name_3 = _dictionaryeditor_3.getName();
+        _builder.append(_name_3, "\t\t");
+        _builder.append("\'");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t\t");
+        _builder.append("setEditorModel(");
+        DictionaryEditor _dictionaryeditor_4 = dictionary.getDictionaryeditor();
+        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(_dictionaryeditor_4);
+        _builder.append(_dictionaryConstantName_1, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      DictionarySearch _dictionarysearch_2 = dictionary.getDictionarysearch();
+      boolean _notEquals_3 = (!Objects.equal(_dictionarysearch_2, null));
+      if (_notEquals_3) {
+        _builder.append("\t\t");
+        _builder.append("// dictionary search \'");
+        DictionarySearch _dictionarysearch_3 = dictionary.getDictionarysearch();
+        String _name_4 = _dictionarysearch_3.getName();
+        _builder.append(_name_4, "\t\t");
+        _builder.append("\'");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t\t");
+        _builder.append("setSearchModel(");
+        DictionarySearch _dictionarysearch_4 = dictionary.getDictionarysearch();
+        String _dictionaryConstantName_2 = this._dictionaryNameUtils.dictionaryConstantName(_dictionarysearch_4);
+        _builder.append(_dictionaryConstantName_2, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    {
+      String _label = dictionary.getLabel();
+      boolean _notEquals_4 = (!Objects.equal(_label, null));
+      if (_notEquals_4) {
+        _builder.append("\t\t");
+        _builder.append("setLabel(\"");
+        String _label_1 = dictionary.getLabel();
+        _builder.append(_label_1, "\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      String _pluralLabel = dictionary.getPluralLabel();
+      boolean _notEquals_5 = (!Objects.equal(_pluralLabel, null));
+      if (_notEquals_5) {
+        _builder.append("\t\t");
+        _builder.append("setPluralLabel(\"");
+        String _pluralLabel_1 = dictionary.getPluralLabel();
+        _builder.append(_pluralLabel_1, "\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  protected CharSequence _dictionaryConstant(final DictionarySearch dictionarySearch) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionarySearch);
+    _builder.append(_dictionaryClassFullQualifiedName, "");
+    _builder.append(" ");
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionarySearch);
+    _builder.append(_dictionaryConstantName, "");
+    _builder.append(" = new ");
+    String _dictionaryClassFullQualifiedName_1 = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(dictionarySearch);
+    _builder.append(_dictionaryClassFullQualifiedName_1, "");
+    _builder.append("(this);");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public void dictionaryFilterGenerator(final DictionaryFilter dictionaryFilter, final IFileSystemAccess fsa) {
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryFilter);
+    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryFilter);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+    EList<DictionaryContainerContent> _containercontents = dictionaryFilter.getContainercontents();
+    this._dictionaryContainerGenerator.dictionaryGenerator(_containercontents, fsa);
+  }
+  
+  public void dictionaryResultGenerator(final DictionaryResult dictionaryResult, final IFileSystemAccess fsa) {
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionaryResult);
+    CharSequence _dictionaryClass = this.dictionaryClass(dictionaryResult);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+  }
+  
+  public void dictionaryGenerator(final DictionarySearch dictionarySearch, final IFileSystemAccess fsa) {
+    String _dictionaryClassFullQualifiedFileName = this._dictionaryNameUtils.dictionaryClassFullQualifiedFileName(dictionarySearch);
+    CharSequence _dictionaryClass = this.dictionaryClass(dictionarySearch);
+    fsa.generateFile(_dictionaryClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryClass);
+    DictionaryResult _dictionaryresult = dictionarySearch.getDictionaryresult();
+    this.dictionaryResultGenerator(_dictionaryresult, fsa);
+    EList<DictionaryFilter> _dictionaryfilters = dictionarySearch.getDictionaryfilters();
+    for (final DictionaryFilter dictionaryfilter : _dictionaryfilters) {
+      this.dictionaryFilterGenerator(dictionaryfilter, fsa);
+    }
+  }
+  
+  public CharSequence dictionaryClass(final DictionarySearch dictionarySearch) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionarySearch);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionarySearch);
+    _builder.append(_dictionaryClassName, "");
+    _builder.append(" extends ");
+    String _name_1 = SearchModel.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    DictionaryResult _dictionaryresult = dictionarySearch.getDictionaryresult();
+    CharSequence _dictionaryConstant = this.dictionaryConstant(_dictionaryresult);
+    _builder.append(_dictionaryConstant, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<DictionaryFilter> _dictionaryfilters = dictionarySearch.getDictionaryfilters();
+      for(final DictionaryFilter dictionaryFilter : _dictionaryfilters) {
+        _builder.append("\t");
+        CharSequence _dictionaryConstant_1 = this.dictionaryConstant(dictionaryFilter);
+        _builder.append(_dictionaryConstant_1, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionarySearch);
+    _builder.append(_dictionaryClassName_1, "\t");
+    _builder.append("(");
+    String _name_2 = BaseModel.class.getName();
+    _builder.append(_name_2, "\t");
+    _builder.append("<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("super(\"");
+    String _name_3 = dictionarySearch.getName();
+    _builder.append(_name_3, "\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.newLine();
+    {
+      String _label = dictionarySearch.getLabel();
+      boolean _notEquals = (!Objects.equal(_label, null));
+      if (_notEquals) {
+        _builder.append("\t\t");
+        _builder.append("setLabel(\"");
+        String _label_1 = dictionarySearch.getLabel();
+        _builder.append(_label_1, "\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("// result");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("setResultModel(");
+    DictionaryResult _dictionaryresult_1 = dictionarySearch.getDictionaryresult();
+    String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(_dictionaryresult_1);
+    _builder.append(_dictionaryConstantName, "\t\t");
+    _builder.append(");");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("// filters");
+    _builder.newLine();
+    {
+      EList<DictionaryFilter> _dictionaryfilters_1 = dictionarySearch.getDictionaryfilters();
+      for(final DictionaryFilter dictionaryfilter : _dictionaryfilters_1) {
+        _builder.append("\t\t");
+        _builder.append("getFilterModels().add(");
+        String _dictionaryConstantName_1 = this._dictionaryNameUtils.dictionaryConstantName(dictionaryfilter);
+        _builder.append(_dictionaryConstantName_1, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryClass(final DictionaryResult dictionaryResult) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryResult);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryResult);
+    _builder.append(_dictionaryClassName, "");
+    _builder.append(" extends ");
+    String _name_1 = ResultModel.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _resultcolumns = dictionaryResult.getResultcolumns();
+      for(final DictionaryControl dictionaryControl : _resultcolumns) {
+        _builder.append("\t");
+        CharSequence _dictionaryConstant = this._dictionaryControls.dictionaryConstant(dictionaryControl);
+        _builder.append(_dictionaryConstant, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryResult);
+    _builder.append(_dictionaryClassName_1, "\t");
+    _builder.append("(");
+    String _name_2 = BaseModel.class.getName();
+    _builder.append(_name_2, "\t");
+    _builder.append("<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("super(\"");
+    String _name_3 = dictionaryResult.getName();
+    _builder.append(_name_3, "\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _resultcolumns_1 = dictionaryResult.getResultcolumns();
+      for(final DictionaryControl dictionaryControl_1 : _resultcolumns_1) {
+        _builder.append("\t\t");
+        _builder.append("this.getControls().add(");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionaryControl_1);
+        _builder.append(_dictionaryConstantName, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    {
+      EList<DictionaryControl> _resultcolumns_2 = dictionaryResult.getResultcolumns();
+      for(final DictionaryControl dictionaryControl_2 : _resultcolumns_2) {
+        _builder.append("\t\t");
+        Object _dictionaryControlConstantSetters = this._dictionaryControls.dictionaryControlConstantSetters(dictionaryControl_2);
+        _builder.append(_dictionaryControlConstantSetters, "\t\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryClass(final DictionaryFilter dictionaryFilter) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(dictionaryFilter);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("@");
+    String _name = SuppressWarnings.class.getName();
+    _builder.append(_name, "");
+    _builder.append("(\"all\")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("public class ");
+    String _dictionaryClassName = this._dictionaryNameUtils.dictionaryClassName(dictionaryFilter);
+    _builder.append(_dictionaryClassName, "");
+    _builder.append(" extends ");
+    String _name_1 = FilterModel.class.getName();
+    _builder.append(_name_1, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private class RootComposite extends ");
+    String _name_2 = CompositeModel.class.getName();
+    _builder.append(_name_2, "\t");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    EList<DictionaryContainerContent> _containercontents = dictionaryFilter.getContainercontents();
+    CharSequence _dictionaryClass = this._dictionaryContainerGenerator.dictionaryClass(_containercontents);
+    _builder.append(_dictionaryClass, "\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public RootComposite(");
+    String _name_3 = BaseModel.class.getName();
+    _builder.append(_name_3, "\t\t");
+    _builder.append("<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.append("super(\"");
+    _builder.append(ICompositeModel.ROOT_COMPOSITE_NAME, "\t\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    EList<DictionaryContainerContent> _containercontents_1 = dictionaryFilter.getContainercontents();
+    CharSequence _dictionaryContainerContentsConstructor = this._dictionaryContainerGenerator.dictionaryContainerContentsConstructor(_containercontents_1);
+    _builder.append(_dictionaryContainerContentsConstructor, "\t\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private RootComposite rootComposite = new RootComposite(this);");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _dictionaryClassName_1 = this._dictionaryNameUtils.dictionaryClassName(dictionaryFilter);
+    _builder.append(_dictionaryClassName_1, "\t");
+    _builder.append("(");
+    String _name_4 = BaseModel.class.getName();
+    _builder.append(_name_4, "\t");
+    _builder.append("<?> parent) {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("super(\"");
+    String _name_5 = dictionaryFilter.getName();
+    _builder.append(_name_5, "\t\t");
+    _builder.append("\", parent);");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("setCompositeModel(rootComposite);");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    EList<DictionaryContainerContent> _containercontents_2 = dictionaryFilter.getContainercontents();
+    CharSequence _dictionaryContainerContentsConstants = this._dictionaryContainerGenerator.dictionaryContainerContentsConstants(_containercontents_2);
+    _builder.append(_dictionaryContainerContentsConstants, "\t");
+    _builder.newLineIfNotEmpty();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryConstant(final EObject dictionary) {
+    if (dictionary instanceof Dictionary) {
+      return _dictionaryConstant((Dictionary)dictionary);
+    } else if (dictionary instanceof DictionaryEditor) {
+      return _dictionaryConstant((DictionaryEditor)dictionary);
+    } else if (dictionary instanceof DictionaryFilter) {
+      return _dictionaryConstant((DictionaryFilter)dictionary);
+    } else if (dictionary instanceof DictionaryResult) {
+      return _dictionaryConstant((DictionaryResult)dictionary);
+    } else if (dictionary instanceof DictionarySearch) {
+      return _dictionaryConstant((DictionarySearch)dictionary);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(dictionary).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNameUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNameUtils.java
index c17dc79..2eb66a0 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNameUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNameUtils.java
@@ -1,257 +1,257 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.client.dictionary;
-
-import com.google.common.base.CaseFormat;
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.DictionaryContainer;
-import io.pelle.mango.dsl.mango.DictionaryControl;
-import io.pelle.mango.dsl.mango.DictionaryEditor;
-import io.pelle.mango.dsl.mango.DictionaryFilter;
-import io.pelle.mango.dsl.mango.DictionaryResult;
-import io.pelle.mango.dsl.mango.DictionarySearch;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.NavigationNode;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-/**
- * Generates code from your model files on save.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
- */
-@SuppressWarnings("all")
-public class DictionaryNameUtils extends ClientNameUtils {
-  public String camelCaseToUnderScore(final String camelCase) {
-    return CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, camelCase);
-  }
-  
-  public String constantName(final String constant) {
-    String _camelCaseToUnderScore = this.camelCaseToUnderScore(constant);
-    return _camelCaseToUnderScore.toUpperCase();
-  }
-  
-  public String dictionaryClassName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "DictionaryModel");
-  }
-  
-  public String dictionaryClassFullQualifiedName(final Model model) {
-    String _modelPackageName = this.modelPackageName(model);
-    String _plus = (_modelPackageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(model);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final Model model) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(model);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryClassName(final Dictionary dictionary) {
-    String _name = dictionary.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String dictionaryClassFullQualifiedName(final Dictionary dictionary) {
-    String _packageName = this.getPackageName(dictionary);
-    String _plus = (_packageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(dictionary);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final Dictionary dictionary) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionary);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryConstantName(final Dictionary dictionary) {
-    String _name = dictionary.getName();
-    return this.constantName(_name);
-  }
-  
-  public String navigationNodeClassName(final NavigationNode navigationNode) {
-    String _name = navigationNode.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String navigationyNodeClassFullQualifiedName(final NavigationNode navigationNode) {
-    String _packageName = this.getPackageName(navigationNode);
-    String _plus = (_packageName + ".");
-    String _navigationNodeClassName = this.navigationNodeClassName(navigationNode);
-    return (_plus + _navigationNodeClassName);
-  }
-  
-  public String navigationNodeClassFullQualifiedFileName(final NavigationNode navigationNode) {
-    String _navigationyNodeClassFullQualifiedName = this.navigationyNodeClassFullQualifiedName(navigationNode);
-    String _replaceAll = _navigationyNodeClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String navigationNodeConstantName(final NavigationNode navigationNode) {
-    String _name = navigationNode.getName();
-    return this.constantName(_name);
-  }
-  
-  public String navigationNodeClassName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "NavigationModel");
-  }
-  
-  public String navigationyNodeClassFullQualifiedName(final Model model) {
-    String _modelPackageName = this.modelPackageName(model);
-    String _plus = (_modelPackageName + ".");
-    String _navigationNodeClassName = this.navigationNodeClassName(model);
-    return (_plus + _navigationNodeClassName);
-  }
-  
-  public String navigationNodeClassFullQualifiedFileName(final Model model) {
-    String _navigationyNodeClassFullQualifiedName = this.navigationyNodeClassFullQualifiedName(model);
-    String _replaceAll = _navigationyNodeClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryClassName(final DictionaryEditor dictionaryEditor) {
-    String _name = dictionaryEditor.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String dictionaryClassFullQualifiedName(final DictionaryEditor dictionaryEditor) {
-    String _packageName = this.getPackageName(dictionaryEditor);
-    String _plus = (_packageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(dictionaryEditor);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final DictionaryEditor dictionaryEditor) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryEditor);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryConstantName(final DictionaryEditor dictionaryEditor) {
-    String _name = dictionaryEditor.getName();
-    return this.constantName(_name);
-  }
-  
-  public String dictionaryClassName(final DictionarySearch dictionarySearch) {
-    String _name = dictionarySearch.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String dictionaryClassFullQualifiedName(final DictionarySearch dictionarySearch) {
-    String _packageName = this.getPackageName(dictionarySearch);
-    String _plus = (_packageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(dictionarySearch);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final DictionarySearch dictionarySearch) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionarySearch);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryConstantName(final DictionarySearch dictionarySearch) {
-    String _name = dictionarySearch.getName();
-    return this.constantName(_name);
-  }
-  
-  public String dictionaryClassName(final DictionaryFilter dictionaryFilter) {
-    String _name = dictionaryFilter.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String dictionaryClassFullQualifiedName(final DictionaryFilter dictionaryFilter) {
-    String _packageName = this.getPackageName(dictionaryFilter);
-    String _plus = (_packageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(dictionaryFilter);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final DictionaryFilter dictionaryFilter) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryFilter);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryConstantName(final DictionaryFilter dictionaryFilter) {
-    String _name = dictionaryFilter.getName();
-    return this.constantName(_name);
-  }
-  
-  public String dictionaryClassName(final DictionaryResult dictionaryResult) {
-    String _name = dictionaryResult.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String dictionaryClassFullQualifiedName(final DictionaryResult dictionaryResult) {
-    String _packageName = this.getPackageName(dictionaryResult);
-    String _plus = (_packageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(dictionaryResult);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final DictionaryResult dictionaryResult) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryResult);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryConstantName(final DictionaryResult dictionaryResult) {
-    String _name = dictionaryResult.getName();
-    return this.constantName(_name);
-  }
-  
-  public String dictionaryClassName(final DictionaryControl dictionaryControl) {
-    String _name = dictionaryControl.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String dictionaryClassFullQualifiedName(final DictionaryControl dictionaryControl) {
-    String _packageName = this.getPackageName(dictionaryControl);
-    String _plus = (_packageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(dictionaryControl);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final DictionaryControl dictionaryControl) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryControl);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryConstantName(final DictionaryControl dictionaryControl) {
-    String _controlName = ModelUtil.getControlName(dictionaryControl);
-    return this.constantName(_controlName);
-  }
-  
-  public String dictionaryClassName(final DictionaryContainer dictionaryContainer) {
-    String _name = dictionaryContainer.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String dictionaryClassFullQualifiedName(final DictionaryContainer dictionaryContainer) {
-    String _packageName = this.getPackageName(dictionaryContainer);
-    String _plus = (_packageName + ".");
-    String _dictionaryClassName = this.dictionaryClassName(dictionaryContainer);
-    return (_plus + _dictionaryClassName);
-  }
-  
-  public String dictionaryClassFullQualifiedFileName(final DictionaryContainer dictionaryContainer) {
-    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryContainer);
-    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String dictionaryConstantName(final DictionaryContainer dictionaryContainer) {
-    String _name = dictionaryContainer.getName();
-    return this.constantName(_name);
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.client.dictionary;
+
+import com.google.common.base.CaseFormat;
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.DictionaryContainer;
+import io.pelle.mango.dsl.mango.DictionaryControl;
+import io.pelle.mango.dsl.mango.DictionaryEditor;
+import io.pelle.mango.dsl.mango.DictionaryFilter;
+import io.pelle.mango.dsl.mango.DictionaryResult;
+import io.pelle.mango.dsl.mango.DictionarySearch;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.NavigationNode;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+/**
+ * Generates code from your model files on save.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
+ */
+@SuppressWarnings("all")
+public class DictionaryNameUtils extends ClientNameUtils {
+  public String camelCaseToUnderScore(final String camelCase) {
+    return CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, camelCase);
+  }
+  
+  public String constantName(final String constant) {
+    String _camelCaseToUnderScore = this.camelCaseToUnderScore(constant);
+    return _camelCaseToUnderScore.toUpperCase();
+  }
+  
+  public String dictionaryClassName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "DictionaryModel");
+  }
+  
+  public String dictionaryClassFullQualifiedName(final Model model) {
+    String _modelPackageName = this.modelPackageName(model);
+    String _plus = (_modelPackageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(model);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final Model model) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(model);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryClassName(final Dictionary dictionary) {
+    String _name = dictionary.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String dictionaryClassFullQualifiedName(final Dictionary dictionary) {
+    String _packageName = this.getPackageName(dictionary);
+    String _plus = (_packageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(dictionary);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final Dictionary dictionary) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionary);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryConstantName(final Dictionary dictionary) {
+    String _name = dictionary.getName();
+    return this.constantName(_name);
+  }
+  
+  public String navigationNodeClassName(final NavigationNode navigationNode) {
+    String _name = navigationNode.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String navigationyNodeClassFullQualifiedName(final NavigationNode navigationNode) {
+    String _packageName = this.getPackageName(navigationNode);
+    String _plus = (_packageName + ".");
+    String _navigationNodeClassName = this.navigationNodeClassName(navigationNode);
+    return (_plus + _navigationNodeClassName);
+  }
+  
+  public String navigationNodeClassFullQualifiedFileName(final NavigationNode navigationNode) {
+    String _navigationyNodeClassFullQualifiedName = this.navigationyNodeClassFullQualifiedName(navigationNode);
+    String _replaceAll = _navigationyNodeClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String navigationNodeConstantName(final NavigationNode navigationNode) {
+    String _name = navigationNode.getName();
+    return this.constantName(_name);
+  }
+  
+  public String navigationNodeClassName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "NavigationModel");
+  }
+  
+  public String navigationyNodeClassFullQualifiedName(final Model model) {
+    String _modelPackageName = this.modelPackageName(model);
+    String _plus = (_modelPackageName + ".");
+    String _navigationNodeClassName = this.navigationNodeClassName(model);
+    return (_plus + _navigationNodeClassName);
+  }
+  
+  public String navigationNodeClassFullQualifiedFileName(final Model model) {
+    String _navigationyNodeClassFullQualifiedName = this.navigationyNodeClassFullQualifiedName(model);
+    String _replaceAll = _navigationyNodeClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryClassName(final DictionaryEditor dictionaryEditor) {
+    String _name = dictionaryEditor.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String dictionaryClassFullQualifiedName(final DictionaryEditor dictionaryEditor) {
+    String _packageName = this.getPackageName(dictionaryEditor);
+    String _plus = (_packageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(dictionaryEditor);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final DictionaryEditor dictionaryEditor) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryEditor);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryConstantName(final DictionaryEditor dictionaryEditor) {
+    String _name = dictionaryEditor.getName();
+    return this.constantName(_name);
+  }
+  
+  public String dictionaryClassName(final DictionarySearch dictionarySearch) {
+    String _name = dictionarySearch.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String dictionaryClassFullQualifiedName(final DictionarySearch dictionarySearch) {
+    String _packageName = this.getPackageName(dictionarySearch);
+    String _plus = (_packageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(dictionarySearch);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final DictionarySearch dictionarySearch) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionarySearch);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryConstantName(final DictionarySearch dictionarySearch) {
+    String _name = dictionarySearch.getName();
+    return this.constantName(_name);
+  }
+  
+  public String dictionaryClassName(final DictionaryFilter dictionaryFilter) {
+    String _name = dictionaryFilter.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String dictionaryClassFullQualifiedName(final DictionaryFilter dictionaryFilter) {
+    String _packageName = this.getPackageName(dictionaryFilter);
+    String _plus = (_packageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(dictionaryFilter);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final DictionaryFilter dictionaryFilter) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryFilter);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryConstantName(final DictionaryFilter dictionaryFilter) {
+    String _name = dictionaryFilter.getName();
+    return this.constantName(_name);
+  }
+  
+  public String dictionaryClassName(final DictionaryResult dictionaryResult) {
+    String _name = dictionaryResult.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String dictionaryClassFullQualifiedName(final DictionaryResult dictionaryResult) {
+    String _packageName = this.getPackageName(dictionaryResult);
+    String _plus = (_packageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(dictionaryResult);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final DictionaryResult dictionaryResult) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryResult);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryConstantName(final DictionaryResult dictionaryResult) {
+    String _name = dictionaryResult.getName();
+    return this.constantName(_name);
+  }
+  
+  public String dictionaryClassName(final DictionaryControl dictionaryControl) {
+    String _name = dictionaryControl.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String dictionaryClassFullQualifiedName(final DictionaryControl dictionaryControl) {
+    String _packageName = this.getPackageName(dictionaryControl);
+    String _plus = (_packageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(dictionaryControl);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final DictionaryControl dictionaryControl) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryControl);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryConstantName(final DictionaryControl dictionaryControl) {
+    String _controlName = ModelUtil.getControlName(dictionaryControl);
+    return this.constantName(_controlName);
+  }
+  
+  public String dictionaryClassName(final DictionaryContainer dictionaryContainer) {
+    String _name = dictionaryContainer.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String dictionaryClassFullQualifiedName(final DictionaryContainer dictionaryContainer) {
+    String _packageName = this.getPackageName(dictionaryContainer);
+    String _plus = (_packageName + ".");
+    String _dictionaryClassName = this.dictionaryClassName(dictionaryContainer);
+    return (_plus + _dictionaryClassName);
+  }
+  
+  public String dictionaryClassFullQualifiedFileName(final DictionaryContainer dictionaryContainer) {
+    String _dictionaryClassFullQualifiedName = this.dictionaryClassFullQualifiedName(dictionaryContainer);
+    String _replaceAll = _dictionaryClassFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String dictionaryConstantName(final DictionaryContainer dictionaryContainer) {
+    String _name = dictionaryContainer.getName();
+    return this.constantName(_name);
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNavigationGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNavigationGenerator.java
index 36eb91f..3ca18de 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNavigationGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/dictionary/DictionaryNavigationGenerator.java
@@ -1,286 +1,286 @@
-package io.pelle.mango.dsl.generator.client.dictionary;
-
-import com.google.common.base.Objects;
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.layout.IModuleUI;
-import io.pelle.mango.client.base.modules.navigation.NavigationTreeElement;
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.DictionaryEditor;
-import io.pelle.mango.dsl.mango.DictionarySearch;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.Module;
-import io.pelle.mango.dsl.mango.NavigationNode;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.generator.IFileSystemAccess;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.Functions.Function1;
-import org.eclipse.xtext.xbase.lib.IterableExtensions;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class DictionaryNavigationGenerator {
-  @Inject
-  @Extension
-  private DictionaryNameUtils _dictionaryNameUtils;
-  
-  public void dictionaryNavigationGenerator(final Model model, final IFileSystemAccess fsa) {
-    TreeIterator<EObject> _eAllContents = model.eAllContents();
-    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-    Iterable<NavigationNode> _filter = Iterables.<NavigationNode>filter(_iterable, NavigationNode.class);
-    boolean _isEmpty = IterableExtensions.isEmpty(_filter);
-    boolean _not = (!_isEmpty);
-    if (_not) {
-      TreeIterator<EObject> _eAllContents_1 = model.eAllContents();
-      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
-      Iterable<NavigationNode> _filter_1 = Iterables.<NavigationNode>filter(_iterable_1, NavigationNode.class);
-      for (final NavigationNode navigationNode : _filter_1) {
-        String _navigationNodeClassFullQualifiedFileName = this._dictionaryNameUtils.navigationNodeClassFullQualifiedFileName(navigationNode);
-        CharSequence _dictionaryNavigationNodeClass = this.dictionaryNavigationNodeClass(navigationNode);
-        fsa.generateFile(_navigationNodeClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryNavigationNodeClass);
-      }
-      String _navigationNodeClassFullQualifiedFileName_1 = this._dictionaryNameUtils.navigationNodeClassFullQualifiedFileName(model);
-      CharSequence _dictionaryNavigationRootNodeClass = this.dictionaryNavigationRootNodeClass(model);
-      fsa.generateFile(_navigationNodeClassFullQualifiedFileName_1, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryNavigationRootNodeClass);
-    }
-  }
-  
-  public CharSequence dictionaryNavigationRootNodeClass(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _modelPackageName = this._dictionaryNameUtils.modelPackageName(model);
-    _builder.append(_modelPackageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public class ");
-    String _navigationNodeClassName = this._dictionaryNameUtils.navigationNodeClassName(model);
-    _builder.append(_navigationNodeClassName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("public static class RootNavigationNode extends ");
-    String _name = NavigationTreeElement.class.getName();
-    _builder.append(_name, "\t");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<NavigationNode> _filter = Iterables.<NavigationNode>filter(_iterable, NavigationNode.class);
-      final Function1<NavigationNode, Boolean> _function = new Function1<NavigationNode, Boolean>() {
-        public Boolean apply(final NavigationNode it) {
-          EObject _eContainer = it.eContainer();
-          return Boolean.valueOf((!(_eContainer instanceof NavigationNode)));
-        }
-      };
-      Iterable<NavigationNode> _filter_1 = IterableExtensions.<NavigationNode>filter(_filter, _function);
-      for(final NavigationNode navigationNode : _filter_1) {
-        _builder.append("\t");
-        _builder.append("public ");
-        String _navigationyNodeClassFullQualifiedName = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(navigationNode);
-        _builder.append(_navigationyNodeClassFullQualifiedName, "\t");
-        _builder.append(" ");
-        String _navigationNodeConstantName = this._dictionaryNameUtils.navigationNodeConstantName(navigationNode);
-        _builder.append(_navigationNodeConstantName, "\t");
-        _builder.append(" = new ");
-        String _navigationyNodeClassFullQualifiedName_1 = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(navigationNode);
-        _builder.append(_navigationyNodeClassFullQualifiedName_1, "\t");
-        _builder.append("();");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public RootNavigationNode() {");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("super(\"ROOT\");");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents_1 = model.eAllContents();
-      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
-      Iterable<NavigationNode> _filter_2 = Iterables.<NavigationNode>filter(_iterable_1, NavigationNode.class);
-      final Function1<NavigationNode, Boolean> _function_1 = new Function1<NavigationNode, Boolean>() {
-        public Boolean apply(final NavigationNode it) {
-          EObject _eContainer = it.eContainer();
-          return Boolean.valueOf((!(_eContainer instanceof NavigationNode)));
-        }
-      };
-      Iterable<NavigationNode> _filter_3 = IterableExtensions.<NavigationNode>filter(_filter_2, _function_1);
-      for(final NavigationNode navigationNode_1 : _filter_3) {
-        _builder.append("\t\t\t");
-        _builder.append("getChildren().add(");
-        String _navigationNodeConstantName_1 = this._dictionaryNameUtils.navigationNodeConstantName(navigationNode_1);
-        _builder.append(_navigationNodeConstantName_1, "\t\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("setLabel(RootNavigationNode.class.getName());");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public static RootNavigationNode ROOT = new RootNavigationNode();");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence dictionaryNavigationNodeClass(final NavigationNode navigationNode) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("package ");
-    String _packageName = this._dictionaryNameUtils.getPackageName(navigationNode);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public class ");
-    String _navigationNodeClassName = this._dictionaryNameUtils.navigationNodeClassName(navigationNode);
-    _builder.append(_navigationNodeClassName, "");
-    _builder.append(" extends ");
-    String _name = NavigationTreeElement.class.getName();
-    _builder.append(_name, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.newLine();
-    {
-      EList<EObject> _eContents = navigationNode.eContents();
-      Iterable<NavigationNode> _filter = Iterables.<NavigationNode>filter(_eContents, NavigationNode.class);
-      for(final NavigationNode childNavigationNode : _filter) {
-        _builder.append("\t");
-        _builder.append("public ");
-        String _navigationyNodeClassFullQualifiedName = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(childNavigationNode);
-        _builder.append(_navigationyNodeClassFullQualifiedName, "\t");
-        _builder.append(" ");
-        String _navigationNodeConstantName = this._dictionaryNameUtils.navigationNodeConstantName(childNavigationNode);
-        _builder.append(_navigationNodeConstantName, "\t");
-        _builder.append(" = new ");
-        String _navigationyNodeClassFullQualifiedName_1 = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(childNavigationNode);
-        _builder.append(_navigationyNodeClassFullQualifiedName_1, "\t");
-        _builder.append("();");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _navigationNodeClassName_1 = this._dictionaryNameUtils.navigationNodeClassName(navigationNode);
-    _builder.append(_navigationNodeClassName_1, "\t");
-    _builder.append("() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("super(\"");
-    String _name_1 = navigationNode.getName();
-    _builder.append(_name_1, "\t\t");
-    _builder.append("\");");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<EObject> _eContents_1 = navigationNode.eContents();
-      Iterable<NavigationNode> _filter_1 = Iterables.<NavigationNode>filter(_eContents_1, NavigationNode.class);
-      for(final NavigationNode childNavigationNode_1 : _filter_1) {
-        _builder.append("\t\t");
-        _builder.append("getChildren().add(");
-        String _navigationNodeConstantName_1 = this._dictionaryNameUtils.navigationNodeConstantName(childNavigationNode_1);
-        _builder.append(_navigationNodeConstantName_1, "\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("setLabel(\"");
-    String _name_2 = navigationNode.getName();
-    _builder.append(_name_2, "\t\t");
-    _builder.append("\");");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.newLine();
-    {
-      Module _module = navigationNode.getModule();
-      boolean _notEquals = (!Objects.equal(_module, null));
-      if (_notEquals) {
-        _builder.append("\t\t");
-        _builder.append("setModuleLocator(");
-        _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
-        _builder.append(" + \"=");
-        Module _module_1 = navigationNode.getModule();
-        String _name_3 = _module_1.getName();
-        _builder.append(_name_3, "\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-      } else {
-        DictionaryEditor _dictionaryEditor = navigationNode.getDictionaryEditor();
-        boolean _notEquals_1 = (!Objects.equal(_dictionaryEditor, null));
-        if (_notEquals_1) {
-          _builder.append("\t\t");
-          _builder.append("setModuleLocator(\"");
-          _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
-          _builder.append("=DictionaryEditor&\" + io.pelle.mango.client.modules.BaseDictionaryEditorModule.EDITORDICTIONARYNAME_PARAMETER_ID + \"=");
-          DictionaryEditor _dictionaryEditor_1 = navigationNode.getDictionaryEditor();
-          Dictionary _parentDictionary = ModelUtil.getParentDictionary(_dictionaryEditor_1);
-          String _name_4 = _parentDictionary.getName();
-          _builder.append(_name_4, "\t\t");
-          _builder.append("\");");
-          _builder.newLineIfNotEmpty();
-        } else {
-          DictionarySearch _dictionarySearch = navigationNode.getDictionarySearch();
-          boolean _notEquals_2 = (!Objects.equal(_dictionarySearch, null));
-          if (_notEquals_2) {
-            _builder.append("\t\t");
-            _builder.append("setModuleLocator(\"");
-            _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
-            _builder.append("=DictionarySearch&\" + io.pelle.mango.client.modules.BaseDictionarySearchModule.SEARCHDICTIONARYNAME_PARAMETER_ID + \"=");
-            DictionarySearch _dictionarySearch_1 = navigationNode.getDictionarySearch();
-            Dictionary _parentDictionary_1 = ModelUtil.getParentDictionary(_dictionarySearch_1);
-            String _name_5 = _parentDictionary_1.getName();
-            _builder.append(_name_5, "\t\t");
-            _builder.append("\");");
-            _builder.newLineIfNotEmpty();
-          } else {
-            String _name_6 = navigationNode.getName();
-            boolean _notEquals_3 = (!Objects.equal(_name_6, null));
-            if (_notEquals_3) {
-              _builder.append("\t\t");
-              _builder.append("setModuleLocator(\"");
-              _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
-              _builder.append("=ModuleNavigationOverview&\" + io.pelle.mango.client.modules.BaseModuleNavigationModule.NAVIGATIONTREEELEMENTNAME_PARAMETER_ID + \"=");
-              String _name_7 = navigationNode.getName();
-              _builder.append(_name_7, "\t\t");
-              _builder.append("\");");
-              _builder.newLineIfNotEmpty();
-            }
-          }
-        }
-      }
-    }
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator.client.dictionary;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.layout.IModuleUI;
+import io.pelle.mango.client.base.modules.navigation.NavigationTreeElement;
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.DictionaryEditor;
+import io.pelle.mango.dsl.mango.DictionarySearch;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.Module;
+import io.pelle.mango.dsl.mango.NavigationNode;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.generator.IFileSystemAccess;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.Functions.Function1;
+import org.eclipse.xtext.xbase.lib.IterableExtensions;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class DictionaryNavigationGenerator {
+  @Inject
+  @Extension
+  private DictionaryNameUtils _dictionaryNameUtils;
+  
+  public void dictionaryNavigationGenerator(final Model model, final IFileSystemAccess fsa) {
+    TreeIterator<EObject> _eAllContents = model.eAllContents();
+    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+    Iterable<NavigationNode> _filter = Iterables.<NavigationNode>filter(_iterable, NavigationNode.class);
+    boolean _isEmpty = IterableExtensions.isEmpty(_filter);
+    boolean _not = (!_isEmpty);
+    if (_not) {
+      TreeIterator<EObject> _eAllContents_1 = model.eAllContents();
+      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
+      Iterable<NavigationNode> _filter_1 = Iterables.<NavigationNode>filter(_iterable_1, NavigationNode.class);
+      for (final NavigationNode navigationNode : _filter_1) {
+        String _navigationNodeClassFullQualifiedFileName = this._dictionaryNameUtils.navigationNodeClassFullQualifiedFileName(navigationNode);
+        CharSequence _dictionaryNavigationNodeClass = this.dictionaryNavigationNodeClass(navigationNode);
+        fsa.generateFile(_navigationNodeClassFullQualifiedFileName, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryNavigationNodeClass);
+      }
+      String _navigationNodeClassFullQualifiedFileName_1 = this._dictionaryNameUtils.navigationNodeClassFullQualifiedFileName(model);
+      CharSequence _dictionaryNavigationRootNodeClass = this.dictionaryNavigationRootNodeClass(model);
+      fsa.generateFile(_navigationNodeClassFullQualifiedFileName_1, GeneratorConstants.VO_GEN_OUTPUT, _dictionaryNavigationRootNodeClass);
+    }
+  }
+  
+  public CharSequence dictionaryNavigationRootNodeClass(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _modelPackageName = this._dictionaryNameUtils.modelPackageName(model);
+    _builder.append(_modelPackageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public class ");
+    String _navigationNodeClassName = this._dictionaryNameUtils.navigationNodeClassName(model);
+    _builder.append(_navigationNodeClassName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("public static class RootNavigationNode extends ");
+    String _name = NavigationTreeElement.class.getName();
+    _builder.append(_name, "\t");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<NavigationNode> _filter = Iterables.<NavigationNode>filter(_iterable, NavigationNode.class);
+      final Function1<NavigationNode, Boolean> _function = new Function1<NavigationNode, Boolean>() {
+        public Boolean apply(final NavigationNode it) {
+          EObject _eContainer = it.eContainer();
+          return Boolean.valueOf((!(_eContainer instanceof NavigationNode)));
+        }
+      };
+      Iterable<NavigationNode> _filter_1 = IterableExtensions.<NavigationNode>filter(_filter, _function);
+      for(final NavigationNode navigationNode : _filter_1) {
+        _builder.append("\t");
+        _builder.append("public ");
+        String _navigationyNodeClassFullQualifiedName = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(navigationNode);
+        _builder.append(_navigationyNodeClassFullQualifiedName, "\t");
+        _builder.append(" ");
+        String _navigationNodeConstantName = this._dictionaryNameUtils.navigationNodeConstantName(navigationNode);
+        _builder.append(_navigationNodeConstantName, "\t");
+        _builder.append(" = new ");
+        String _navigationyNodeClassFullQualifiedName_1 = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(navigationNode);
+        _builder.append(_navigationyNodeClassFullQualifiedName_1, "\t");
+        _builder.append("();");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public RootNavigationNode() {");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("super(\"ROOT\");");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents_1 = model.eAllContents();
+      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
+      Iterable<NavigationNode> _filter_2 = Iterables.<NavigationNode>filter(_iterable_1, NavigationNode.class);
+      final Function1<NavigationNode, Boolean> _function_1 = new Function1<NavigationNode, Boolean>() {
+        public Boolean apply(final NavigationNode it) {
+          EObject _eContainer = it.eContainer();
+          return Boolean.valueOf((!(_eContainer instanceof NavigationNode)));
+        }
+      };
+      Iterable<NavigationNode> _filter_3 = IterableExtensions.<NavigationNode>filter(_filter_2, _function_1);
+      for(final NavigationNode navigationNode_1 : _filter_3) {
+        _builder.append("\t\t\t");
+        _builder.append("getChildren().add(");
+        String _navigationNodeConstantName_1 = this._dictionaryNameUtils.navigationNodeConstantName(navigationNode_1);
+        _builder.append(_navigationNodeConstantName_1, "\t\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("setLabel(RootNavigationNode.class.getName());");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public static RootNavigationNode ROOT = new RootNavigationNode();");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence dictionaryNavigationNodeClass(final NavigationNode navigationNode) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("package ");
+    String _packageName = this._dictionaryNameUtils.getPackageName(navigationNode);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public class ");
+    String _navigationNodeClassName = this._dictionaryNameUtils.navigationNodeClassName(navigationNode);
+    _builder.append(_navigationNodeClassName, "");
+    _builder.append(" extends ");
+    String _name = NavigationTreeElement.class.getName();
+    _builder.append(_name, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.newLine();
+    {
+      EList<EObject> _eContents = navigationNode.eContents();
+      Iterable<NavigationNode> _filter = Iterables.<NavigationNode>filter(_eContents, NavigationNode.class);
+      for(final NavigationNode childNavigationNode : _filter) {
+        _builder.append("\t");
+        _builder.append("public ");
+        String _navigationyNodeClassFullQualifiedName = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(childNavigationNode);
+        _builder.append(_navigationyNodeClassFullQualifiedName, "\t");
+        _builder.append(" ");
+        String _navigationNodeConstantName = this._dictionaryNameUtils.navigationNodeConstantName(childNavigationNode);
+        _builder.append(_navigationNodeConstantName, "\t");
+        _builder.append(" = new ");
+        String _navigationyNodeClassFullQualifiedName_1 = this._dictionaryNameUtils.navigationyNodeClassFullQualifiedName(childNavigationNode);
+        _builder.append(_navigationyNodeClassFullQualifiedName_1, "\t");
+        _builder.append("();");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _navigationNodeClassName_1 = this._dictionaryNameUtils.navigationNodeClassName(navigationNode);
+    _builder.append(_navigationNodeClassName_1, "\t");
+    _builder.append("() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("super(\"");
+    String _name_1 = navigationNode.getName();
+    _builder.append(_name_1, "\t\t");
+    _builder.append("\");");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<EObject> _eContents_1 = navigationNode.eContents();
+      Iterable<NavigationNode> _filter_1 = Iterables.<NavigationNode>filter(_eContents_1, NavigationNode.class);
+      for(final NavigationNode childNavigationNode_1 : _filter_1) {
+        _builder.append("\t\t");
+        _builder.append("getChildren().add(");
+        String _navigationNodeConstantName_1 = this._dictionaryNameUtils.navigationNodeConstantName(childNavigationNode_1);
+        _builder.append(_navigationNodeConstantName_1, "\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("setLabel(\"");
+    String _name_2 = navigationNode.getName();
+    _builder.append(_name_2, "\t\t");
+    _builder.append("\");");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.newLine();
+    {
+      Module _module = navigationNode.getModule();
+      boolean _notEquals = (!Objects.equal(_module, null));
+      if (_notEquals) {
+        _builder.append("\t\t");
+        _builder.append("setModuleLocator(");
+        _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
+        _builder.append(" + \"=");
+        Module _module_1 = navigationNode.getModule();
+        String _name_3 = _module_1.getName();
+        _builder.append(_name_3, "\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+      } else {
+        DictionaryEditor _dictionaryEditor = navigationNode.getDictionaryEditor();
+        boolean _notEquals_1 = (!Objects.equal(_dictionaryEditor, null));
+        if (_notEquals_1) {
+          _builder.append("\t\t");
+          _builder.append("setModuleLocator(\"");
+          _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
+          _builder.append("=DictionaryEditor&\" + io.pelle.mango.client.modules.BaseDictionaryEditorModule.EDITORDICTIONARYNAME_PARAMETER_ID + \"=");
+          DictionaryEditor _dictionaryEditor_1 = navigationNode.getDictionaryEditor();
+          Dictionary _parentDictionary = ModelUtil.getParentDictionary(_dictionaryEditor_1);
+          String _name_4 = _parentDictionary.getName();
+          _builder.append(_name_4, "\t\t");
+          _builder.append("\");");
+          _builder.newLineIfNotEmpty();
+        } else {
+          DictionarySearch _dictionarySearch = navigationNode.getDictionarySearch();
+          boolean _notEquals_2 = (!Objects.equal(_dictionarySearch, null));
+          if (_notEquals_2) {
+            _builder.append("\t\t");
+            _builder.append("setModuleLocator(\"");
+            _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
+            _builder.append("=DictionarySearch&\" + io.pelle.mango.client.modules.BaseDictionarySearchModule.SEARCHDICTIONARYNAME_PARAMETER_ID + \"=");
+            DictionarySearch _dictionarySearch_1 = navigationNode.getDictionarySearch();
+            Dictionary _parentDictionary_1 = ModelUtil.getParentDictionary(_dictionarySearch_1);
+            String _name_5 = _parentDictionary_1.getName();
+            _builder.append(_name_5, "\t\t");
+            _builder.append("\");");
+            _builder.newLineIfNotEmpty();
+          } else {
+            String _name_6 = navigationNode.getName();
+            boolean _notEquals_3 = (!Objects.equal(_name_6, null));
+            if (_notEquals_3) {
+              _builder.append("\t\t");
+              _builder.append("setModuleLocator(\"");
+              _builder.append(IModuleUI.UI_MODULE_ID_PARAMETER_NAME, "\t\t");
+              _builder.append("=ModuleNavigationOverview&\" + io.pelle.mango.client.modules.BaseModuleNavigationModule.NAVIGATIONTREEELEMENTNAME_PARAMETER_ID + \"=");
+              String _name_7 = navigationNode.getName();
+              _builder.append(_name_7, "\t\t");
+              _builder.append("\");");
+              _builder.newLineIfNotEmpty();
+            }
+          }
+        }
+      }
+    }
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.BaseServices.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.BaseServices.java._trace
index 129a2a1..2f8c407 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.BaseServices.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.BaseServices.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTClient.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTClient.java._trace
index c85b73c..e1c4af2 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTClient.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTClient.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTServices.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTServices.java._trace
index a1cb701..d7cd7b4 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTServices.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.GWTServices.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.Services.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.Services.java._trace
index 8591148..d5d76d3 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.Services.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/.Services.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/BaseServices.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/BaseServices.java
index a7487dd..756ed63 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/BaseServices.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/BaseServices.java
@@ -1,93 +1,93 @@
-package io.pelle.mango.dsl.generator.client.web;
-
-import com.google.common.base.Objects;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
-import io.pelle.mango.dsl.mango.GenericTypeDefinition;
-import io.pelle.mango.dsl.mango.MethodParameter;
-import io.pelle.mango.dsl.mango.MethodReturnType;
-import io.pelle.mango.dsl.mango.ServiceMethod;
-import java.util.List;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-@SuppressWarnings("all")
-public class BaseServices {
-  @Inject
-  @Extension
-  private ClientTypeUtils _clientTypeUtils;
-  
-  public CharSequence methodParameters(final List<MethodParameter> methodParameters) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      boolean _hasElements = false;
-      for(final MethodParameter methodParameter : methodParameters) {
-        if (!_hasElements) {
-          _hasElements = true;
-        } else {
-          _builder.appendImmediate(", ", "");
-        }
-        String _methodParameter = this.methodParameter(methodParameter);
-        _builder.append(_methodParameter, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  public String methodParameter(final MethodParameter methodParameter) {
-    String _type = this._clientTypeUtils.getType(methodParameter);
-    String _plus = (_type + " ");
-    String _name = methodParameter.getName();
-    String _firstLower = StringExtensions.toFirstLower(_name);
-    return (_plus + _firstLower);
-  }
-  
-  public CharSequence serviceMethod(final ServiceMethod serviceMethod) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      GenericTypeDefinition _genericTypeDefinition = serviceMethod.getGenericTypeDefinition();
-      boolean _notEquals = (!Objects.equal(_genericTypeDefinition, null));
-      if (_notEquals) {
-        GenericTypeDefinition _genericTypeDefinition_1 = serviceMethod.getGenericTypeDefinition();
-        String _genericTypeDefinition_2 = this._clientTypeUtils.genericTypeDefinition(_genericTypeDefinition_1);
-        _builder.append(_genericTypeDefinition_2, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    CharSequence _serviceMethodReturnType = this.serviceMethodReturnType(serviceMethod);
-    _builder.append(_serviceMethodReturnType, "");
-    _builder.newLineIfNotEmpty();
-    _builder.append(" ");
-    String _name = serviceMethod.getName();
-    String _firstLower = StringExtensions.toFirstLower(_name);
-    _builder.append(_firstLower, " ");
-    _builder.append("(");
-    EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
-    CharSequence _methodParameters_1 = this.methodParameters(_methodParameters);
-    _builder.append(_methodParameters_1, " ");
-    _builder.append(");");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence serviceMethodReturnType(final ServiceMethod serviceMethod) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      MethodReturnType _returnType = serviceMethod.getReturnType();
-      boolean _equals = Objects.equal(_returnType, null);
-      if (_equals) {
-        _builder.append("void");
-        _builder.newLine();
-      } else {
-        MethodReturnType _returnType_1 = serviceMethod.getReturnType();
-        String _type = this._clientTypeUtils.getType(_returnType_1);
-        _builder.append(_type, "");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator.client.web;
+
+import com.google.common.base.Objects;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
+import io.pelle.mango.dsl.mango.GenericTypeDefinition;
+import io.pelle.mango.dsl.mango.MethodParameter;
+import io.pelle.mango.dsl.mango.MethodReturnType;
+import io.pelle.mango.dsl.mango.ServiceMethod;
+import java.util.List;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+@SuppressWarnings("all")
+public class BaseServices {
+  @Inject
+  @Extension
+  private ClientTypeUtils _clientTypeUtils;
+  
+  public CharSequence methodParameters(final List<MethodParameter> methodParameters) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      boolean _hasElements = false;
+      for(final MethodParameter methodParameter : methodParameters) {
+        if (!_hasElements) {
+          _hasElements = true;
+        } else {
+          _builder.appendImmediate(", ", "");
+        }
+        String _methodParameter = this.methodParameter(methodParameter);
+        _builder.append(_methodParameter, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  public String methodParameter(final MethodParameter methodParameter) {
+    String _type = this._clientTypeUtils.getType(methodParameter);
+    String _plus = (_type + " ");
+    String _name = methodParameter.getName();
+    String _firstLower = StringExtensions.toFirstLower(_name);
+    return (_plus + _firstLower);
+  }
+  
+  public CharSequence serviceMethod(final ServiceMethod serviceMethod) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      GenericTypeDefinition _genericTypeDefinition = serviceMethod.getGenericTypeDefinition();
+      boolean _notEquals = (!Objects.equal(_genericTypeDefinition, null));
+      if (_notEquals) {
+        GenericTypeDefinition _genericTypeDefinition_1 = serviceMethod.getGenericTypeDefinition();
+        String _genericTypeDefinition_2 = this._clientTypeUtils.genericTypeDefinition(_genericTypeDefinition_1);
+        _builder.append(_genericTypeDefinition_2, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    CharSequence _serviceMethodReturnType = this.serviceMethodReturnType(serviceMethod);
+    _builder.append(_serviceMethodReturnType, "");
+    _builder.newLineIfNotEmpty();
+    _builder.append(" ");
+    String _name = serviceMethod.getName();
+    String _firstLower = StringExtensions.toFirstLower(_name);
+    _builder.append(_firstLower, " ");
+    _builder.append("(");
+    EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
+    CharSequence _methodParameters_1 = this.methodParameters(_methodParameters);
+    _builder.append(_methodParameters_1, " ");
+    _builder.append(");");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence serviceMethodReturnType(final ServiceMethod serviceMethod) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      MethodReturnType _returnType = serviceMethod.getReturnType();
+      boolean _equals = Objects.equal(_returnType, null);
+      if (_equals) {
+        _builder.append("void");
+        _builder.newLine();
+      } else {
+        MethodReturnType _returnType_1 = serviceMethod.getReturnType();
+        String _type = this._clientTypeUtils.getType(_returnType_1);
+        _builder.append(_type, "");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTClient.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTClient.java
index 301ecea..d918689 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTClient.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTClient.java
@@ -1,172 +1,172 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.client.web;
-
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Iterators;
-import io.pelle.mango.client.base.modules.dictionary.model.DictionaryModelProvider;
-import io.pelle.mango.client.base.modules.navigation.NavigationTreeProvider;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
-import io.pelle.mango.dsl.generator.client.web.BaseServices;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.NavigationNode;
-import java.util.Iterator;
-import javax.inject.Inject;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-/**
- * Generates code from your model files on save.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
- */
-@SuppressWarnings("all")
-public class GWTClient extends BaseServices {
-  @Inject
-  @Extension
-  private DictionaryNameUtils _dictionaryNameUtils;
-  
-  public CharSequence gwtClientModule(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-    _builder.newLine();
-    _builder.append("<!DOCTYPE module PUBLIC \"-//Google Inc.//DTD Google Web Toolkit 1.6.4//EN\" \"http://google-web-toolkit.googlecode.com/svn/tags/1.6.4/distro-source/core/src/gwt-module.dtd\">");
-    _builder.newLine();
-    _builder.append("<module>");
-    _builder.newLine();
-    _builder.append("<inherits name=\"com.google.gwt.user.User\" />");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("<source path=\"");
-    _builder.append(GeneratorConstants.CLIENT_PACKAGE_POSTFIX, "\t");
-    _builder.append("\" />");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("</module>");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence gwtClientConfiguration(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("package ");
-    String _modelPackageName = this._dictionaryNameUtils.modelPackageName(model);
-    _builder.append(_modelPackageName, "\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public class ");
-    String _gwtClientconfigurationName = this._dictionaryNameUtils.gwtClientconfigurationName(model);
-    _builder.append(_gwtClientconfigurationName, "\t\t");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("private ");
-    String _gwtClientconfigurationName_1 = this._dictionaryNameUtils.gwtClientconfigurationName(model);
-    _builder.append(_gwtClientconfigurationName_1, "\t\t");
-    _builder.append("() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public static void registerAll()");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("{");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("registerDictionaries();");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterator<NavigationNode> _filter = Iterators.<NavigationNode>filter(_eAllContents, NavigationNode.class);
-      boolean _isEmpty = IteratorExtensions.isEmpty(_filter);
-      boolean _not = (!_isEmpty);
-      if (_not) {
-        _builder.append("\t\t\t");
-        _builder.append("registerNavigation();");
-        _builder.newLine();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public static void registerDictionaries()");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("{");
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents_1 = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
-      Iterable<Dictionary> _filter_1 = Iterables.<Dictionary>filter(_iterable, Dictionary.class);
-      for(final Dictionary dictionary : _filter_1) {
-        _builder.append("\t\t\t");
-        String _name = DictionaryModelProvider.class.getName();
-        _builder.append(_name, "\t\t\t");
-        _builder.append(".registerDictionary(");
-        String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(model);
-        _builder.append(_dictionaryClassFullQualifiedName, "\t\t\t");
-        _builder.append(".");
-        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionary);
-        _builder.append(_dictionaryConstantName, "\t\t\t");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents_2 = model.eAllContents();
-      Iterator<NavigationNode> _filter_2 = Iterators.<NavigationNode>filter(_eAllContents_2, NavigationNode.class);
-      boolean _isEmpty_1 = IteratorExtensions.isEmpty(_filter_2);
-      boolean _not_1 = (!_isEmpty_1);
-      if (_not_1) {
-        _builder.append("\t\t");
-        _builder.append("public static void registerNavigation()");
-        _builder.newLine();
-        _builder.append("\t\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t\t");
-        _builder.append("\t");
-        String _name_1 = NavigationTreeProvider.class.getName();
-        _builder.append(_name_1, "\t\t\t");
-        _builder.append(".addRootNavigationElement(");
-        String _navigationNodeClassName = this._dictionaryNameUtils.navigationNodeClassName(model);
-        _builder.append(_navigationNodeClassName, "\t\t\t");
-        _builder.append(".ROOT);");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t\t");
-        _builder.append("}");
-        _builder.newLine();
-      }
-    }
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.client.web;
+
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Iterators;
+import io.pelle.mango.client.base.modules.dictionary.model.DictionaryModelProvider;
+import io.pelle.mango.client.base.modules.navigation.NavigationTreeProvider;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.client.dictionary.DictionaryNameUtils;
+import io.pelle.mango.dsl.generator.client.web.BaseServices;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.NavigationNode;
+import java.util.Iterator;
+import javax.inject.Inject;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+/**
+ * Generates code from your model files on save.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
+ */
+@SuppressWarnings("all")
+public class GWTClient extends BaseServices {
+  @Inject
+  @Extension
+  private DictionaryNameUtils _dictionaryNameUtils;
+  
+  public CharSequence gwtClientModule(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
+    _builder.newLine();
+    _builder.append("<!DOCTYPE module PUBLIC \"-//Google Inc.//DTD Google Web Toolkit 1.6.4//EN\" \"http://google-web-toolkit.googlecode.com/svn/tags/1.6.4/distro-source/core/src/gwt-module.dtd\">");
+    _builder.newLine();
+    _builder.append("<module>");
+    _builder.newLine();
+    _builder.append("<inherits name=\"com.google.gwt.user.User\" />");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<source path=\"");
+    _builder.append(GeneratorConstants.CLIENT_PACKAGE_POSTFIX, "\t");
+    _builder.append("\" />");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("</module>");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence gwtClientConfiguration(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("package ");
+    String _modelPackageName = this._dictionaryNameUtils.modelPackageName(model);
+    _builder.append(_modelPackageName, "\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public class ");
+    String _gwtClientconfigurationName = this._dictionaryNameUtils.gwtClientconfigurationName(model);
+    _builder.append(_gwtClientconfigurationName, "\t\t");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("private ");
+    String _gwtClientconfigurationName_1 = this._dictionaryNameUtils.gwtClientconfigurationName(model);
+    _builder.append(_gwtClientconfigurationName_1, "\t\t");
+    _builder.append("() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public static void registerAll()");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("{");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("registerDictionaries();");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterator<NavigationNode> _filter = Iterators.<NavigationNode>filter(_eAllContents, NavigationNode.class);
+      boolean _isEmpty = IteratorExtensions.isEmpty(_filter);
+      boolean _not = (!_isEmpty);
+      if (_not) {
+        _builder.append("\t\t\t");
+        _builder.append("registerNavigation();");
+        _builder.newLine();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public static void registerDictionaries()");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("{");
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents_1 = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
+      Iterable<Dictionary> _filter_1 = Iterables.<Dictionary>filter(_iterable, Dictionary.class);
+      for(final Dictionary dictionary : _filter_1) {
+        _builder.append("\t\t\t");
+        String _name = DictionaryModelProvider.class.getName();
+        _builder.append(_name, "\t\t\t");
+        _builder.append(".registerDictionary(");
+        String _dictionaryClassFullQualifiedName = this._dictionaryNameUtils.dictionaryClassFullQualifiedName(model);
+        _builder.append(_dictionaryClassFullQualifiedName, "\t\t\t");
+        _builder.append(".");
+        String _dictionaryConstantName = this._dictionaryNameUtils.dictionaryConstantName(dictionary);
+        _builder.append(_dictionaryConstantName, "\t\t\t");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents_2 = model.eAllContents();
+      Iterator<NavigationNode> _filter_2 = Iterators.<NavigationNode>filter(_eAllContents_2, NavigationNode.class);
+      boolean _isEmpty_1 = IteratorExtensions.isEmpty(_filter_2);
+      boolean _not_1 = (!_isEmpty_1);
+      if (_not_1) {
+        _builder.append("\t\t");
+        _builder.append("public static void registerNavigation()");
+        _builder.newLine();
+        _builder.append("\t\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t\t");
+        _builder.append("\t");
+        String _name_1 = NavigationTreeProvider.class.getName();
+        _builder.append(_name_1, "\t\t\t");
+        _builder.append(".addRootNavigationElement(");
+        String _navigationNodeClassName = this._dictionaryNameUtils.navigationNodeClassName(model);
+        _builder.append(_navigationNodeClassName, "\t\t\t");
+        _builder.append(".ROOT);");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t\t");
+        _builder.append("}");
+        _builder.newLine();
+      }
+    }
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTServices.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTServices.java
index 5c0a0b9..fd99a1c 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTServices.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/GWTServices.java
@@ -1,519 +1,519 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.client.web;
-
-import com.google.common.base.Objects;
-import com.google.common.collect.Iterables;
-import com.google.gwt.user.client.rpc.RemoteService;
-import com.google.gwt.user.client.rpc.ServiceDefTarget;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
-import io.pelle.mango.dsl.generator.client.web.BaseServices;
-import io.pelle.mango.dsl.mango.GenericTypeDefinition;
-import io.pelle.mango.dsl.mango.MethodParameter;
-import io.pelle.mango.dsl.mango.MethodReturnType;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.Service;
-import io.pelle.mango.dsl.mango.ServiceMethod;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-/**
- * Generates code from your model files on save.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
- */
-@SuppressWarnings("all")
-public class GWTServices extends BaseServices {
-  @Inject
-  @Extension
-  private ClientNameUtils _clientNameUtils;
-  
-  @Inject
-  @Extension
-  private ClientTypeUtils _clientTypeUtils;
-  
-  public CharSequence gwtRemoteServiceLocator(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _modelPackageName = this._clientNameUtils.modelPackageName(model);
-    _builder.append(_modelPackageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public class ");
-    String _gwtRemoteServiceLocatorName = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
-    _builder.append(_gwtRemoteServiceLocatorName, "");
-    _builder.append(" implements ");
-    String _gwtRemoteServiceLocatorInterfaceName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceName(model);
-    _builder.append(_gwtRemoteServiceLocatorInterfaceName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("private static final ");
-    String _gwtRemoteServiceLocatorName_1 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
-    _builder.append(_gwtRemoteServiceLocatorName_1, "    ");
-    _builder.append(" instance = new ");
-    String _gwtRemoteServiceLocatorName_2 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
-    _builder.append(_gwtRemoteServiceLocatorName_2, "    ");
-    _builder.append("();");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("private ");
-    String _gwtRemoteServiceLocatorName_3 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
-    _builder.append(_gwtRemoteServiceLocatorName_3, "    ");
-    _builder.append("() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("    ");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("public static ");
-    String _gwtRemoteServiceLocatorName_4 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
-    _builder.append(_gwtRemoteServiceLocatorName_4, "    ");
-    _builder.append(" getInstance() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("        ");
-    _builder.append("return instance;");
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.newLine();
-    _builder.append("   \t");
-    _builder.append("private String remoteBaseUrl = null;");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public void setRemoteBaseUrl(String remoteBaseUrl) {");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("this.remoteBaseUrl = remoteBaseUrl;");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("public String getModuleBaseUrl()");
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("{");
-    _builder.newLine();
-    _builder.append("\t    ");
-    _builder.append("if (remoteBaseUrl != null) {");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("return remoteBaseUrl;");
-    _builder.newLine();
-    _builder.append("\t    ");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("\t    ");
-    _builder.append("else {");
-    _builder.newLine();
-    _builder.append("\t    \t");
-    _builder.append("return com.google.gwt.core.client.GWT.getModuleBaseURL() + \"../remote/rpc\"; ");
-    _builder.newLine();
-    _builder.append("\t    ");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("} ");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
-      for(final Service service : _filter) {
-        _builder.append("\t");
-        _builder.append("public ");
-        String _gwtAsyncServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
-        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName, "\t");
-        _builder.append(" get");
-        String _serviceName = this._clientNameUtils.serviceName(service);
-        _builder.append(_serviceName, "\t");
-        _builder.append("() {");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("final ");
-        String _gwtAsyncServiceInterfaceFullQualifiedName_1 = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
-        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName_1, "\t\t");
-        _builder.append(" service = (");
-        String _gwtAsyncServiceInterfaceFullQualifiedName_2 = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
-        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName_2, "\t\t");
-        _builder.append(") com.google.gwt.core.client.GWT.create(");
-        String _gwtServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtServiceInterfaceFullQualifiedName(service);
-        _builder.append(_gwtServiceInterfaceFullQualifiedName, "\t\t");
-        _builder.append(".class);");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        String _name = ServiceDefTarget.class.getName();
-        _builder.append(_name, "\t\t");
-        _builder.append(" formEndpoint = (");
-        String _name_1 = ServiceDefTarget.class.getName();
-        _builder.append(_name_1, "\t\t");
-        _builder.append(") service;");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("formEndpoint.setServiceEntryPoint(getModuleBaseUrl() + \"/");
-        String _serviceSpringName = this._clientNameUtils.serviceSpringName(service);
-        _builder.append(_serviceSpringName, "\t\t");
-        _builder.append("\");");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("return service;");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-      }
-    }
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence gwtRemoteServiceLocatorInterface(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _modelPackageName = this._clientNameUtils.modelPackageName(model);
-    _builder.append(_modelPackageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public interface ");
-    String _gwtRemoteServiceLocatorInterfaceName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceName(model);
-    _builder.append(_gwtRemoteServiceLocatorInterfaceName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
-      for(final Service service : _filter) {
-        _builder.append("\t");
-        String _gwtAsyncServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
-        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName, "\t");
-        _builder.append(" get");
-        String _serviceName = this._clientNameUtils.serviceName(service);
-        _builder.append(_serviceName, "\t");
-        _builder.append("();");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence gwtServiceInterface(final Service service) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(service);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public interface ");
-    String _gwtServiceInterfaceName = this._clientNameUtils.gwtServiceInterfaceName(service);
-    _builder.append(_gwtServiceInterfaceName, "");
-    _builder.append(" extends ");
-    String _name = RemoteService.class.getName();
-    _builder.append(_name, "");
-    _builder.append(", ");
-    String _serviceInterfaceFullQualifiedName = this._clientNameUtils.serviceInterfaceFullQualifiedName(service);
-    _builder.append(_serviceInterfaceFullQualifiedName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence gwtAsyncServiceInterface(final Service service) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(service);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public interface ");
-    String _gwtAsyncServiceInterfaceName = this._clientNameUtils.gwtAsyncServiceInterfaceName(service);
-    _builder.append(_gwtAsyncServiceInterfaceName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
-      for(final ServiceMethod remoteMethod : _remoteMethods) {
-        _builder.append("\t");
-        CharSequence _serviceMethodAsync = this.serviceMethodAsync(remoteMethod);
-        _builder.append(_serviceMethodAsync, "\t");
-        _builder.append(";");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence serviceMethodAsync(final ServiceMethod serviceMethod) {
-    StringConcatenation _builder = new StringConcatenation();
-    GenericTypeDefinition _genericTypeDefinition = serviceMethod.getGenericTypeDefinition();
-    String _genericTypeDefinition_1 = this._clientTypeUtils.genericTypeDefinition(_genericTypeDefinition);
-    _builder.append(_genericTypeDefinition_1, "");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
-      int _size = _methodParameters.size();
-      boolean _equals = (_size == 0);
-      if (_equals) {
-        _builder.append("void ");
-        String _name = serviceMethod.getName();
-        String _firstLower = StringExtensions.toFirstLower(_name);
-        _builder.append(_firstLower, "");
-        _builder.append("(");
-        CharSequence _asyncCallback = this.asyncCallback(serviceMethod);
-        _builder.append(_asyncCallback, "");
-        _builder.append(")");
-        _builder.newLineIfNotEmpty();
-      } else {
-        _builder.append("void ");
-        String _name_1 = serviceMethod.getName();
-        String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
-        _builder.append(_firstLower_1, "");
-        _builder.append("(");
-        EList<MethodParameter> _methodParameters_1 = serviceMethod.getMethodParameters();
-        CharSequence _methodParameters_2 = this.methodParameters(_methodParameters_1);
-        _builder.append(_methodParameters_2, "");
-        _builder.append(", ");
-        CharSequence _asyncCallback_1 = this.asyncCallback(serviceMethod);
-        _builder.append(_asyncCallback_1, "");
-        _builder.append(")");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  public CharSequence asyncCallback(final ServiceMethod serviceMethod) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      MethodReturnType _returnType = serviceMethod.getReturnType();
-      boolean _notEquals = (!Objects.equal(_returnType, null));
-      if (_notEquals) {
-        _builder.append("com.google.gwt.user.client.rpc.AsyncCallback<");
-        MethodReturnType _returnType_1 = serviceMethod.getReturnType();
-        String _type = this._clientTypeUtils.getType(_returnType_1);
-        _builder.append(_type, "");
-        _builder.append("> callback");
-        _builder.newLineIfNotEmpty();
-      } else {
-        _builder.append("com.google.gwt.user.client.rpc.AsyncCallback<Void> callback");
-        _builder.newLine();
-      }
-    }
-    return _builder;
-  }
-  
-  public CharSequence gwtRemoteServiceAsyncAdapter(final Service service) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.newLine();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(service);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public class ");
-    String _gwtAsyncAdapterName = this._clientNameUtils.gwtAsyncAdapterName(service);
-    _builder.append(_gwtAsyncAdapterName, "");
-    _builder.append(" implements ");
-    String _gwtAsyncAdapterFullQualifiedName = this._clientNameUtils.gwtAsyncAdapterFullQualifiedName(service);
-    _builder.append(_gwtAsyncAdapterFullQualifiedName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("private ");
-    String _serviceInterfaceName = this._clientNameUtils.serviceInterfaceName(service);
-    _builder.append(_serviceInterfaceName, "\t");
-    _builder.append(" ");
-    String _name = service.getName();
-    String _firstLower = StringExtensions.toFirstLower(_name);
-    _builder.append(_firstLower, "\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("public ");
-    String _gwtAsyncAdapterName_1 = this._clientNameUtils.gwtAsyncAdapterName(service);
-    _builder.append(_gwtAsyncAdapterName_1, "\t");
-    _builder.append("(");
-    String _serviceInterfaceName_1 = this._clientNameUtils.serviceInterfaceName(service);
-    _builder.append(_serviceInterfaceName_1, "\t");
-    _builder.append(" ");
-    String _name_1 = service.getName();
-    String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
-    _builder.append(_firstLower_1, "\t");
-    _builder.append(")");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("{");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("this.");
-    String _name_2 = service.getName();
-    String _firstLower_2 = StringExtensions.toFirstLower(_name_2);
-    _builder.append(_firstLower_2, "\t\t");
-    _builder.append(" = ");
-    String _name_3 = service.getName();
-    String _firstLower_3 = StringExtensions.toFirstLower(_name_3);
-    _builder.append(_firstLower_3, "\t\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("}");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
-      for(final ServiceMethod serviceMethod : _remoteMethods) {
-        _builder.append("\t");
-        _builder.append("public ");
-        CharSequence _serviceMethodAsync = this.serviceMethodAsync(serviceMethod);
-        _builder.append(_serviceMethodAsync, "\t");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("try");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        {
-          MethodReturnType _returnType = serviceMethod.getReturnType();
-          boolean _notEquals = (!Objects.equal(_returnType, null));
-          if (_notEquals) {
-            _builder.append("\t");
-            _builder.append("\t");
-            _builder.append("callback.onSuccess(this.");
-            String _name_4 = service.getName();
-            String _firstLower_4 = StringExtensions.toFirstLower(_name_4);
-            _builder.append(_firstLower_4, "\t\t");
-            _builder.append(".");
-            String _name_5 = serviceMethod.getName();
-            String _firstLower_5 = StringExtensions.toFirstLower(_name_5);
-            _builder.append(_firstLower_5, "\t\t");
-            _builder.append("(");
-            {
-              EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
-              boolean _hasElements = false;
-              for(final MethodParameter methodParameter : _methodParameters) {
-                if (!_hasElements) {
-                  _hasElements = true;
-                } else {
-                  _builder.appendImmediate(", ", "\t\t");
-                }
-                String _name_6 = methodParameter.getName();
-                String _firstLower_6 = StringExtensions.toFirstLower(_name_6);
-                _builder.append(_firstLower_6, "\t\t");
-              }
-            }
-            _builder.append("));");
-            _builder.newLineIfNotEmpty();
-          } else {
-            _builder.append("\t");
-            _builder.append("\t");
-            _builder.append("this.");
-            String _name_7 = service.getName();
-            String _firstLower_7 = StringExtensions.toFirstLower(_name_7);
-            _builder.append(_firstLower_7, "\t\t");
-            _builder.append(".");
-            String _name_8 = serviceMethod.getName();
-            String _firstLower_8 = StringExtensions.toFirstLower(_name_8);
-            _builder.append(_firstLower_8, "\t\t");
-            _builder.append("(");
-            {
-              EList<MethodParameter> _methodParameters_1 = serviceMethod.getMethodParameters();
-              boolean _hasElements_1 = false;
-              for(final MethodParameter methodParameter_1 : _methodParameters_1) {
-                if (!_hasElements_1) {
-                  _hasElements_1 = true;
-                } else {
-                  _builder.appendImmediate(", ", "\t\t");
-                }
-                String _name_9 = methodParameter_1.getName();
-                String _firstLower_9 = StringExtensions.toFirstLower(_name_9);
-                _builder.append(_firstLower_9, "\t\t");
-              }
-            }
-            _builder.append(");");
-            _builder.newLineIfNotEmpty();
-            _builder.append("\t");
-            _builder.append("\t");
-            _builder.append("callback.onSuccess(null);");
-            _builder.newLine();
-          }
-        }
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("catch (Exception e)");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("{");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t\t");
-        _builder.append("callback.onFailure(e);");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("}");
-        _builder.newLine();
-      }
-    }
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.client.web;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Iterables;
+import com.google.gwt.user.client.rpc.RemoteService;
+import com.google.gwt.user.client.rpc.ServiceDefTarget;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.client.ClientTypeUtils;
+import io.pelle.mango.dsl.generator.client.web.BaseServices;
+import io.pelle.mango.dsl.mango.GenericTypeDefinition;
+import io.pelle.mango.dsl.mango.MethodParameter;
+import io.pelle.mango.dsl.mango.MethodReturnType;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.Service;
+import io.pelle.mango.dsl.mango.ServiceMethod;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+/**
+ * Generates code from your model files on save.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
+ */
+@SuppressWarnings("all")
+public class GWTServices extends BaseServices {
+  @Inject
+  @Extension
+  private ClientNameUtils _clientNameUtils;
+  
+  @Inject
+  @Extension
+  private ClientTypeUtils _clientTypeUtils;
+  
+  public CharSequence gwtRemoteServiceLocator(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _modelPackageName = this._clientNameUtils.modelPackageName(model);
+    _builder.append(_modelPackageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public class ");
+    String _gwtRemoteServiceLocatorName = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
+    _builder.append(_gwtRemoteServiceLocatorName, "");
+    _builder.append(" implements ");
+    String _gwtRemoteServiceLocatorInterfaceName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceName(model);
+    _builder.append(_gwtRemoteServiceLocatorInterfaceName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("private static final ");
+    String _gwtRemoteServiceLocatorName_1 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
+    _builder.append(_gwtRemoteServiceLocatorName_1, "    ");
+    _builder.append(" instance = new ");
+    String _gwtRemoteServiceLocatorName_2 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
+    _builder.append(_gwtRemoteServiceLocatorName_2, "    ");
+    _builder.append("();");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("private ");
+    String _gwtRemoteServiceLocatorName_3 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
+    _builder.append(_gwtRemoteServiceLocatorName_3, "    ");
+    _builder.append("() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("public static ");
+    String _gwtRemoteServiceLocatorName_4 = this._clientNameUtils.gwtRemoteServiceLocatorName(model);
+    _builder.append(_gwtRemoteServiceLocatorName_4, "    ");
+    _builder.append(" getInstance() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("        ");
+    _builder.append("return instance;");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.newLine();
+    _builder.append("   \t");
+    _builder.append("private String remoteBaseUrl = null;");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public void setRemoteBaseUrl(String remoteBaseUrl) {");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("this.remoteBaseUrl = remoteBaseUrl;");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("public String getModuleBaseUrl()");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("{");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("if (remoteBaseUrl != null) {");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("return remoteBaseUrl;");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("else {");
+    _builder.newLine();
+    _builder.append("\t    \t");
+    _builder.append("return com.google.gwt.core.client.GWT.getModuleBaseURL() + \"../remote/rpc\"; ");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("} ");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
+      for(final Service service : _filter) {
+        _builder.append("\t");
+        _builder.append("public ");
+        String _gwtAsyncServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
+        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName, "\t");
+        _builder.append(" get");
+        String _serviceName = this._clientNameUtils.serviceName(service);
+        _builder.append(_serviceName, "\t");
+        _builder.append("() {");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("final ");
+        String _gwtAsyncServiceInterfaceFullQualifiedName_1 = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
+        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName_1, "\t\t");
+        _builder.append(" service = (");
+        String _gwtAsyncServiceInterfaceFullQualifiedName_2 = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
+        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName_2, "\t\t");
+        _builder.append(") com.google.gwt.core.client.GWT.create(");
+        String _gwtServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtServiceInterfaceFullQualifiedName(service);
+        _builder.append(_gwtServiceInterfaceFullQualifiedName, "\t\t");
+        _builder.append(".class);");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        String _name = ServiceDefTarget.class.getName();
+        _builder.append(_name, "\t\t");
+        _builder.append(" formEndpoint = (");
+        String _name_1 = ServiceDefTarget.class.getName();
+        _builder.append(_name_1, "\t\t");
+        _builder.append(") service;");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("formEndpoint.setServiceEntryPoint(getModuleBaseUrl() + \"/");
+        String _serviceSpringName = this._clientNameUtils.serviceSpringName(service);
+        _builder.append(_serviceSpringName, "\t\t");
+        _builder.append("\");");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("return service;");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+      }
+    }
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence gwtRemoteServiceLocatorInterface(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _modelPackageName = this._clientNameUtils.modelPackageName(model);
+    _builder.append(_modelPackageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public interface ");
+    String _gwtRemoteServiceLocatorInterfaceName = this._clientNameUtils.gwtRemoteServiceLocatorInterfaceName(model);
+    _builder.append(_gwtRemoteServiceLocatorInterfaceName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
+      for(final Service service : _filter) {
+        _builder.append("\t");
+        String _gwtAsyncServiceInterfaceFullQualifiedName = this._clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service);
+        _builder.append(_gwtAsyncServiceInterfaceFullQualifiedName, "\t");
+        _builder.append(" get");
+        String _serviceName = this._clientNameUtils.serviceName(service);
+        _builder.append(_serviceName, "\t");
+        _builder.append("();");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence gwtServiceInterface(final Service service) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(service);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public interface ");
+    String _gwtServiceInterfaceName = this._clientNameUtils.gwtServiceInterfaceName(service);
+    _builder.append(_gwtServiceInterfaceName, "");
+    _builder.append(" extends ");
+    String _name = RemoteService.class.getName();
+    _builder.append(_name, "");
+    _builder.append(", ");
+    String _serviceInterfaceFullQualifiedName = this._clientNameUtils.serviceInterfaceFullQualifiedName(service);
+    _builder.append(_serviceInterfaceFullQualifiedName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence gwtAsyncServiceInterface(final Service service) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(service);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public interface ");
+    String _gwtAsyncServiceInterfaceName = this._clientNameUtils.gwtAsyncServiceInterfaceName(service);
+    _builder.append(_gwtAsyncServiceInterfaceName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
+      for(final ServiceMethod remoteMethod : _remoteMethods) {
+        _builder.append("\t");
+        CharSequence _serviceMethodAsync = this.serviceMethodAsync(remoteMethod);
+        _builder.append(_serviceMethodAsync, "\t");
+        _builder.append(";");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence serviceMethodAsync(final ServiceMethod serviceMethod) {
+    StringConcatenation _builder = new StringConcatenation();
+    GenericTypeDefinition _genericTypeDefinition = serviceMethod.getGenericTypeDefinition();
+    String _genericTypeDefinition_1 = this._clientTypeUtils.genericTypeDefinition(_genericTypeDefinition);
+    _builder.append(_genericTypeDefinition_1, "");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
+      int _size = _methodParameters.size();
+      boolean _equals = (_size == 0);
+      if (_equals) {
+        _builder.append("void ");
+        String _name = serviceMethod.getName();
+        String _firstLower = StringExtensions.toFirstLower(_name);
+        _builder.append(_firstLower, "");
+        _builder.append("(");
+        CharSequence _asyncCallback = this.asyncCallback(serviceMethod);
+        _builder.append(_asyncCallback, "");
+        _builder.append(")");
+        _builder.newLineIfNotEmpty();
+      } else {
+        _builder.append("void ");
+        String _name_1 = serviceMethod.getName();
+        String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
+        _builder.append(_firstLower_1, "");
+        _builder.append("(");
+        EList<MethodParameter> _methodParameters_1 = serviceMethod.getMethodParameters();
+        CharSequence _methodParameters_2 = this.methodParameters(_methodParameters_1);
+        _builder.append(_methodParameters_2, "");
+        _builder.append(", ");
+        CharSequence _asyncCallback_1 = this.asyncCallback(serviceMethod);
+        _builder.append(_asyncCallback_1, "");
+        _builder.append(")");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  public CharSequence asyncCallback(final ServiceMethod serviceMethod) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      MethodReturnType _returnType = serviceMethod.getReturnType();
+      boolean _notEquals = (!Objects.equal(_returnType, null));
+      if (_notEquals) {
+        _builder.append("com.google.gwt.user.client.rpc.AsyncCallback<");
+        MethodReturnType _returnType_1 = serviceMethod.getReturnType();
+        String _type = this._clientTypeUtils.getType(_returnType_1);
+        _builder.append(_type, "");
+        _builder.append("> callback");
+        _builder.newLineIfNotEmpty();
+      } else {
+        _builder.append("com.google.gwt.user.client.rpc.AsyncCallback<Void> callback");
+        _builder.newLine();
+      }
+    }
+    return _builder;
+  }
+  
+  public CharSequence gwtRemoteServiceAsyncAdapter(final Service service) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.newLine();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(service);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public class ");
+    String _gwtAsyncAdapterName = this._clientNameUtils.gwtAsyncAdapterName(service);
+    _builder.append(_gwtAsyncAdapterName, "");
+    _builder.append(" implements ");
+    String _gwtAsyncAdapterFullQualifiedName = this._clientNameUtils.gwtAsyncAdapterFullQualifiedName(service);
+    _builder.append(_gwtAsyncAdapterFullQualifiedName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("private ");
+    String _serviceInterfaceName = this._clientNameUtils.serviceInterfaceName(service);
+    _builder.append(_serviceInterfaceName, "\t");
+    _builder.append(" ");
+    String _name = service.getName();
+    String _firstLower = StringExtensions.toFirstLower(_name);
+    _builder.append(_firstLower, "\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("public ");
+    String _gwtAsyncAdapterName_1 = this._clientNameUtils.gwtAsyncAdapterName(service);
+    _builder.append(_gwtAsyncAdapterName_1, "\t");
+    _builder.append("(");
+    String _serviceInterfaceName_1 = this._clientNameUtils.serviceInterfaceName(service);
+    _builder.append(_serviceInterfaceName_1, "\t");
+    _builder.append(" ");
+    String _name_1 = service.getName();
+    String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
+    _builder.append(_firstLower_1, "\t");
+    _builder.append(")");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("{");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("this.");
+    String _name_2 = service.getName();
+    String _firstLower_2 = StringExtensions.toFirstLower(_name_2);
+    _builder.append(_firstLower_2, "\t\t");
+    _builder.append(" = ");
+    String _name_3 = service.getName();
+    String _firstLower_3 = StringExtensions.toFirstLower(_name_3);
+    _builder.append(_firstLower_3, "\t\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
+      for(final ServiceMethod serviceMethod : _remoteMethods) {
+        _builder.append("\t");
+        _builder.append("public ");
+        CharSequence _serviceMethodAsync = this.serviceMethodAsync(serviceMethod);
+        _builder.append(_serviceMethodAsync, "\t");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("try");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        {
+          MethodReturnType _returnType = serviceMethod.getReturnType();
+          boolean _notEquals = (!Objects.equal(_returnType, null));
+          if (_notEquals) {
+            _builder.append("\t");
+            _builder.append("\t");
+            _builder.append("callback.onSuccess(this.");
+            String _name_4 = service.getName();
+            String _firstLower_4 = StringExtensions.toFirstLower(_name_4);
+            _builder.append(_firstLower_4, "\t\t");
+            _builder.append(".");
+            String _name_5 = serviceMethod.getName();
+            String _firstLower_5 = StringExtensions.toFirstLower(_name_5);
+            _builder.append(_firstLower_5, "\t\t");
+            _builder.append("(");
+            {
+              EList<MethodParameter> _methodParameters = serviceMethod.getMethodParameters();
+              boolean _hasElements = false;
+              for(final MethodParameter methodParameter : _methodParameters) {
+                if (!_hasElements) {
+                  _hasElements = true;
+                } else {
+                  _builder.appendImmediate(", ", "\t\t");
+                }
+                String _name_6 = methodParameter.getName();
+                String _firstLower_6 = StringExtensions.toFirstLower(_name_6);
+                _builder.append(_firstLower_6, "\t\t");
+              }
+            }
+            _builder.append("));");
+            _builder.newLineIfNotEmpty();
+          } else {
+            _builder.append("\t");
+            _builder.append("\t");
+            _builder.append("this.");
+            String _name_7 = service.getName();
+            String _firstLower_7 = StringExtensions.toFirstLower(_name_7);
+            _builder.append(_firstLower_7, "\t\t");
+            _builder.append(".");
+            String _name_8 = serviceMethod.getName();
+            String _firstLower_8 = StringExtensions.toFirstLower(_name_8);
+            _builder.append(_firstLower_8, "\t\t");
+            _builder.append("(");
+            {
+              EList<MethodParameter> _methodParameters_1 = serviceMethod.getMethodParameters();
+              boolean _hasElements_1 = false;
+              for(final MethodParameter methodParameter_1 : _methodParameters_1) {
+                if (!_hasElements_1) {
+                  _hasElements_1 = true;
+                } else {
+                  _builder.appendImmediate(", ", "\t\t");
+                }
+                String _name_9 = methodParameter_1.getName();
+                String _firstLower_9 = StringExtensions.toFirstLower(_name_9);
+                _builder.append(_firstLower_9, "\t\t");
+              }
+            }
+            _builder.append(");");
+            _builder.newLineIfNotEmpty();
+            _builder.append("\t");
+            _builder.append("\t");
+            _builder.append("callback.onSuccess(null);");
+            _builder.newLine();
+          }
+        }
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("catch (Exception e)");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("{");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t\t");
+        _builder.append("callback.onFailure(e);");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("}");
+        _builder.newLine();
+      }
+    }
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/Services.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/Services.java
index 2d84971..0ab32af 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/Services.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/client/web/Services.java
@@ -1,52 +1,52 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.client.web;
-
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.client.web.BaseServices;
-import io.pelle.mango.dsl.mango.Service;
-import io.pelle.mango.dsl.mango.ServiceMethod;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-/**
- * Generates code from your model files on save.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
- */
-@SuppressWarnings("all")
-public class Services extends BaseServices {
-  @Inject
-  @Extension
-  private ClientNameUtils _clientNameUtils;
-  
-  public CharSequence serviceInterface(final Service service) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._clientNameUtils.getPackageName(service);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("public interface ");
-    String _serviceInterfaceName = this._clientNameUtils.serviceInterfaceName(service);
-    _builder.append(_serviceInterfaceName, "");
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    {
-      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
-      for(final ServiceMethod remoteMethod : _remoteMethods) {
-        _builder.append("\t");
-        CharSequence _serviceMethod = this.serviceMethod(remoteMethod);
-        _builder.append(_serviceMethod, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.client.web;
+
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.client.web.BaseServices;
+import io.pelle.mango.dsl.mango.Service;
+import io.pelle.mango.dsl.mango.ServiceMethod;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+/**
+ * Generates code from your model files on save.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
+ */
+@SuppressWarnings("all")
+public class Services extends BaseServices {
+  @Inject
+  @Extension
+  private ClientNameUtils _clientNameUtils;
+  
+  public CharSequence serviceInterface(final Service service) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._clientNameUtils.getPackageName(service);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("public interface ");
+    String _serviceInterfaceName = this._clientNameUtils.serviceInterfaceName(service);
+    _builder.append(_serviceInterfaceName, "");
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    {
+      EList<ServiceMethod> _remoteMethods = service.getRemoteMethods();
+      for(final ServiceMethod remoteMethod : _remoteMethods) {
+        _builder.append("\t");
+        CharSequence _serviceMethod = this.serviceMethod(remoteMethod);
+        _builder.append(_serviceMethod, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.EntityGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.EntityGenerator.java._trace
index 382ea37..a7ff079 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.EntityGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.EntityGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerGenerator.java._trace
index 60058b6..a474de7 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerNameUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerNameUtils.java._trace
index ff4d1f9..c9102d8 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerNameUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.ServerNameUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.SpringGenerator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.SpringGenerator.java._trace
index f25f572..e5281a4 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.SpringGenerator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/.SpringGenerator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/EntityGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/EntityGenerator.java
index 2b028ba..652c85c 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/EntityGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/EntityGenerator.java
@@ -1,309 +1,309 @@
-package io.pelle.mango.dsl.generator.server;
-
-import com.google.common.base.Objects;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.vo.EntityDescriptor;
-import io.pelle.mango.client.base.vo.IEntityDescriptor;
-import io.pelle.mango.client.base.vo.IVOEntity;
-import io.pelle.mango.client.base.vo.LongAttributeDescriptor;
-import io.pelle.mango.dsl.generator.BaseEntityGenerator;
-import io.pelle.mango.dsl.generator.util.AttributeUtils;
-import io.pelle.mango.dsl.generator.util.EntityUtils;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.generator.util.TypeUtils;
-import io.pelle.mango.dsl.mango.Cardinality;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import io.pelle.mango.dsl.mango.EntityEntityAttribute;
-import io.pelle.mango.dsl.mango.StringEntityAttribute;
-import io.pelle.mango.server.base.BaseEntity;
-import java.util.Arrays;
-import org.eclipse.emf.common.util.EList;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.common.types.JvmType;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-@SuppressWarnings("all")
-public class EntityGenerator extends BaseEntityGenerator {
-  @Inject
-  @Extension
-  private AttributeUtils _attributeUtils;
-  
-  @Inject
-  @Extension
-  private NameUtils _nameUtils;
-  
-  @Inject
-  @Extension
-  private TypeUtils _typeUtils;
-  
-  @Inject
-  @Extension
-  private EntityUtils _entityUtils;
-  
-  public CharSequence compileEntity(final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("package ");
-    String _packageName = this._nameUtils.getPackageName(entity);
-    _builder.append(_packageName, "");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("import javax.persistence.*;");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("@Entity");
-    _builder.newLine();
-    _builder.append("@Table(name = \"");
-    String _entityTableName = this._nameUtils.entityTableName(entity);
-    _builder.append(_entityTableName, "");
-    _builder.append("\")");
-    _builder.newLineIfNotEmpty();
-    {
-      boolean _isExtendedByOtherEntity = this._entityUtils.isExtendedByOtherEntity(entity);
-      if (_isExtendedByOtherEntity) {
-        _builder.append("@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)");
-        _builder.newLine();
-        _builder.append("@javax.persistence.PrimaryKeyJoinColumn(name=\"");
-        String _entityTableIdColumnName = this._nameUtils.entityTableIdColumnName(entity);
-        _builder.append(_entityTableIdColumnName, "");
-        _builder.append("\")");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    {
-      Entity _extends = entity.getExtends();
-      boolean _notEquals = (!Objects.equal(_extends, null));
-      if (_notEquals) {
-      } else {
-      }
-    }
-    _builder.append("public class ");
-    String _entityName = this._nameUtils.entityName(entity);
-    _builder.append(_entityName, "");
-    _builder.append(" extends ");
-    {
-      Entity _extends_1 = entity.getExtends();
-      boolean _notEquals_1 = (!Objects.equal(_extends_1, null));
-      if (_notEquals_1) {
-        Entity _extends_2 = entity.getExtends();
-        String _entityFullQualifiedName = this._nameUtils.entityFullQualifiedName(_extends_2);
-        _builder.append(_entityFullQualifiedName, "");
-      } else {
-        JvmType _jvmtype = entity.getJvmtype();
-        boolean _notEquals_2 = (!Objects.equal(_jvmtype, null));
-        if (_notEquals_2) {
-          JvmType _jvmtype_1 = entity.getJvmtype();
-          String _qualifiedName = _jvmtype_1.getQualifiedName();
-          _builder.append(_qualifiedName, "");
-        } else {
-          String _name = BaseEntity.class.getName();
-          _builder.append(_name, "");
-        }
-      }
-    }
-    _builder.append(" {");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public static final ");
-    String _name_1 = IEntityDescriptor.class.getName();
-    _builder.append(_name_1, "\t\t");
-    _builder.append("<");
-    String _entityFullQualifiedName_1 = this._nameUtils.entityFullQualifiedName(entity);
-    _builder.append(_entityFullQualifiedName_1, "\t\t");
-    _builder.append("> ");
-    String _entityConstantName = this._nameUtils.entityConstantName(entity);
-    _builder.append(_entityConstantName, "\t\t");
-    _builder.append(" = new ");
-    String _name_2 = EntityDescriptor.class.getName();
-    _builder.append(_name_2, "\t\t");
-    _builder.append("<");
-    String _type = this._typeUtils.getType(entity);
-    _builder.append(_type, "\t\t");
-    _builder.append(">(");
-    String _typeClass = this._typeUtils.getTypeClass(entity);
-    _builder.append(_typeClass, "\t\t");
-    _builder.append(");");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("public static ");
-    String _name_3 = LongAttributeDescriptor.class.getName();
-    _builder.append(_name_3, "\t\t");
-    _builder.append(" ");
-    String _attributeConstantName = this._nameUtils.attributeConstantName(IVOEntity.ID_FIELD_NAME);
-    _builder.append(_attributeConstantName, "\t\t");
-    _builder.append(" = new ");
-    String _name_4 = LongAttributeDescriptor.class.getName();
-    _builder.append(_name_4, "\t\t");
-    _builder.append("(");
-    String _entityConstantName_1 = this._nameUtils.entityConstantName(entity);
-    _builder.append(_entityConstantName_1, "\t\t");
-    _builder.append(", \"");
-    _builder.append(IVOEntity.ID_FIELD_NAME, "\t\t");
-    _builder.append("\");");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    CharSequence _attributeDescriptorsFromExtends = this.attributeDescriptorsFromExtends(entity);
-    _builder.append(_attributeDescriptorsFromExtends, "\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t\t");
-    CharSequence _compileGetAttributeDescriptors = this.compileGetAttributeDescriptors(entity);
-    _builder.append(_compileGetAttributeDescriptors, "\t\t");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    {
-      Entity _extends_3 = entity.getExtends();
-      boolean _equals = Objects.equal(_extends_3, null);
-      if (_equals) {
-        _builder.append("\t");
-        _builder.append("@Id");
-        _builder.newLine();
-        _builder.append("\t");
-        _builder.append("@Column(name = \"");
-        String _entityTableIdColumnName_1 = this._nameUtils.entityTableIdColumnName(entity);
-        _builder.append(_entityTableIdColumnName_1, "\t");
-        _builder.append("\")");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("@GeneratedValue(strategy = GenerationType.TABLE, generator = \"");
-        String _entityTableIdSequenceName = this._nameUtils.entityTableIdSequenceName(entity);
-        _builder.append(_entityTableIdSequenceName, "\t");
-        _builder.append("\")");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("@SequenceGenerator(name = \"");
-        String _entityTableIdSequenceName_1 = this._nameUtils.entityTableIdSequenceName(entity);
-        _builder.append(_entityTableIdSequenceName_1, "\t");
-        _builder.append("\", sequenceName = \"");
-        String _entityTableIdSequenceName_2 = this._nameUtils.entityTableIdSequenceName(entity);
-        _builder.append(_entityTableIdSequenceName_2, "\t");
-        _builder.append("\", allocationSize = 1)");
-        _builder.newLineIfNotEmpty();
-        _builder.append("\t");
-        _builder.append("private long id;");
-        _builder.newLine();
-        _builder.append("\t");
-        CharSequence _terSetter = this._attributeUtils.getterSetter("long", "id");
-        _builder.append(_terSetter, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t");
-    _builder.newLine();
-    {
-      EList<EntityAttribute> _attributes = entity.getAttributes();
-      for(final EntityAttribute attribute : _attributes) {
-        _builder.append("\t");
-        CharSequence _compileEntityAttribute = this.compileEntityAttribute(attribute);
-        _builder.append(_compileEntityAttribute, "\t");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.newLine();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence compileEntityAttribute(final EntityAttribute entityAttribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    CharSequence _changeTrackingAttributeGetterSetter = this.changeTrackingAttributeGetterSetter(entityAttribute);
-    _builder.append(_changeTrackingAttributeGetterSetter, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _compileEntityAttributeJpaAnnotations(final EntityAttribute entityAttribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("@Column(name = \"");
-    String _entityTableColumnName = this._nameUtils.entityTableColumnName(entityAttribute);
-    _builder.append(_entityTableColumnName, "");
-    _builder.append("\")");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _compileEntityAttributeJpaAnnotations(final StringEntityAttribute entityAttribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Cardinality _cardinality = entityAttribute.getCardinality();
-      boolean _equals = Objects.equal(_cardinality, Cardinality.ONETOMANY);
-      if (_equals) {
-        _builder.append("@javax.persistence.ElementCollection(fetch=javax.persistence.FetchType.EAGER)");
-        _builder.newLine();
-      } else {
-        _builder.append("@Column(name = \"");
-        String _entityTableColumnName = this._nameUtils.entityTableColumnName(entityAttribute);
-        _builder.append(_entityTableColumnName, "");
-        _builder.append("\")");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  protected CharSequence _compileEntityAttributeJpaAnnotations(final EntityEntityAttribute entityAttribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Cardinality _cardinality = entityAttribute.getCardinality();
-      boolean _equals = Objects.equal(_cardinality, Cardinality.ONETOMANY);
-      if (_equals) {
-        _builder.append("@OneToMany()");
-        _builder.newLine();
-      } else {
-        _builder.append("@OneToOne()");
-        _builder.newLine();
-      }
-    }
-    return _builder;
-  }
-  
-  public CharSequence changeTrackingAttributeGetterSetter(final EntityAttribute attribute) {
-    StringConcatenation _builder = new StringConcatenation();
-    CharSequence _compileEntityAttributeJpaAnnotations = this.compileEntityAttributeJpaAnnotations(attribute);
-    _builder.append(_compileEntityAttributeJpaAnnotations, "");
-    _builder.newLineIfNotEmpty();
-    String _type = this._typeUtils.getType(attribute);
-    String _name = attribute.getName();
-    String _initializer = this._typeUtils.getInitializer(attribute);
-    CharSequence _attribute = this._attributeUtils.attribute(_type, _name, _initializer);
-    _builder.append(_attribute, "");
-    _builder.newLineIfNotEmpty();
-    Entity _parentEntity = this._attributeUtils.getParentEntity(attribute);
-    CharSequence _compileEntityAttributeDescriptor = this._typeUtils.compileEntityAttributeDescriptor(attribute, _parentEntity);
-    _builder.append(_compileEntityAttributeDescriptor, "");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    String _type_1 = this._typeUtils.getType(attribute);
-    String _name_1 = attribute.getName();
-    String _attributeName = this._nameUtils.attributeName(_name_1);
-    CharSequence _ter = this._attributeUtils.getter(_type_1, _attributeName);
-    _builder.append(_ter, "");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    String _type_2 = this._typeUtils.getType(attribute);
-    String _name_2 = attribute.getName();
-    String _attributeName_1 = this._nameUtils.attributeName(_name_2);
-    CharSequence _changeTrackingSetter = this._attributeUtils.changeTrackingSetter(_type_2, _attributeName_1);
-    _builder.append(_changeTrackingSetter, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence compileEntityAttributeJpaAnnotations(final EntityAttribute entityAttribute) {
-    if (entityAttribute instanceof StringEntityAttribute) {
-      return _compileEntityAttributeJpaAnnotations((StringEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof EntityEntityAttribute) {
-      return _compileEntityAttributeJpaAnnotations((EntityEntityAttribute)entityAttribute);
-    } else if (entityAttribute != null) {
-      return _compileEntityAttributeJpaAnnotations(entityAttribute);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(entityAttribute).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.server;
+
+import com.google.common.base.Objects;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.vo.EntityDescriptor;
+import io.pelle.mango.client.base.vo.IEntityDescriptor;
+import io.pelle.mango.client.base.vo.IVOEntity;
+import io.pelle.mango.client.base.vo.LongAttributeDescriptor;
+import io.pelle.mango.dsl.generator.BaseEntityGenerator;
+import io.pelle.mango.dsl.generator.util.AttributeUtils;
+import io.pelle.mango.dsl.generator.util.EntityUtils;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.generator.util.TypeUtils;
+import io.pelle.mango.dsl.mango.Cardinality;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import io.pelle.mango.dsl.mango.EntityEntityAttribute;
+import io.pelle.mango.dsl.mango.StringEntityAttribute;
+import io.pelle.mango.server.base.BaseEntity;
+import java.util.Arrays;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.common.types.JvmType;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+@SuppressWarnings("all")
+public class EntityGenerator extends BaseEntityGenerator {
+  @Inject
+  @Extension
+  private AttributeUtils _attributeUtils;
+  
+  @Inject
+  @Extension
+  private NameUtils _nameUtils;
+  
+  @Inject
+  @Extension
+  private TypeUtils _typeUtils;
+  
+  @Inject
+  @Extension
+  private EntityUtils _entityUtils;
+  
+  public CharSequence compileEntity(final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("package ");
+    String _packageName = this._nameUtils.getPackageName(entity);
+    _builder.append(_packageName, "");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("import javax.persistence.*;");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("@Entity");
+    _builder.newLine();
+    _builder.append("@Table(name = \"");
+    String _entityTableName = this._nameUtils.entityTableName(entity);
+    _builder.append(_entityTableName, "");
+    _builder.append("\")");
+    _builder.newLineIfNotEmpty();
+    {
+      boolean _isExtendedByOtherEntity = this._entityUtils.isExtendedByOtherEntity(entity);
+      if (_isExtendedByOtherEntity) {
+        _builder.append("@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)");
+        _builder.newLine();
+        _builder.append("@javax.persistence.PrimaryKeyJoinColumn(name=\"");
+        String _entityTableIdColumnName = this._nameUtils.entityTableIdColumnName(entity);
+        _builder.append(_entityTableIdColumnName, "");
+        _builder.append("\")");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    {
+      Entity _extends = entity.getExtends();
+      boolean _notEquals = (!Objects.equal(_extends, null));
+      if (_notEquals) {
+      } else {
+      }
+    }
+    _builder.append("public class ");
+    String _entityName = this._nameUtils.entityName(entity);
+    _builder.append(_entityName, "");
+    _builder.append(" extends ");
+    {
+      Entity _extends_1 = entity.getExtends();
+      boolean _notEquals_1 = (!Objects.equal(_extends_1, null));
+      if (_notEquals_1) {
+        Entity _extends_2 = entity.getExtends();
+        String _entityFullQualifiedName = this._nameUtils.entityFullQualifiedName(_extends_2);
+        _builder.append(_entityFullQualifiedName, "");
+      } else {
+        JvmType _jvmtype = entity.getJvmtype();
+        boolean _notEquals_2 = (!Objects.equal(_jvmtype, null));
+        if (_notEquals_2) {
+          JvmType _jvmtype_1 = entity.getJvmtype();
+          String _qualifiedName = _jvmtype_1.getQualifiedName();
+          _builder.append(_qualifiedName, "");
+        } else {
+          String _name = BaseEntity.class.getName();
+          _builder.append(_name, "");
+        }
+      }
+    }
+    _builder.append(" {");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public static final ");
+    String _name_1 = IEntityDescriptor.class.getName();
+    _builder.append(_name_1, "\t\t");
+    _builder.append("<");
+    String _entityFullQualifiedName_1 = this._nameUtils.entityFullQualifiedName(entity);
+    _builder.append(_entityFullQualifiedName_1, "\t\t");
+    _builder.append("> ");
+    String _entityConstantName = this._nameUtils.entityConstantName(entity);
+    _builder.append(_entityConstantName, "\t\t");
+    _builder.append(" = new ");
+    String _name_2 = EntityDescriptor.class.getName();
+    _builder.append(_name_2, "\t\t");
+    _builder.append("<");
+    String _type = this._typeUtils.getType(entity);
+    _builder.append(_type, "\t\t");
+    _builder.append(">(");
+    String _typeClass = this._typeUtils.getTypeClass(entity);
+    _builder.append(_typeClass, "\t\t");
+    _builder.append(");");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("public static ");
+    String _name_3 = LongAttributeDescriptor.class.getName();
+    _builder.append(_name_3, "\t\t");
+    _builder.append(" ");
+    String _attributeConstantName = this._nameUtils.attributeConstantName(IVOEntity.ID_FIELD_NAME);
+    _builder.append(_attributeConstantName, "\t\t");
+    _builder.append(" = new ");
+    String _name_4 = LongAttributeDescriptor.class.getName();
+    _builder.append(_name_4, "\t\t");
+    _builder.append("(");
+    String _entityConstantName_1 = this._nameUtils.entityConstantName(entity);
+    _builder.append(_entityConstantName_1, "\t\t");
+    _builder.append(", \"");
+    _builder.append(IVOEntity.ID_FIELD_NAME, "\t\t");
+    _builder.append("\");");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    CharSequence _attributeDescriptorsFromExtends = this.attributeDescriptorsFromExtends(entity);
+    _builder.append(_attributeDescriptorsFromExtends, "\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t\t");
+    CharSequence _compileGetAttributeDescriptors = this.compileGetAttributeDescriptors(entity);
+    _builder.append(_compileGetAttributeDescriptors, "\t\t");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    {
+      Entity _extends_3 = entity.getExtends();
+      boolean _equals = Objects.equal(_extends_3, null);
+      if (_equals) {
+        _builder.append("\t");
+        _builder.append("@Id");
+        _builder.newLine();
+        _builder.append("\t");
+        _builder.append("@Column(name = \"");
+        String _entityTableIdColumnName_1 = this._nameUtils.entityTableIdColumnName(entity);
+        _builder.append(_entityTableIdColumnName_1, "\t");
+        _builder.append("\")");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("@GeneratedValue(strategy = GenerationType.TABLE, generator = \"");
+        String _entityTableIdSequenceName = this._nameUtils.entityTableIdSequenceName(entity);
+        _builder.append(_entityTableIdSequenceName, "\t");
+        _builder.append("\")");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("@SequenceGenerator(name = \"");
+        String _entityTableIdSequenceName_1 = this._nameUtils.entityTableIdSequenceName(entity);
+        _builder.append(_entityTableIdSequenceName_1, "\t");
+        _builder.append("\", sequenceName = \"");
+        String _entityTableIdSequenceName_2 = this._nameUtils.entityTableIdSequenceName(entity);
+        _builder.append(_entityTableIdSequenceName_2, "\t");
+        _builder.append("\", allocationSize = 1)");
+        _builder.newLineIfNotEmpty();
+        _builder.append("\t");
+        _builder.append("private long id;");
+        _builder.newLine();
+        _builder.append("\t");
+        CharSequence _terSetter = this._attributeUtils.getterSetter("long", "id");
+        _builder.append(_terSetter, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t");
+    _builder.newLine();
+    {
+      EList<EntityAttribute> _attributes = entity.getAttributes();
+      for(final EntityAttribute attribute : _attributes) {
+        _builder.append("\t");
+        CharSequence _compileEntityAttribute = this.compileEntityAttribute(attribute);
+        _builder.append(_compileEntityAttribute, "\t");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence compileEntityAttribute(final EntityAttribute entityAttribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    CharSequence _changeTrackingAttributeGetterSetter = this.changeTrackingAttributeGetterSetter(entityAttribute);
+    _builder.append(_changeTrackingAttributeGetterSetter, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _compileEntityAttributeJpaAnnotations(final EntityAttribute entityAttribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("@Column(name = \"");
+    String _entityTableColumnName = this._nameUtils.entityTableColumnName(entityAttribute);
+    _builder.append(_entityTableColumnName, "");
+    _builder.append("\")");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _compileEntityAttributeJpaAnnotations(final StringEntityAttribute entityAttribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Cardinality _cardinality = entityAttribute.getCardinality();
+      boolean _equals = Objects.equal(_cardinality, Cardinality.ONETOMANY);
+      if (_equals) {
+        _builder.append("@javax.persistence.ElementCollection(fetch=javax.persistence.FetchType.EAGER)");
+        _builder.newLine();
+      } else {
+        _builder.append("@Column(name = \"");
+        String _entityTableColumnName = this._nameUtils.entityTableColumnName(entityAttribute);
+        _builder.append(_entityTableColumnName, "");
+        _builder.append("\")");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  protected CharSequence _compileEntityAttributeJpaAnnotations(final EntityEntityAttribute entityAttribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Cardinality _cardinality = entityAttribute.getCardinality();
+      boolean _equals = Objects.equal(_cardinality, Cardinality.ONETOMANY);
+      if (_equals) {
+        _builder.append("@OneToMany()");
+        _builder.newLine();
+      } else {
+        _builder.append("@OneToOne()");
+        _builder.newLine();
+      }
+    }
+    return _builder;
+  }
+  
+  public CharSequence changeTrackingAttributeGetterSetter(final EntityAttribute attribute) {
+    StringConcatenation _builder = new StringConcatenation();
+    CharSequence _compileEntityAttributeJpaAnnotations = this.compileEntityAttributeJpaAnnotations(attribute);
+    _builder.append(_compileEntityAttributeJpaAnnotations, "");
+    _builder.newLineIfNotEmpty();
+    String _type = this._typeUtils.getType(attribute);
+    String _name = attribute.getName();
+    String _initializer = this._typeUtils.getInitializer(attribute);
+    CharSequence _attribute = this._attributeUtils.attribute(_type, _name, _initializer);
+    _builder.append(_attribute, "");
+    _builder.newLineIfNotEmpty();
+    Entity _parentEntity = this._attributeUtils.getParentEntity(attribute);
+    CharSequence _compileEntityAttributeDescriptor = this._typeUtils.compileEntityAttributeDescriptor(attribute, _parentEntity);
+    _builder.append(_compileEntityAttributeDescriptor, "");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    String _type_1 = this._typeUtils.getType(attribute);
+    String _name_1 = attribute.getName();
+    String _attributeName = this._nameUtils.attributeName(_name_1);
+    CharSequence _ter = this._attributeUtils.getter(_type_1, _attributeName);
+    _builder.append(_ter, "");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    String _type_2 = this._typeUtils.getType(attribute);
+    String _name_2 = attribute.getName();
+    String _attributeName_1 = this._nameUtils.attributeName(_name_2);
+    CharSequence _changeTrackingSetter = this._attributeUtils.changeTrackingSetter(_type_2, _attributeName_1);
+    _builder.append(_changeTrackingSetter, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence compileEntityAttributeJpaAnnotations(final EntityAttribute entityAttribute) {
+    if (entityAttribute instanceof StringEntityAttribute) {
+      return _compileEntityAttributeJpaAnnotations((StringEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof EntityEntityAttribute) {
+      return _compileEntityAttributeJpaAnnotations((EntityEntityAttribute)entityAttribute);
+    } else if (entityAttribute != null) {
+      return _compileEntityAttributeJpaAnnotations(entityAttribute);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(entityAttribute).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerGenerator.java
index e152ad1..add138a 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerGenerator.java
@@ -1,50 +1,50 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.server;
-
-import com.google.common.collect.Iterables;
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.server.ServerNameUtils;
-import io.pelle.mango.dsl.generator.server.service.GWTServices;
-import io.pelle.mango.dsl.generator.server.service.SpringServices;
-import io.pelle.mango.dsl.mango.Model;
-import javax.inject.Inject;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.emf.ecore.resource.Resource;
-import org.eclipse.xtext.generator.IFileSystemAccess;
-import org.eclipse.xtext.generator.IGenerator;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class ServerGenerator implements IGenerator {
-  @Inject
-  @Extension
-  private GWTServices _gWTServices;
-  
-  @Inject
-  @Extension
-  private SpringServices _springServices;
-  
-  @Inject
-  @Extension
-  private ServerNameUtils _serverNameUtils;
-  
-  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
-    TreeIterator<EObject> _allContents = resource.getAllContents();
-    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
-    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
-    for (final Model model : _filter) {
-      {
-        String _gwtRemoteServicesApplicationContextFullQualifiedFileName = this._serverNameUtils.gwtRemoteServicesApplicationContextFullQualifiedFileName(model);
-        CharSequence _gwtRemoteServicesApplicationContext = this._gWTServices.gwtRemoteServicesApplicationContext(model);
-        fsa.generateFile(_gwtRemoteServicesApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _gwtRemoteServicesApplicationContext);
-        String _serviceSpringNameApplicationContextFullQualifiedFileName = this._serverNameUtils.serviceSpringNameApplicationContextFullQualifiedFileName(model);
-        CharSequence _springServices = this._springServices.springServices(model);
-        fsa.generateFile(_serviceSpringNameApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _springServices);
-      }
-    }
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.server;
+
+import com.google.common.collect.Iterables;
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.server.ServerNameUtils;
+import io.pelle.mango.dsl.generator.server.service.GWTServices;
+import io.pelle.mango.dsl.generator.server.service.SpringServices;
+import io.pelle.mango.dsl.mango.Model;
+import javax.inject.Inject;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.resource.Resource;
+import org.eclipse.xtext.generator.IFileSystemAccess;
+import org.eclipse.xtext.generator.IGenerator;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class ServerGenerator implements IGenerator {
+  @Inject
+  @Extension
+  private GWTServices _gWTServices;
+  
+  @Inject
+  @Extension
+  private SpringServices _springServices;
+  
+  @Inject
+  @Extension
+  private ServerNameUtils _serverNameUtils;
+  
+  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
+    TreeIterator<EObject> _allContents = resource.getAllContents();
+    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
+    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
+    for (final Model model : _filter) {
+      {
+        String _gwtRemoteServicesApplicationContextFullQualifiedFileName = this._serverNameUtils.gwtRemoteServicesApplicationContextFullQualifiedFileName(model);
+        CharSequence _gwtRemoteServicesApplicationContext = this._gWTServices.gwtRemoteServicesApplicationContext(model);
+        fsa.generateFile(_gwtRemoteServicesApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _gwtRemoteServicesApplicationContext);
+        String _serviceSpringNameApplicationContextFullQualifiedFileName = this._serverNameUtils.serviceSpringNameApplicationContextFullQualifiedFileName(model);
+        CharSequence _springServices = this._springServices.springServices(model);
+        fsa.generateFile(_serviceSpringNameApplicationContextFullQualifiedFileName, GeneratorConstants.ENTITIES_GEN_OUTPUT, _springServices);
+      }
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerNameUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerNameUtils.java
index fb3e10e..54ec9fa 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerNameUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/ServerNameUtils.java
@@ -1,78 +1,78 @@
-package io.pelle.mango.dsl.generator.server;
-
-import io.pelle.mango.dsl.generator.GeneratorConstants;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.DictionaryEditor;
-import io.pelle.mango.dsl.mango.DictionarySearch;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.PackageDeclaration;
-import io.pelle.mango.dsl.mango.Service;
-import java.util.Arrays;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-@SuppressWarnings("all")
-public class ServerNameUtils extends NameUtils {
-  protected String _getPackageName(final PackageDeclaration packageDeclaration) {
-    String _xifexpression = null;
-    EObject _eContainer = packageDeclaration.eContainer();
-    if ((_eContainer instanceof Model)) {
-      String _name = packageDeclaration.getName();
-      String _packageName = this.getPackageName(_name);
-      String _plus = (_packageName + ".");
-      _xifexpression = (_plus + GeneratorConstants.SERVER_PACKAGE_POSTFIX);
-    } else {
-      EObject _eContainer_1 = packageDeclaration.eContainer();
-      String _packageName_1 = this.getPackageName(_eContainer_1);
-      String _name_1 = packageDeclaration.getName();
-      String _packageName_2 = this.getPackageName(_name_1);
-      _xifexpression = this.combinePackageName(_packageName_1, _packageName_2);
-    }
-    return _xifexpression;
-  }
-  
-  public String gwtRemoteServicesApplicationContextFullQualifiedFileName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "GWTRemoteServices-gen.xml");
-  }
-  
-  public String serviceSpringNameApplicationContextFullQualifiedFileName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "SpringServices-gen.xml");
-  }
-  
-  public String serviceImplFullQualifiedName(final Service service) {
-    String _packageName = this.getPackageName(service);
-    String _plus = (_packageName + ".");
-    String _serviceImplName = this.serviceImplName(service);
-    return (_plus + _serviceImplName);
-  }
-  
-  public String serviceImplName(final Service service) {
-    String _name = service.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "Impl");
-  }
-  
-  public String getPackageName(final Object packageDeclaration) {
-    if (packageDeclaration instanceof Dictionary) {
-      return _getPackageName((Dictionary)packageDeclaration);
-    } else if (packageDeclaration instanceof PackageDeclaration) {
-      return _getPackageName((PackageDeclaration)packageDeclaration);
-    } else if (packageDeclaration instanceof DictionaryEditor) {
-      return _getPackageName((DictionaryEditor)packageDeclaration);
-    } else if (packageDeclaration instanceof DictionarySearch) {
-      return _getPackageName((DictionarySearch)packageDeclaration);
-    } else if (packageDeclaration instanceof String) {
-      return _getPackageName((String)packageDeclaration);
-    } else if (packageDeclaration instanceof EObject) {
-      return _getPackageName((EObject)packageDeclaration);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(packageDeclaration).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.server;
+
+import io.pelle.mango.dsl.generator.GeneratorConstants;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.DictionaryEditor;
+import io.pelle.mango.dsl.mango.DictionarySearch;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.PackageDeclaration;
+import io.pelle.mango.dsl.mango.Service;
+import java.util.Arrays;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+@SuppressWarnings("all")
+public class ServerNameUtils extends NameUtils {
+  protected String _getPackageName(final PackageDeclaration packageDeclaration) {
+    String _xifexpression = null;
+    EObject _eContainer = packageDeclaration.eContainer();
+    if ((_eContainer instanceof Model)) {
+      String _name = packageDeclaration.getName();
+      String _packageName = this.getPackageName(_name);
+      String _plus = (_packageName + ".");
+      _xifexpression = (_plus + GeneratorConstants.SERVER_PACKAGE_POSTFIX);
+    } else {
+      EObject _eContainer_1 = packageDeclaration.eContainer();
+      String _packageName_1 = this.getPackageName(_eContainer_1);
+      String _name_1 = packageDeclaration.getName();
+      String _packageName_2 = this.getPackageName(_name_1);
+      _xifexpression = this.combinePackageName(_packageName_1, _packageName_2);
+    }
+    return _xifexpression;
+  }
+  
+  public String gwtRemoteServicesApplicationContextFullQualifiedFileName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "GWTRemoteServices-gen.xml");
+  }
+  
+  public String serviceSpringNameApplicationContextFullQualifiedFileName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "SpringServices-gen.xml");
+  }
+  
+  public String serviceImplFullQualifiedName(final Service service) {
+    String _packageName = this.getPackageName(service);
+    String _plus = (_packageName + ".");
+    String _serviceImplName = this.serviceImplName(service);
+    return (_plus + _serviceImplName);
+  }
+  
+  public String serviceImplName(final Service service) {
+    String _name = service.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "Impl");
+  }
+  
+  public String getPackageName(final Object packageDeclaration) {
+    if (packageDeclaration instanceof Dictionary) {
+      return _getPackageName((Dictionary)packageDeclaration);
+    } else if (packageDeclaration instanceof PackageDeclaration) {
+      return _getPackageName((PackageDeclaration)packageDeclaration);
+    } else if (packageDeclaration instanceof DictionaryEditor) {
+      return _getPackageName((DictionaryEditor)packageDeclaration);
+    } else if (packageDeclaration instanceof DictionarySearch) {
+      return _getPackageName((DictionarySearch)packageDeclaration);
+    } else if (packageDeclaration instanceof String) {
+      return _getPackageName((String)packageDeclaration);
+    } else if (packageDeclaration instanceof EObject) {
+      return _getPackageName((EObject)packageDeclaration);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(packageDeclaration).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/SpringGenerator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/SpringGenerator.java
index 07c54f3..d963aed 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/SpringGenerator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/SpringGenerator.java
@@ -1,242 +1,242 @@
-package io.pelle.mango.dsl.generator.server;
-
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.Model;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class SpringGenerator {
-  @Inject
-  @Extension
-  private NameUtils _nameUtils;
-  
-  public CharSequence compileSpringDBApplicationContext(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xmlns:jee=\"http://www.springframework.org/schema/jee\"");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
-    _builder.newLine();
-    _builder.append("           ");
-    _builder.append("http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd");
-    _builder.newLine();
-    _builder.append("           ");
-    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("<bean id=\"persistenceUnitManager\" class=\"org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager\">");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"persistenceXmlLocations\">");
-    _builder.newLine();
-    _builder.append("    \t\t");
-    _builder.append("<list>");
-    _builder.newLine();
-    _builder.append("      \t\t\t");
-    _builder.append("<value>classpath*:META-INF/persistence.xml</value>");
-    _builder.newLine();
-    _builder.append("    \t\t");
-    _builder.append("</list>");
-    _builder.newLine();
-    _builder.append("  \t\t");
-    _builder.append("</property>");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"persistenceUnitPostProcessors\">");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("<bean class=\"io.pelle.mango.db.util.MergingPersistenceUnitPostProcessor\">");
-    _builder.newLine();
-    _builder.append("\t\t\t\t");
-    _builder.append("<property name=\"targetPersistenceUnitName\" value=\"");
-    String _persistenceUnitName = this._nameUtils.persistenceUnitName(model);
-    _builder.append(_persistenceUnitName, "\t\t\t\t");
-    _builder.append("\" />");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t\t");
-    _builder.append("</bean>");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("</property>");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"defaultDataSource\" ref=\"dataSource\"/>");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("</bean>");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("  \t");
-    _builder.append("<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/");
-    String _jndiName = this._nameUtils.jndiName(model);
-    _builder.append(_jndiName, "  \t");
-    _builder.append("\"/>");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("<bean class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\" id=\"entityManagerFactory\">");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"dataSource\" ref=\"dataSource\" />");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"jpaVendorAdapter\" ref=\"jpaAdapter\" />");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"persistenceUnitName\" value=\"");
-    String _persistenceUnitName_1 = this._nameUtils.persistenceUnitName(model);
-    _builder.append(_persistenceUnitName_1, "\t\t");
-    _builder.append("\" />");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"persistenceUnitManager\" ref=\"persistenceUnitManager\" />");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"jpaProperties\">");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("<props>");
-    _builder.newLine();
-    _builder.append("\t\t\t\t");
-    _builder.append("<prop key=\"hibernate.hbm2ddl.auto\">create</prop>");
-    _builder.newLine();
-    _builder.append("\t\t\t\t");
-    _builder.append("<prop key=\"hibernate.query.substitutions\">true 1, false 0</prop>");
-    _builder.newLine();
-    _builder.append("\t\t\t\t");
-    _builder.append("<prop key=\"hibernate.connection.autocommit\">true</prop>");
-    _builder.newLine();
-    _builder.append("\t\t\t\t");
-    _builder.append("<prop key=\"hibernate.FlushMode\">AUTO</prop>");
-    _builder.newLine();
-    _builder.append("\t\t\t\t");
-    _builder.append("<prop key=\"hibernate.show_sql\">true</prop>");
-    _builder.newLine();
-    _builder.append("\t\t\t\t");
-    _builder.append("<prop key=\"hibernate.format_sql\">true</prop>");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("</props>");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("</property>");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("</bean>");
-    _builder.newLine();
-    _builder.append("</beans>");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence compileBaseApplicationContext(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
-    _builder.newLine();
-    _builder.append("           ");
-    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("    ");
-    _builder.append("<context:component-scan base-package=\"io.pelle.mango\" />");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("<context:component-scan base-package=\"");
-    String _modelPackageName = this._nameUtils.modelPackageName(model);
-    _builder.append(_modelPackageName, "\t");
-    _builder.append("\" />");
-    _builder.newLineIfNotEmpty();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("<context:annotation-config/>");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("<bean class=\"io.pelle.mango.db.util.EntityVOMapper\" factory-method=\"getInstance\" />\t");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("</beans>");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence compilePersistenceXml(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("<persistence version=\"1.0\"");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<persistence-unit name=\"");
-    String _persistenceUnitName = this._nameUtils.persistenceUnitName(model);
-    _builder.append(_persistenceUnitName, "\t\t");
-    _builder.append("\">");
-    _builder.newLineIfNotEmpty();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<Entity> _filter = Iterables.<Entity>filter(_iterable, Entity.class);
-      for(final Entity entity : _filter) {
-        _builder.append("\t\t");
-        _builder.append("<class>");
-        String _entityFullQualifiedName = this._nameUtils.entityFullQualifiedName(entity);
-        _builder.append(_entityFullQualifiedName, "\t\t");
-        _builder.append("</class>");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t");
-    _builder.append("<exclude-unlisted-classes>false</exclude-unlisted-classes>");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("</persistence-unit>");
-    _builder.newLine();
-    _builder.append("</persistence>");
-    _builder.newLine();
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator.server;
+
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.Model;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class SpringGenerator {
+  @Inject
+  @Extension
+  private NameUtils _nameUtils;
+  
+  public CharSequence compileSpringDBApplicationContext(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xmlns:jee=\"http://www.springframework.org/schema/jee\"");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
+    _builder.newLine();
+    _builder.append("           ");
+    _builder.append("http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd");
+    _builder.newLine();
+    _builder.append("           ");
+    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<bean id=\"persistenceUnitManager\" class=\"org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager\">");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"persistenceXmlLocations\">");
+    _builder.newLine();
+    _builder.append("    \t\t");
+    _builder.append("<list>");
+    _builder.newLine();
+    _builder.append("      \t\t\t");
+    _builder.append("<value>classpath*:META-INF/persistence.xml</value>");
+    _builder.newLine();
+    _builder.append("    \t\t");
+    _builder.append("</list>");
+    _builder.newLine();
+    _builder.append("  \t\t");
+    _builder.append("</property>");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"persistenceUnitPostProcessors\">");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("<bean class=\"io.pelle.mango.db.util.MergingPersistenceUnitPostProcessor\">");
+    _builder.newLine();
+    _builder.append("\t\t\t\t");
+    _builder.append("<property name=\"targetPersistenceUnitName\" value=\"");
+    String _persistenceUnitName = this._nameUtils.persistenceUnitName(model);
+    _builder.append(_persistenceUnitName, "\t\t\t\t");
+    _builder.append("\" />");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t\t");
+    _builder.append("</bean>");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("</property>");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"defaultDataSource\" ref=\"dataSource\"/>");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("</bean>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("  \t");
+    _builder.append("<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/");
+    String _jndiName = this._nameUtils.jndiName(model);
+    _builder.append(_jndiName, "  \t");
+    _builder.append("\"/>");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<bean class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\" id=\"entityManagerFactory\">");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"dataSource\" ref=\"dataSource\" />");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"jpaVendorAdapter\" ref=\"jpaAdapter\" />");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"persistenceUnitName\" value=\"");
+    String _persistenceUnitName_1 = this._nameUtils.persistenceUnitName(model);
+    _builder.append(_persistenceUnitName_1, "\t\t");
+    _builder.append("\" />");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"persistenceUnitManager\" ref=\"persistenceUnitManager\" />");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"jpaProperties\">");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("<props>");
+    _builder.newLine();
+    _builder.append("\t\t\t\t");
+    _builder.append("<prop key=\"hibernate.hbm2ddl.auto\">create</prop>");
+    _builder.newLine();
+    _builder.append("\t\t\t\t");
+    _builder.append("<prop key=\"hibernate.query.substitutions\">true 1, false 0</prop>");
+    _builder.newLine();
+    _builder.append("\t\t\t\t");
+    _builder.append("<prop key=\"hibernate.connection.autocommit\">true</prop>");
+    _builder.newLine();
+    _builder.append("\t\t\t\t");
+    _builder.append("<prop key=\"hibernate.FlushMode\">AUTO</prop>");
+    _builder.newLine();
+    _builder.append("\t\t\t\t");
+    _builder.append("<prop key=\"hibernate.show_sql\">true</prop>");
+    _builder.newLine();
+    _builder.append("\t\t\t\t");
+    _builder.append("<prop key=\"hibernate.format_sql\">true</prop>");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("</props>");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("</property>");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("</bean>");
+    _builder.newLine();
+    _builder.append("</beans>");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence compileBaseApplicationContext(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
+    _builder.newLine();
+    _builder.append("           ");
+    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("<context:component-scan base-package=\"io.pelle.mango\" />");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<context:component-scan base-package=\"");
+    String _modelPackageName = this._nameUtils.modelPackageName(model);
+    _builder.append(_modelPackageName, "\t");
+    _builder.append("\" />");
+    _builder.newLineIfNotEmpty();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<context:annotation-config/>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<bean class=\"io.pelle.mango.db.util.EntityVOMapper\" factory-method=\"getInstance\" />\t");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("</beans>");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence compilePersistenceXml(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("<persistence version=\"1.0\"");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<persistence-unit name=\"");
+    String _persistenceUnitName = this._nameUtils.persistenceUnitName(model);
+    _builder.append(_persistenceUnitName, "\t\t");
+    _builder.append("\">");
+    _builder.newLineIfNotEmpty();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<Entity> _filter = Iterables.<Entity>filter(_iterable, Entity.class);
+      for(final Entity entity : _filter) {
+        _builder.append("\t\t");
+        _builder.append("<class>");
+        String _entityFullQualifiedName = this._nameUtils.entityFullQualifiedName(entity);
+        _builder.append(_entityFullQualifiedName, "\t\t");
+        _builder.append("</class>");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t");
+    _builder.append("<exclude-unlisted-classes>false</exclude-unlisted-classes>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("</persistence-unit>");
+    _builder.newLine();
+    _builder.append("</persistence>");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.GWTServices.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.GWTServices.java._trace
index 0a3062d..5b1f76a 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.GWTServices.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.GWTServices.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.SpringServices.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.SpringServices.java._trace
index a957c30..8eba674 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.SpringServices.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/.SpringServices.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/GWTServices.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/GWTServices.java
index fe41ed8..6d8e610 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/GWTServices.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/GWTServices.java
@@ -1,84 +1,98 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.server.service;
-
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.server.ServerNameUtils;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.Service;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class GWTServices {
-  @Inject
-  @Extension
-  private ServerNameUtils _serverNameUtils;
-  
-  public CharSequence gwtRemoteServicesApplicationContext(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("<bean id=\"gwtUrlMapping\" class=\"org.gwtwidgets.server.spring.GWTHandler\">");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"order\" value=\"10\"/>");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("<property name=\"mappings\">");
-    _builder.newLine();
-    _builder.append("\t\t\t");
-    _builder.append("<map>");
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
-      for(final Service service : _filter) {
-        _builder.append("\t\t\t\t");
-        _builder.append("<entry key=\"/rpc/");
-        String _serviceSpringName = this._serverNameUtils.serviceSpringName(service);
-        _builder.append(_serviceSpringName, "\t\t\t\t");
-        _builder.append("\" value-ref=\"");
-        String _serviceSpringName_1 = this._serverNameUtils.serviceSpringName(service);
-        _builder.append(_serviceSpringName_1, "\t\t\t\t");
-        _builder.append("\" />");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("\t\t\t");
-    _builder.append("</map>");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("</property>");
-    _builder.newLine();
-    _builder.append("\t");
-    _builder.append("</bean>");
-    _builder.newLine();
-    _builder.append("</beans>");
-    _builder.newLine();
-    return _builder;
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.server.service;
+
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.server.ServerNameUtils;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.Service;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class GWTServices {
+  @Inject
+  @Extension
+  private ServerNameUtils _serverNameUtils;
+  
+  public CharSequence gwtRemoteServicesApplicationContext(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<bean id=\"gwtUrlMapping\" class=\"org.gwtwidgets.server.spring.GWTHandler\">");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"order\" value=\"10\"/>");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"serviceExporterFactory\">");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("<ref bean=\"rpcServiceExporterFactory\" />");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("</property>");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("<property name=\"mappings\">");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("<map>");
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
+      for(final Service service : _filter) {
+        _builder.append("\t\t\t\t");
+        _builder.append("<entry key=\"/rpc/");
+        String _serviceSpringName = this._serverNameUtils.serviceSpringName(service);
+        _builder.append(_serviceSpringName, "\t\t\t\t");
+        _builder.append("\" value-ref=\"");
+        String _serviceSpringName_1 = this._serverNameUtils.serviceSpringName(service);
+        _builder.append(_serviceSpringName_1, "\t\t\t\t");
+        _builder.append("\" />");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("\t\t\t");
+    _builder.append("</map>");
+    _builder.newLine();
+    _builder.append("\t\t");
+    _builder.append("</property>");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("</bean>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("<bean id=\"rpcServiceExporterFactory\" class=\"io.pelle.mango.server.gwt.MangoRPCServiceExporterFactory\" />");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("</beans>");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/SpringServices.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/SpringServices.java
index 1057590..04c1aed 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/SpringServices.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/server/service/SpringServices.java
@@ -1,63 +1,63 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.generator.server.service;
-
-import com.google.common.collect.Iterables;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.server.ServerNameUtils;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.Service;
-import org.eclipse.emf.common.util.TreeIterator;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.IteratorExtensions;
-
-@SuppressWarnings("all")
-public class SpringServices {
-  @Inject
-  @Extension
-  private ServerNameUtils _serverNameUtils;
-  
-  public CharSequence springServices(final Model model) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-    _builder.newLine();
-    _builder.newLine();
-    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
-    _builder.newLine();
-    _builder.append("        ");
-    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
-    _builder.newLine();
-    _builder.newLine();
-    {
-      TreeIterator<EObject> _eAllContents = model.eAllContents();
-      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
-      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
-      for(final Service service : _filter) {
-        _builder.append("\t\t");
-        _builder.append("<bean id=\"");
-        String _serviceSpringName = this._serverNameUtils.serviceSpringName(service);
-        _builder.append(_serviceSpringName, "\t\t");
-        _builder.append("\" class=\"");
-        String _serviceImplFullQualifiedName = this._serverNameUtils.serviceImplFullQualifiedName(service);
-        _builder.append(_serviceImplFullQualifiedName, "\t\t");
-        _builder.append("\" />");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    _builder.append("</beans>");
-    _builder.newLine();
-    return _builder;
-  }
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.generator.server.service;
+
+import com.google.common.collect.Iterables;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.server.ServerNameUtils;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.Service;
+import org.eclipse.emf.common.util.TreeIterator;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.IteratorExtensions;
+
+@SuppressWarnings("all")
+public class SpringServices {
+  @Inject
+  @Extension
+  private ServerNameUtils _serverNameUtils;
+  
+  public CharSequence springServices(final Model model) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
+    _builder.newLine();
+    _builder.newLine();
+    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("xmlns:context=\"http://www.springframework.org/schema/context\"");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">");
+    _builder.newLine();
+    _builder.newLine();
+    {
+      TreeIterator<EObject> _eAllContents = model.eAllContents();
+      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
+      Iterable<Service> _filter = Iterables.<Service>filter(_iterable, Service.class);
+      for(final Service service : _filter) {
+        _builder.append("\t\t");
+        _builder.append("<bean id=\"");
+        String _serviceSpringName = this._serverNameUtils.serviceSpringName(service);
+        _builder.append(_serviceSpringName, "\t\t");
+        _builder.append("\" class=\"");
+        String _serviceImplFullQualifiedName = this._serverNameUtils.serviceImplFullQualifiedName(service);
+        _builder.append(_serviceImplFullQualifiedName, "\t\t");
+        _builder.append("\" />");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    _builder.append("</beans>");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.AttributeUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.AttributeUtils.java._trace
index fd2484d..fdeabfc 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.AttributeUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.AttributeUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.EntityUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.EntityUtils.java._trace
index 189f06b..9a61f5b 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.EntityUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.EntityUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.NameUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.NameUtils.java._trace
index 65425ff..35bcab1 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.NameUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.NameUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.TypeUtils.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.TypeUtils.java._trace
index 5455246..6b9accc 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.TypeUtils.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/.TypeUtils.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/AttributeUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/AttributeUtils.java
index ee9d149..d438193 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/AttributeUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/AttributeUtils.java
@@ -1,147 +1,147 @@
-package io.pelle.mango.dsl.generator.util;
-
-import com.google.common.base.Objects;
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-@SuppressWarnings("all")
-public class AttributeUtils {
-  @Inject
-  @Extension
-  private NameUtils _nameUtils;
-  
-  public Entity getParentEntity(final EntityAttribute entityAttribute) {
-    EObject _eContainer = entityAttribute.eContainer();
-    return ((Entity) _eContainer);
-  }
-  
-  public CharSequence attributeGetterSetter(final String attributeType, final String attributeName) {
-    StringConcatenation _builder = new StringConcatenation();
-    CharSequence _attribute = this.attribute(attributeType, attributeName);
-    _builder.append(_attribute, "");
-    _builder.newLineIfNotEmpty();
-    CharSequence _ter = this.getter(attributeType, attributeName);
-    _builder.append(_ter, "");
-    _builder.newLineIfNotEmpty();
-    CharSequence _setter = this.setter(attributeType, attributeName);
-    _builder.append(_setter, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence getterSetter(final String attributeType, final String attributeName) {
-    StringConcatenation _builder = new StringConcatenation();
-    CharSequence _ter = this.getter(attributeType, attributeName);
-    _builder.append(_ter, "");
-    _builder.newLineIfNotEmpty();
-    CharSequence _setter = this.setter(attributeType, attributeName);
-    _builder.append(_setter, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence attribute(final String attributeType, final String attributeName) {
-    StringConcatenation _builder = new StringConcatenation();
-    CharSequence _attribute = this.attribute(attributeType, attributeName, null);
-    _builder.append(_attribute, "");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence attribute(final String attributeType, final String attributeName, final String attributeInitializer) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("private ");
-    _builder.append(attributeType, "");
-    _builder.append(" ");
-    String _attributeName = this._nameUtils.attributeName(attributeName);
-    _builder.append(_attributeName, "");
-    {
-      boolean _notEquals = (!Objects.equal(attributeInitializer, null));
-      if (_notEquals) {
-        _builder.append(" = ");
-        _builder.append(attributeInitializer, "");
-      }
-    }
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  public CharSequence getter(final String attributeType, final String attributeName) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public ");
-    _builder.append(attributeType, "");
-    _builder.append(" get");
-    String _firstUpper = StringExtensions.toFirstUpper(attributeName);
-    _builder.append(_firstUpper, "");
-    _builder.append("() {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("return this.");
-    _builder.append(attributeName, "\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence setter(final String attributeType, final String attributeName) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public void set");
-    String _firstUpper = StringExtensions.toFirstUpper(attributeName);
-    _builder.append(_firstUpper, "");
-    _builder.append("(");
-    _builder.append(attributeType, "");
-    _builder.append(" ");
-    _builder.append(attributeName, "");
-    _builder.append(") {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("this.");
-    _builder.append(attributeName, "\t");
-    _builder.append(" = ");
-    _builder.append(attributeName, "\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-  
-  public CharSequence changeTrackingSetter(final String attributeType, final String attributeName) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public void set");
-    String _firstUpper = StringExtensions.toFirstUpper(attributeName);
-    _builder.append(_firstUpper, "");
-    _builder.append("(");
-    _builder.append(attributeType, "");
-    _builder.append(" ");
-    _builder.append(attributeName, "");
-    _builder.append(") {");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("getChangeTracker().addChange(\"");
-    _builder.append(attributeName, "\t");
-    _builder.append("\", ");
-    _builder.append(attributeName, "\t");
-    _builder.append(");");
-    _builder.newLineIfNotEmpty();
-    _builder.append("\t");
-    _builder.append("this.");
-    _builder.append(attributeName, "\t");
-    _builder.append(" = ");
-    _builder.append(attributeName, "\t");
-    _builder.append(";");
-    _builder.newLineIfNotEmpty();
-    _builder.append("}");
-    _builder.newLine();
-    return _builder;
-  }
-}
+package io.pelle.mango.dsl.generator.util;
+
+import com.google.common.base.Objects;
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+@SuppressWarnings("all")
+public class AttributeUtils {
+  @Inject
+  @Extension
+  private NameUtils _nameUtils;
+  
+  public Entity getParentEntity(final EntityAttribute entityAttribute) {
+    EObject _eContainer = entityAttribute.eContainer();
+    return ((Entity) _eContainer);
+  }
+  
+  public CharSequence attributeGetterSetter(final String attributeType, final String attributeName) {
+    StringConcatenation _builder = new StringConcatenation();
+    CharSequence _attribute = this.attribute(attributeType, attributeName);
+    _builder.append(_attribute, "");
+    _builder.newLineIfNotEmpty();
+    CharSequence _ter = this.getter(attributeType, attributeName);
+    _builder.append(_ter, "");
+    _builder.newLineIfNotEmpty();
+    CharSequence _setter = this.setter(attributeType, attributeName);
+    _builder.append(_setter, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence getterSetter(final String attributeType, final String attributeName) {
+    StringConcatenation _builder = new StringConcatenation();
+    CharSequence _ter = this.getter(attributeType, attributeName);
+    _builder.append(_ter, "");
+    _builder.newLineIfNotEmpty();
+    CharSequence _setter = this.setter(attributeType, attributeName);
+    _builder.append(_setter, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence attribute(final String attributeType, final String attributeName) {
+    StringConcatenation _builder = new StringConcatenation();
+    CharSequence _attribute = this.attribute(attributeType, attributeName, null);
+    _builder.append(_attribute, "");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence attribute(final String attributeType, final String attributeName, final String attributeInitializer) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("private ");
+    _builder.append(attributeType, "");
+    _builder.append(" ");
+    String _attributeName = this._nameUtils.attributeName(attributeName);
+    _builder.append(_attributeName, "");
+    {
+      boolean _notEquals = (!Objects.equal(attributeInitializer, null));
+      if (_notEquals) {
+        _builder.append(" = ");
+        _builder.append(attributeInitializer, "");
+      }
+    }
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  public CharSequence getter(final String attributeType, final String attributeName) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public ");
+    _builder.append(attributeType, "");
+    _builder.append(" get");
+    String _firstUpper = StringExtensions.toFirstUpper(attributeName);
+    _builder.append(_firstUpper, "");
+    _builder.append("() {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("return this.");
+    _builder.append(attributeName, "\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence setter(final String attributeType, final String attributeName) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public void set");
+    String _firstUpper = StringExtensions.toFirstUpper(attributeName);
+    _builder.append(_firstUpper, "");
+    _builder.append("(");
+    _builder.append(attributeType, "");
+    _builder.append(" ");
+    _builder.append(attributeName, "");
+    _builder.append(") {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("this.");
+    _builder.append(attributeName, "\t");
+    _builder.append(" = ");
+    _builder.append(attributeName, "\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+  
+  public CharSequence changeTrackingSetter(final String attributeType, final String attributeName) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public void set");
+    String _firstUpper = StringExtensions.toFirstUpper(attributeName);
+    _builder.append(_firstUpper, "");
+    _builder.append("(");
+    _builder.append(attributeType, "");
+    _builder.append(" ");
+    _builder.append(attributeName, "");
+    _builder.append(") {");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("getChangeTracker().addChange(\"");
+    _builder.append(attributeName, "\t");
+    _builder.append("\", ");
+    _builder.append(attributeName, "\t");
+    _builder.append(");");
+    _builder.newLineIfNotEmpty();
+    _builder.append("\t");
+    _builder.append("this.");
+    _builder.append(attributeName, "\t");
+    _builder.append(" = ");
+    _builder.append(attributeName, "\t");
+    _builder.append(";");
+    _builder.newLineIfNotEmpty();
+    _builder.append("}");
+    _builder.newLine();
+    return _builder;
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/EntityUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/EntityUtils.java
index bae360b..7739b20 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/EntityUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/EntityUtils.java
@@ -1,11 +1,11 @@
-package io.pelle.mango.dsl.generator.util;
-
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.mango.Entity;
-
-@SuppressWarnings("all")
-public class EntityUtils {
-  public boolean isExtendedByOtherEntity(final Entity entity) {
-    return ModelUtil.isExtendedByOtherEntity(entity);
-  }
-}
+package io.pelle.mango.dsl.generator.util;
+
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.mango.Entity;
+
+@SuppressWarnings("all")
+public class EntityUtils {
+  public boolean isExtendedByOtherEntity(final Entity entity) {
+    return ModelUtil.isExtendedByOtherEntity(entity);
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/NameUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/NameUtils.java
index 7c28e57..9ad315b 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/NameUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/NameUtils.java
@@ -1,421 +1,421 @@
-package io.pelle.mango.dsl.generator.util;
-
-import com.google.common.base.Objects;
-import io.pelle.mango.dsl.ModelUtil;
-import io.pelle.mango.dsl.generator.util.GeneratorUtil;
-import io.pelle.mango.dsl.mango.Dictionary;
-import io.pelle.mango.dsl.mango.DictionaryEditor;
-import io.pelle.mango.dsl.mango.DictionarySearch;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import io.pelle.mango.dsl.mango.Model;
-import io.pelle.mango.dsl.mango.ModuleDefinition;
-import io.pelle.mango.dsl.mango.PackageDeclaration;
-import io.pelle.mango.dsl.mango.Service;
-import io.pelle.mango.dsl.mango.ValueObject;
-import java.util.Arrays;
-import javax.management.Attribute;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtext.xbase.lib.StringExtensions;
-
-@SuppressWarnings("all")
-public class NameUtils {
-  public String combinePackageName(final String packageName1, final String packageName2) {
-    boolean _and = false;
-    boolean _notEquals = (!Objects.equal(packageName1, null));
-    if (!_notEquals) {
-      _and = false;
-    } else {
-      boolean _isEmpty = packageName1.isEmpty();
-      boolean _not = (!_isEmpty);
-      _and = _not;
-    }
-    if (_and) {
-      return ((packageName1 + ".") + packageName2);
-    } else {
-      return packageName2;
-    }
-  }
-  
-  protected String _getPackageName(final String packageName) {
-    String _lowerCase = packageName.toLowerCase();
-    return _lowerCase.replaceAll("\\^", "");
-  }
-  
-  protected String _getPackageName(final Dictionary dictionary) {
-    EObject _eContainer = dictionary.eContainer();
-    String _packageName = this.getPackageName(_eContainer);
-    String _name = dictionary.getName();
-    String _packageName_1 = this.getPackageName(_name);
-    return this.combinePackageName(_packageName, _packageName_1);
-  }
-  
-  protected String _getPackageName(final DictionaryEditor dictionaryEditor) {
-    EObject _eContainer = dictionaryEditor.eContainer();
-    String _packageName = this.getPackageName(_eContainer);
-    String _name = dictionaryEditor.getName();
-    String _packageName_1 = this.getPackageName(_name);
-    return this.combinePackageName(_packageName, _packageName_1);
-  }
-  
-  protected String _getPackageName(final DictionarySearch dictionarySearch) {
-    EObject _eContainer = dictionarySearch.eContainer();
-    String _packageName = this.getPackageName(_eContainer);
-    String _name = dictionarySearch.getName();
-    String _packageName_1 = this.getPackageName(_name);
-    return this.combinePackageName(_packageName, _packageName_1);
-  }
-  
-  protected String _getPackageName(final PackageDeclaration packageDeclaration) {
-    EObject _eContainer = packageDeclaration.eContainer();
-    String _packageName = this.getPackageName(_eContainer);
-    String _name = packageDeclaration.getName();
-    String _packageName_1 = this.getPackageName(_name);
-    return this.combinePackageName(_packageName, _packageName_1);
-  }
-  
-  protected String _getPackageName(final EObject eObject) {
-    EObject _eContainer = eObject.eContainer();
-    boolean _equals = Objects.equal(_eContainer, null);
-    if (_equals) {
-      return "";
-    } else {
-      EObject _eContainer_1 = eObject.eContainer();
-      return this.getPackageName(_eContainer_1);
-    }
-  }
-  
-  public String attributeName(final Attribute attribute) {
-    String _name = attribute.getName();
-    return this.attributeName(_name);
-  }
-  
-  public String attributeName(final String attribute) {
-    return StringExtensions.toFirstLower(attribute);
-  }
-  
-  public String attributeConstantName(final String attribute) {
-    return attribute.toUpperCase();
-  }
-  
-  public String entityConstantName(final Entity entity) {
-    String _name = entity.getName();
-    return _name.toUpperCase();
-  }
-  
-  public String entityTableName(final Entity entity) {
-    String _name = entity.getName();
-    return _name.toLowerCase();
-  }
-  
-  public String entityTableIdColumnName(final Entity entity) {
-    String _name = entity.getName();
-    String _lowerCase = _name.toLowerCase();
-    return (_lowerCase + "_id");
-  }
-  
-  public String entityTableColumnName(final EntityAttribute entityAttribute) {
-    Entity _parentEntity = GeneratorUtil.getParentEntity(entityAttribute);
-    String _name = _parentEntity.getName();
-    String _lowerCase = _name.toLowerCase();
-    String _plus = (_lowerCase + "_");
-    String _name_1 = entityAttribute.getName();
-    String _lowerCase_1 = _name_1.toLowerCase();
-    return (_plus + _lowerCase_1);
-  }
-  
-  public String entityTableIdSequenceName(final Entity entity) {
-    String _name = entity.getName();
-    String _lowerCase = _name.toLowerCase();
-    return (_lowerCase + "_id_seq");
-  }
-  
-  public String gwtClientGeneratedModuleDefinitionFileName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "Generated.gwt.xml");
-  }
-  
-  public String gwtClientModuleFullQualifiedFileName(final Model model) {
-    String _xblockexpression = null;
-    {
-      NameUtils nameUtils = new NameUtils();
-      String _modelPackageName = nameUtils.modelPackageName(model);
-      String _replaceAll = _modelPackageName.replaceAll("\\.", "/");
-      String _plus = (_replaceAll + "/");
-      String _gwtClientGeneratedModuleDefinitionFileName = this.gwtClientGeneratedModuleDefinitionFileName(model);
-      _xblockexpression = (_plus + _gwtClientGeneratedModuleDefinitionFileName);
-    }
-    return _xblockexpression;
-  }
-  
-  public String entityName(final Entity entity) {
-    String _name = entity.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String entityFullQualifiedName(final Entity entity) {
-    String _packageName = this.getPackageName(entity);
-    String _plus = (_packageName + ".");
-    String _entityName = this.entityName(entity);
-    return (_plus + _entityName);
-  }
-  
-  public String entityFullQualifiedFileName(final Entity entity) {
-    String _entityFullQualifiedName = this.entityFullQualifiedName(entity);
-    String _replaceAll = _entityFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String voName(final ValueObject valueObject) {
-    String _name = valueObject.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String voFullQualifiedName(final ValueObject valueObject) {
-    String _packageName = this.getPackageName(valueObject);
-    String _plus = (_packageName + ".");
-    String _voName = this.voName(valueObject);
-    return (_plus + _voName);
-  }
-  
-  public String voFullQualifiedFileName(final ValueObject valueObject) {
-    String _voFullQualifiedName = this.voFullQualifiedName(valueObject);
-    String _replaceAll = _voFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String serviceName(final Service service) {
-    String _name = service.getName();
-    return StringExtensions.toFirstUpper(_name);
-  }
-  
-  public String serviceSpringName(final Service service) {
-    return this.serviceName(service);
-  }
-  
-  public String gwtClientconfigurationName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "ClientConfiguration");
-  }
-  
-  public String gwtClientconfigurationFullQualifiedName(final Model model) {
-    String _modelPackageName = this.modelPackageName(model);
-    String _plus = (_modelPackageName + ".");
-    String _gwtClientconfigurationName = this.gwtClientconfigurationName(model);
-    return (_plus + _gwtClientconfigurationName);
-  }
-  
-  public String gwtClientconfigurationFullQualifiedNameFileName(final Model model) {
-    String _gwtClientconfigurationFullQualifiedName = this.gwtClientconfigurationFullQualifiedName(model);
-    String _replaceAll = _gwtClientconfigurationFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String serviceInterfaceName(final Service service) {
-    String _name = service.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return ("I" + _firstUpper);
-  }
-  
-  public String serviceInterfaceFullQualifiedName(final Service service) {
-    String _packageName = this.getPackageName(service);
-    String _plus = (_packageName + ".");
-    String _serviceInterfaceName = this.serviceInterfaceName(service);
-    return (_plus + _serviceInterfaceName);
-  }
-  
-  public String serviceInterfaceFullQualifiedFileName(final Service service) {
-    String _serviceInterfaceFullQualifiedName = this.serviceInterfaceFullQualifiedName(service);
-    String _replaceAll = _serviceInterfaceFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String gwtServiceInterfaceName(final Service service) {
-    String _name = service.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    String _plus = ("I" + _firstUpper);
-    return (_plus + "GWT");
-  }
-  
-  public String gwtServiceInterfaceFullQualifiedName(final Service service) {
-    String _packageName = this.getPackageName(service);
-    String _plus = (_packageName + ".");
-    String _gwtServiceInterfaceName = this.gwtServiceInterfaceName(service);
-    return (_plus + _gwtServiceInterfaceName);
-  }
-  
-  public String gwtServiceInterfaceFullQualifiedFileName(final Service service) {
-    String _gwtServiceInterfaceFullQualifiedName = this.gwtServiceInterfaceFullQualifiedName(service);
-    String _replaceAll = _gwtServiceInterfaceFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String gwtAsyncServiceInterfaceName(final Service service) {
-    String _name = service.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    String _plus = ("I" + _firstUpper);
-    return (_plus + "GWTAsync");
-  }
-  
-  public String gwtAsyncServiceInterfaceFullQualifiedName(final Service service) {
-    String _packageName = this.getPackageName(service);
-    String _plus = (_packageName + ".");
-    String _gwtAsyncServiceInterfaceName = this.gwtAsyncServiceInterfaceName(service);
-    return (_plus + _gwtAsyncServiceInterfaceName);
-  }
-  
-  public String gwtAsyncServiceInterfaceFullQualifiedFileName(final Service service) {
-    String _gwtAsyncServiceInterfaceFullQualifiedName = this.gwtAsyncServiceInterfaceFullQualifiedName(service);
-    String _replaceAll = _gwtAsyncServiceInterfaceFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String gwtAsyncAdapterName(final Service service) {
-    String _name = service.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "GWTAsyncAdapter");
-  }
-  
-  public String gwtAsyncAdapterFullQualifiedName(final Service service) {
-    String _packageName = this.getPackageName(service);
-    String _plus = (_packageName + ".");
-    String _gwtAsyncAdapterName = this.gwtAsyncAdapterName(service);
-    return (_plus + _gwtAsyncAdapterName);
-  }
-  
-  public String gwtAsyncAdapterFullQualifiedFileName(final Service service) {
-    String _gwtAsyncAdapterFullQualifiedName = this.gwtAsyncAdapterFullQualifiedName(service);
-    String _replaceAll = _gwtAsyncAdapterFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String gwtRemoteServiceLocatorName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "GwtRemoteServiceLocator");
-  }
-  
-  public String gwtRemoteServiceLocatorFullQualifiedName(final Model model) {
-    String _modelPackageName = this.modelPackageName(model);
-    String _plus = (_modelPackageName + ".");
-    String _gwtRemoteServiceLocatorName = this.gwtRemoteServiceLocatorName(model);
-    return (_plus + _gwtRemoteServiceLocatorName);
-  }
-  
-  public String gwtRemoteServiceLocatorFullQualifiedFileName(final Model model) {
-    String _gwtRemoteServiceLocatorFullQualifiedName = this.gwtRemoteServiceLocatorFullQualifiedName(model);
-    String _replaceAll = _gwtRemoteServiceLocatorFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String gwtRemoteServiceLocatorInterfaceName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    String _plus = ("I" + _firstUpper);
-    return (_plus + "GwtRemoteServiceLocator");
-  }
-  
-  public String gwtRemoteServiceLocatorInterfaceFullQualifiedName(final Model model) {
-    String _modelPackageName = this.modelPackageName(model);
-    String _plus = (_modelPackageName + ".");
-    String _gwtRemoteServiceLocatorInterfaceName = this.gwtRemoteServiceLocatorInterfaceName(model);
-    return (_plus + _gwtRemoteServiceLocatorInterfaceName);
-  }
-  
-  public String gwtRemoteServiceLocatorInterfaceFullQualifiedFileName(final Model model) {
-    String _gwtRemoteServiceLocatorInterfaceFullQualifiedName = this.gwtRemoteServiceLocatorInterfaceFullQualifiedName(model);
-    String _replaceAll = _gwtRemoteServiceLocatorInterfaceFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String baseModuleDefinitionName(final ModuleDefinition moduleDefinition) {
-    String _name = moduleDefinition.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    String _plus = ("Base" + _firstUpper);
-    return (_plus + "Module");
-  }
-  
-  public String baseModuleDefinitionFullQualifiedName(final ModuleDefinition moduleDefinition) {
-    String _packageName = this.getPackageName(moduleDefinition);
-    String _plus = (_packageName + ".");
-    String _baseModuleDefinitionName = this.baseModuleDefinitionName(moduleDefinition);
-    return (_plus + _baseModuleDefinitionName);
-  }
-  
-  public String baseModuleDefinitionFullQualifiedFileName(final ModuleDefinition moduleDefinition) {
-    String _baseModuleDefinitionFullQualifiedName = this.baseModuleDefinitionFullQualifiedName(moduleDefinition);
-    String _replaceAll = _baseModuleDefinitionFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String modelPackageName(final Model model) {
-    PackageDeclaration _singleRootPackage = ModelUtil.getSingleRootPackage(model);
-    String _name = _singleRootPackage.getName();
-    return this.getPackageName(_name);
-  }
-  
-  public String voMapperName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "VOMapper");
-  }
-  
-  public String voMapperFullQualifiedName(final Model model) {
-    String _modelPackageName = this.modelPackageName(model);
-    String _plus = (_modelPackageName + ".");
-    String _voMapperName = this.voMapperName(model);
-    return (_plus + _voMapperName);
-  }
-  
-  public String voMapperFullQualifiedFileName(final Model model) {
-    String _voMapperFullQualifiedName = this.voMapperFullQualifiedName(model);
-    String _replaceAll = _voMapperFullQualifiedName.replaceAll("\\.", "/");
-    return (_replaceAll + ".java");
-  }
-  
-  public String springDBApplicationContextFullQualifiedFileName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "DB-gen.xml");
-  }
-  
-  public String baseApplicationContextFullQualifiedFileName(final Model model) {
-    String _name = model.getName();
-    String _firstUpper = StringExtensions.toFirstUpper(_name);
-    return (_firstUpper + "BaseApplicationContext-gen.xml");
-  }
-  
-  public String springPersistenceXMLFullQualifiedFileName(final Model model) {
-    return "META-INF/persistence.xml";
-  }
-  
-  public String persistenceUnitName(final Model model) {
-    String _name = model.getName();
-    return _name.toLowerCase();
-  }
-  
-  public String jndiName(final Model model) {
-    return this.persistenceUnitName(model);
-  }
-  
-  public String getPackageName(final Object dictionary) {
-    if (dictionary instanceof Dictionary) {
-      return _getPackageName((Dictionary)dictionary);
-    } else if (dictionary instanceof PackageDeclaration) {
-      return _getPackageName((PackageDeclaration)dictionary);
-    } else if (dictionary instanceof DictionaryEditor) {
-      return _getPackageName((DictionaryEditor)dictionary);
-    } else if (dictionary instanceof DictionarySearch) {
-      return _getPackageName((DictionarySearch)dictionary);
-    } else if (dictionary instanceof String) {
-      return _getPackageName((String)dictionary);
-    } else if (dictionary instanceof EObject) {
-      return _getPackageName((EObject)dictionary);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(dictionary).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.util;
+
+import com.google.common.base.Objects;
+import io.pelle.mango.dsl.ModelUtil;
+import io.pelle.mango.dsl.generator.util.GeneratorUtil;
+import io.pelle.mango.dsl.mango.Dictionary;
+import io.pelle.mango.dsl.mango.DictionaryEditor;
+import io.pelle.mango.dsl.mango.DictionarySearch;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import io.pelle.mango.dsl.mango.Model;
+import io.pelle.mango.dsl.mango.ModuleDefinition;
+import io.pelle.mango.dsl.mango.PackageDeclaration;
+import io.pelle.mango.dsl.mango.Service;
+import io.pelle.mango.dsl.mango.ValueObject;
+import java.util.Arrays;
+import javax.management.Attribute;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtext.xbase.lib.StringExtensions;
+
+@SuppressWarnings("all")
+public class NameUtils {
+  public String combinePackageName(final String packageName1, final String packageName2) {
+    boolean _and = false;
+    boolean _notEquals = (!Objects.equal(packageName1, null));
+    if (!_notEquals) {
+      _and = false;
+    } else {
+      boolean _isEmpty = packageName1.isEmpty();
+      boolean _not = (!_isEmpty);
+      _and = _not;
+    }
+    if (_and) {
+      return ((packageName1 + ".") + packageName2);
+    } else {
+      return packageName2;
+    }
+  }
+  
+  protected String _getPackageName(final String packageName) {
+    String _lowerCase = packageName.toLowerCase();
+    return _lowerCase.replaceAll("\\^", "");
+  }
+  
+  protected String _getPackageName(final Dictionary dictionary) {
+    EObject _eContainer = dictionary.eContainer();
+    String _packageName = this.getPackageName(_eContainer);
+    String _name = dictionary.getName();
+    String _packageName_1 = this.getPackageName(_name);
+    return this.combinePackageName(_packageName, _packageName_1);
+  }
+  
+  protected String _getPackageName(final DictionaryEditor dictionaryEditor) {
+    EObject _eContainer = dictionaryEditor.eContainer();
+    String _packageName = this.getPackageName(_eContainer);
+    String _name = dictionaryEditor.getName();
+    String _packageName_1 = this.getPackageName(_name);
+    return this.combinePackageName(_packageName, _packageName_1);
+  }
+  
+  protected String _getPackageName(final DictionarySearch dictionarySearch) {
+    EObject _eContainer = dictionarySearch.eContainer();
+    String _packageName = this.getPackageName(_eContainer);
+    String _name = dictionarySearch.getName();
+    String _packageName_1 = this.getPackageName(_name);
+    return this.combinePackageName(_packageName, _packageName_1);
+  }
+  
+  protected String _getPackageName(final PackageDeclaration packageDeclaration) {
+    EObject _eContainer = packageDeclaration.eContainer();
+    String _packageName = this.getPackageName(_eContainer);
+    String _name = packageDeclaration.getName();
+    String _packageName_1 = this.getPackageName(_name);
+    return this.combinePackageName(_packageName, _packageName_1);
+  }
+  
+  protected String _getPackageName(final EObject eObject) {
+    EObject _eContainer = eObject.eContainer();
+    boolean _equals = Objects.equal(_eContainer, null);
+    if (_equals) {
+      return "";
+    } else {
+      EObject _eContainer_1 = eObject.eContainer();
+      return this.getPackageName(_eContainer_1);
+    }
+  }
+  
+  public String attributeName(final Attribute attribute) {
+    String _name = attribute.getName();
+    return this.attributeName(_name);
+  }
+  
+  public String attributeName(final String attribute) {
+    return StringExtensions.toFirstLower(attribute);
+  }
+  
+  public String attributeConstantName(final String attribute) {
+    return attribute.toUpperCase();
+  }
+  
+  public String entityConstantName(final Entity entity) {
+    String _name = entity.getName();
+    return _name.toUpperCase();
+  }
+  
+  public String entityTableName(final Entity entity) {
+    String _name = entity.getName();
+    return _name.toLowerCase();
+  }
+  
+  public String entityTableIdColumnName(final Entity entity) {
+    String _name = entity.getName();
+    String _lowerCase = _name.toLowerCase();
+    return (_lowerCase + "_id");
+  }
+  
+  public String entityTableColumnName(final EntityAttribute entityAttribute) {
+    Entity _parentEntity = GeneratorUtil.getParentEntity(entityAttribute);
+    String _name = _parentEntity.getName();
+    String _lowerCase = _name.toLowerCase();
+    String _plus = (_lowerCase + "_");
+    String _name_1 = entityAttribute.getName();
+    String _lowerCase_1 = _name_1.toLowerCase();
+    return (_plus + _lowerCase_1);
+  }
+  
+  public String entityTableIdSequenceName(final Entity entity) {
+    String _name = entity.getName();
+    String _lowerCase = _name.toLowerCase();
+    return (_lowerCase + "_id_seq");
+  }
+  
+  public String gwtClientGeneratedModuleDefinitionFileName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "Generated.gwt.xml");
+  }
+  
+  public String gwtClientModuleFullQualifiedFileName(final Model model) {
+    String _xblockexpression = null;
+    {
+      NameUtils nameUtils = new NameUtils();
+      String _modelPackageName = nameUtils.modelPackageName(model);
+      String _replaceAll = _modelPackageName.replaceAll("\\.", "/");
+      String _plus = (_replaceAll + "/");
+      String _gwtClientGeneratedModuleDefinitionFileName = this.gwtClientGeneratedModuleDefinitionFileName(model);
+      _xblockexpression = (_plus + _gwtClientGeneratedModuleDefinitionFileName);
+    }
+    return _xblockexpression;
+  }
+  
+  public String entityName(final Entity entity) {
+    String _name = entity.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String entityFullQualifiedName(final Entity entity) {
+    String _packageName = this.getPackageName(entity);
+    String _plus = (_packageName + ".");
+    String _entityName = this.entityName(entity);
+    return (_plus + _entityName);
+  }
+  
+  public String entityFullQualifiedFileName(final Entity entity) {
+    String _entityFullQualifiedName = this.entityFullQualifiedName(entity);
+    String _replaceAll = _entityFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String voName(final ValueObject valueObject) {
+    String _name = valueObject.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String voFullQualifiedName(final ValueObject valueObject) {
+    String _packageName = this.getPackageName(valueObject);
+    String _plus = (_packageName + ".");
+    String _voName = this.voName(valueObject);
+    return (_plus + _voName);
+  }
+  
+  public String voFullQualifiedFileName(final ValueObject valueObject) {
+    String _voFullQualifiedName = this.voFullQualifiedName(valueObject);
+    String _replaceAll = _voFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String serviceName(final Service service) {
+    String _name = service.getName();
+    return StringExtensions.toFirstUpper(_name);
+  }
+  
+  public String serviceSpringName(final Service service) {
+    return this.serviceName(service);
+  }
+  
+  public String gwtClientconfigurationName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "ClientConfiguration");
+  }
+  
+  public String gwtClientconfigurationFullQualifiedName(final Model model) {
+    String _modelPackageName = this.modelPackageName(model);
+    String _plus = (_modelPackageName + ".");
+    String _gwtClientconfigurationName = this.gwtClientconfigurationName(model);
+    return (_plus + _gwtClientconfigurationName);
+  }
+  
+  public String gwtClientconfigurationFullQualifiedNameFileName(final Model model) {
+    String _gwtClientconfigurationFullQualifiedName = this.gwtClientconfigurationFullQualifiedName(model);
+    String _replaceAll = _gwtClientconfigurationFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String serviceInterfaceName(final Service service) {
+    String _name = service.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return ("I" + _firstUpper);
+  }
+  
+  public String serviceInterfaceFullQualifiedName(final Service service) {
+    String _packageName = this.getPackageName(service);
+    String _plus = (_packageName + ".");
+    String _serviceInterfaceName = this.serviceInterfaceName(service);
+    return (_plus + _serviceInterfaceName);
+  }
+  
+  public String serviceInterfaceFullQualifiedFileName(final Service service) {
+    String _serviceInterfaceFullQualifiedName = this.serviceInterfaceFullQualifiedName(service);
+    String _replaceAll = _serviceInterfaceFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String gwtServiceInterfaceName(final Service service) {
+    String _name = service.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    String _plus = ("I" + _firstUpper);
+    return (_plus + "GWT");
+  }
+  
+  public String gwtServiceInterfaceFullQualifiedName(final Service service) {
+    String _packageName = this.getPackageName(service);
+    String _plus = (_packageName + ".");
+    String _gwtServiceInterfaceName = this.gwtServiceInterfaceName(service);
+    return (_plus + _gwtServiceInterfaceName);
+  }
+  
+  public String gwtServiceInterfaceFullQualifiedFileName(final Service service) {
+    String _gwtServiceInterfaceFullQualifiedName = this.gwtServiceInterfaceFullQualifiedName(service);
+    String _replaceAll = _gwtServiceInterfaceFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String gwtAsyncServiceInterfaceName(final Service service) {
+    String _name = service.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    String _plus = ("I" + _firstUpper);
+    return (_plus + "GWTAsync");
+  }
+  
+  public String gwtAsyncServiceInterfaceFullQualifiedName(final Service service) {
+    String _packageName = this.getPackageName(service);
+    String _plus = (_packageName + ".");
+    String _gwtAsyncServiceInterfaceName = this.gwtAsyncServiceInterfaceName(service);
+    return (_plus + _gwtAsyncServiceInterfaceName);
+  }
+  
+  public String gwtAsyncServiceInterfaceFullQualifiedFileName(final Service service) {
+    String _gwtAsyncServiceInterfaceFullQualifiedName = this.gwtAsyncServiceInterfaceFullQualifiedName(service);
+    String _replaceAll = _gwtAsyncServiceInterfaceFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String gwtAsyncAdapterName(final Service service) {
+    String _name = service.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "GWTAsyncAdapter");
+  }
+  
+  public String gwtAsyncAdapterFullQualifiedName(final Service service) {
+    String _packageName = this.getPackageName(service);
+    String _plus = (_packageName + ".");
+    String _gwtAsyncAdapterName = this.gwtAsyncAdapterName(service);
+    return (_plus + _gwtAsyncAdapterName);
+  }
+  
+  public String gwtAsyncAdapterFullQualifiedFileName(final Service service) {
+    String _gwtAsyncAdapterFullQualifiedName = this.gwtAsyncAdapterFullQualifiedName(service);
+    String _replaceAll = _gwtAsyncAdapterFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String gwtRemoteServiceLocatorName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "GwtRemoteServiceLocator");
+  }
+  
+  public String gwtRemoteServiceLocatorFullQualifiedName(final Model model) {
+    String _modelPackageName = this.modelPackageName(model);
+    String _plus = (_modelPackageName + ".");
+    String _gwtRemoteServiceLocatorName = this.gwtRemoteServiceLocatorName(model);
+    return (_plus + _gwtRemoteServiceLocatorName);
+  }
+  
+  public String gwtRemoteServiceLocatorFullQualifiedFileName(final Model model) {
+    String _gwtRemoteServiceLocatorFullQualifiedName = this.gwtRemoteServiceLocatorFullQualifiedName(model);
+    String _replaceAll = _gwtRemoteServiceLocatorFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String gwtRemoteServiceLocatorInterfaceName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    String _plus = ("I" + _firstUpper);
+    return (_plus + "GwtRemoteServiceLocator");
+  }
+  
+  public String gwtRemoteServiceLocatorInterfaceFullQualifiedName(final Model model) {
+    String _modelPackageName = this.modelPackageName(model);
+    String _plus = (_modelPackageName + ".");
+    String _gwtRemoteServiceLocatorInterfaceName = this.gwtRemoteServiceLocatorInterfaceName(model);
+    return (_plus + _gwtRemoteServiceLocatorInterfaceName);
+  }
+  
+  public String gwtRemoteServiceLocatorInterfaceFullQualifiedFileName(final Model model) {
+    String _gwtRemoteServiceLocatorInterfaceFullQualifiedName = this.gwtRemoteServiceLocatorInterfaceFullQualifiedName(model);
+    String _replaceAll = _gwtRemoteServiceLocatorInterfaceFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String baseModuleDefinitionName(final ModuleDefinition moduleDefinition) {
+    String _name = moduleDefinition.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    String _plus = ("Base" + _firstUpper);
+    return (_plus + "Module");
+  }
+  
+  public String baseModuleDefinitionFullQualifiedName(final ModuleDefinition moduleDefinition) {
+    String _packageName = this.getPackageName(moduleDefinition);
+    String _plus = (_packageName + ".");
+    String _baseModuleDefinitionName = this.baseModuleDefinitionName(moduleDefinition);
+    return (_plus + _baseModuleDefinitionName);
+  }
+  
+  public String baseModuleDefinitionFullQualifiedFileName(final ModuleDefinition moduleDefinition) {
+    String _baseModuleDefinitionFullQualifiedName = this.baseModuleDefinitionFullQualifiedName(moduleDefinition);
+    String _replaceAll = _baseModuleDefinitionFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String modelPackageName(final Model model) {
+    PackageDeclaration _singleRootPackage = ModelUtil.getSingleRootPackage(model);
+    String _name = _singleRootPackage.getName();
+    return this.getPackageName(_name);
+  }
+  
+  public String voMapperName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "VOMapper");
+  }
+  
+  public String voMapperFullQualifiedName(final Model model) {
+    String _modelPackageName = this.modelPackageName(model);
+    String _plus = (_modelPackageName + ".");
+    String _voMapperName = this.voMapperName(model);
+    return (_plus + _voMapperName);
+  }
+  
+  public String voMapperFullQualifiedFileName(final Model model) {
+    String _voMapperFullQualifiedName = this.voMapperFullQualifiedName(model);
+    String _replaceAll = _voMapperFullQualifiedName.replaceAll("\\.", "/");
+    return (_replaceAll + ".java");
+  }
+  
+  public String springDBApplicationContextFullQualifiedFileName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "DB-gen.xml");
+  }
+  
+  public String baseApplicationContextFullQualifiedFileName(final Model model) {
+    String _name = model.getName();
+    String _firstUpper = StringExtensions.toFirstUpper(_name);
+    return (_firstUpper + "BaseApplicationContext-gen.xml");
+  }
+  
+  public String springPersistenceXMLFullQualifiedFileName(final Model model) {
+    return "META-INF/persistence.xml";
+  }
+  
+  public String persistenceUnitName(final Model model) {
+    String _name = model.getName();
+    return _name.toLowerCase();
+  }
+  
+  public String jndiName(final Model model) {
+    return this.persistenceUnitName(model);
+  }
+  
+  public String getPackageName(final Object dictionary) {
+    if (dictionary instanceof Dictionary) {
+      return _getPackageName((Dictionary)dictionary);
+    } else if (dictionary instanceof PackageDeclaration) {
+      return _getPackageName((PackageDeclaration)dictionary);
+    } else if (dictionary instanceof DictionaryEditor) {
+      return _getPackageName((DictionaryEditor)dictionary);
+    } else if (dictionary instanceof DictionarySearch) {
+      return _getPackageName((DictionarySearch)dictionary);
+    } else if (dictionary instanceof String) {
+      return _getPackageName((String)dictionary);
+    } else if (dictionary instanceof EObject) {
+      return _getPackageName((EObject)dictionary);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(dictionary).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/TypeUtils.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/TypeUtils.java
index 5eae1ee..3c78689 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/TypeUtils.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/generator/util/TypeUtils.java
@@ -1,734 +1,734 @@
-package io.pelle.mango.dsl.generator.util;
-
-import com.google.common.base.Objects;
-import com.google.inject.Inject;
-import io.pelle.mango.client.base.db.vos.IHierarchicalVO;
-import io.pelle.mango.client.base.vo.AttributeDescriptor;
-import io.pelle.mango.client.base.vo.ChangeTrackingArrayList;
-import io.pelle.mango.client.base.vo.EntityAttributeDescriptor;
-import io.pelle.mango.client.base.vo.IAttributeDescriptor;
-import io.pelle.mango.client.base.vo.IBaseVO;
-import io.pelle.mango.client.base.vo.StringAttributeDescriptor;
-import io.pelle.mango.client.base.vo.query.SelectQuery;
-import io.pelle.mango.dsl.generator.client.ClientNameUtils;
-import io.pelle.mango.dsl.generator.util.AttributeUtils;
-import io.pelle.mango.dsl.generator.util.NameUtils;
-import io.pelle.mango.dsl.mango.BinaryDataType;
-import io.pelle.mango.dsl.mango.BinaryEntityAttribute;
-import io.pelle.mango.dsl.mango.BooleanDataType;
-import io.pelle.mango.dsl.mango.BooleanEntityAttribute;
-import io.pelle.mango.dsl.mango.Cardinality;
-import io.pelle.mango.dsl.mango.CustomEntityAttribute;
-import io.pelle.mango.dsl.mango.CustomType;
-import io.pelle.mango.dsl.mango.Datatype;
-import io.pelle.mango.dsl.mango.Entity;
-import io.pelle.mango.dsl.mango.EntityAttribute;
-import io.pelle.mango.dsl.mango.EntityAttributeType;
-import io.pelle.mango.dsl.mango.EntityDataType;
-import io.pelle.mango.dsl.mango.EntityEntityAttribute;
-import io.pelle.mango.dsl.mango.EntityType;
-import io.pelle.mango.dsl.mango.Enumeration;
-import io.pelle.mango.dsl.mango.EnumerationAttributeType;
-import io.pelle.mango.dsl.mango.EnumerationDataType;
-import io.pelle.mango.dsl.mango.EnumerationEntityAttribute;
-import io.pelle.mango.dsl.mango.Generic;
-import io.pelle.mango.dsl.mango.GenericEntityAttribute;
-import io.pelle.mango.dsl.mango.GenericType;
-import io.pelle.mango.dsl.mango.GenericTypeDefinition;
-import io.pelle.mango.dsl.mango.GenericTypeTypes;
-import io.pelle.mango.dsl.mango.IntegerDataType;
-import io.pelle.mango.dsl.mango.IntegerEntityAttribute;
-import io.pelle.mango.dsl.mango.LongDataType;
-import io.pelle.mango.dsl.mango.LongEntityAttribute;
-import io.pelle.mango.dsl.mango.MangoEntityAttribute;
-import io.pelle.mango.dsl.mango.MangoType;
-import io.pelle.mango.dsl.mango.MangoTypes;
-import io.pelle.mango.dsl.mango.MapEntityAttribute;
-import io.pelle.mango.dsl.mango.SimpleTypeType;
-import io.pelle.mango.dsl.mango.SimpleTypes;
-import io.pelle.mango.dsl.mango.StringDataType;
-import io.pelle.mango.dsl.mango.StringEntityAttribute;
-import io.pelle.mango.dsl.mango.ValueObject;
-import io.pelle.mango.dsl.mango.ValueObjectType;
-import io.pelle.mango.server.base.IBaseClientEntity;
-import java.util.Arrays;
-import java.util.List;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtend2.lib.StringConcatenation;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-@SuppressWarnings("all")
-public class TypeUtils {
-  @Inject
-  @Extension
-  private NameUtils _nameUtils;
-  
-  @Inject
-  @Extension
-  private AttributeUtils _attributeUtils;
-  
-  public String getTypeClassWithCardinality(final Cardinality cardinality, final String type) {
-    String _switchResult = null;
-    if (cardinality != null) {
-      switch (cardinality) {
-        case ONETOMANY:
-          String _name = List.class.getName();
-          _switchResult = (_name + ".class");
-          break;
-        default:
-          _switchResult = (type + ".class");
-          break;
-      }
-    } else {
-      _switchResult = (type + ".class");
-    }
-    return _switchResult;
-  }
-  
-  public String getTypeWithCardinality(final Cardinality cardinality, final String type) {
-    String _switchResult = null;
-    if (cardinality != null) {
-      switch (cardinality) {
-        case ONETOMANY:
-          String _name = List.class.getName();
-          String _plus = (_name + "<");
-          String _plus_1 = (_plus + type);
-          _switchResult = (_plus_1 + ">");
-          break;
-        default:
-          _switchResult = type;
-          break;
-      }
-    } else {
-      _switchResult = type;
-    }
-    return _switchResult;
-  }
-  
-  protected String _getType(final ValueObjectType valueObjectType) {
-    ValueObject _type = valueObjectType.getType();
-    return this._nameUtils.voName(_type);
-  }
-  
-  protected String _getType(final SimpleTypes simpleTypes) {
-    return simpleTypes.getLiteral();
-  }
-  
-  protected String _getType(final SimpleTypeType simpleTypeType) {
-    SimpleTypes _type = simpleTypeType.getType();
-    return this.getType(_type);
-  }
-  
-  protected String _getType(final Datatype dataType) {
-    String _typeClass = this.getTypeClass(dataType);
-    String _format = String.format("Datatype \'%s\' not supported", _typeClass);
-    throw new RuntimeException(_format);
-  }
-  
-  protected String _getTypeClass(final Datatype dataType) {
-    String _type = this.getType(dataType);
-    return (_type + ".class");
-  }
-  
-  protected String _getRawType(final Datatype dataType) {
-    return this.getType(dataType);
-  }
-  
-  protected String _getRawTypeClass(final Datatype dataType) {
-    return this.getTypeClass(dataType);
-  }
-  
-  protected String _getType(final Entity entity) {
-    return this._nameUtils.entityFullQualifiedName(entity);
-  }
-  
-  protected String _getType(final EntityType entityType) {
-    Cardinality _cardinality = entityType.getCardinality();
-    EntityAttributeType _type = entityType.getType();
-    String _type_1 = this.getType(_type);
-    return this.getTypeWithCardinality(_cardinality, _type_1);
-  }
-  
-  protected String _getTypeClass(final Entity entity) {
-    String _type = this.getType(entity);
-    return (_type + ".class");
-  }
-  
-  protected String _getRawType(final Entity entity) {
-    return this.getType(entity);
-  }
-  
-  protected String _getType(final MangoEntityAttribute entityAttribute) {
-    Generic _generic = entityAttribute.getGeneric();
-    boolean _notEquals = (!Objects.equal(_generic, null));
-    if (_notEquals) {
-      MangoTypes _type = entityAttribute.getType();
-      String _type_1 = this.getType(_type);
-      String _plus = (_type_1 + "<");
-      Generic _generic_1 = entityAttribute.getGeneric();
-      String _type_2 = this.getType(_generic_1);
-      String _plus_1 = (_plus + _type_2);
-      return (_plus_1 + ">");
-    } else {
-      MangoTypes _type_3 = entityAttribute.getType();
-      return this.getType(_type_3);
-    }
-  }
-  
-  public CharSequence compileEntityAttributeDescriptorCommon(final EntityAttribute entityAttribute, final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public static ");
-    String _name = IAttributeDescriptor.class.getName();
-    _builder.append(_name, "");
-    _builder.append("<");
-    String _type = this.getType(entityAttribute);
-    _builder.append(_type, "");
-    _builder.append("> ");
-    String _name_1 = entityAttribute.getName();
-    String _attributeConstantName = this._nameUtils.attributeConstantName(_name_1);
-    _builder.append(_attributeConstantName, "");
-    _builder.append(" = new ");
-    String _name_2 = AttributeDescriptor.class.getName();
-    _builder.append(_name_2, "");
-    _builder.append("<");
-    String _type_1 = this.getType(entityAttribute);
-    _builder.append(_type_1, "");
-    _builder.append(">(");
-    {
-      boolean _equals = Objects.equal(entity, null);
-      if (_equals) {
-        Entity _parentEntity = this._attributeUtils.getParentEntity(entityAttribute);
-        String _entityConstantName = this._nameUtils.entityConstantName(_parentEntity);
-        _builder.append(_entityConstantName, "");
-      } else {
-        String _entityConstantName_1 = this._nameUtils.entityConstantName(entity);
-        _builder.append(_entityConstantName_1, "");
-      }
-    }
-    _builder.append(", \"");
-    String _name_3 = entityAttribute.getName();
-    String _attributeName = this._nameUtils.attributeName(_name_3);
-    _builder.append(_attributeName, "");
-    _builder.append("\", ");
-    String _typeClass = this.getTypeClass(entityAttribute);
-    _builder.append(_typeClass, "");
-    _builder.append(", ");
-    String _rawTypeClass = this.getRawTypeClass(entityAttribute);
-    _builder.append(_rawTypeClass, "");
-    _builder.append(");");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected CharSequence _compileEntityAttributeDescriptor(final EntityAttribute entityAttribute, final Entity entity) {
-    return this.compileEntityAttributeDescriptorCommon(entityAttribute, entity);
-  }
-  
-  protected String _getType(final EntityAttribute entityAttribute) {
-    String _typeClass = this.getTypeClass(entityAttribute);
-    String _format = String.format("EntityAttribute \'%s\' not supported", _typeClass);
-    throw new RuntimeException(_format);
-  }
-  
-  protected String _getRawType(final EntityAttribute entityAttribute) {
-    return this.getType(entityAttribute);
-  }
-  
-  protected String _getTypeClass(final EntityAttribute entityAttribute) {
-    String _type = this.getType(entityAttribute);
-    return (_type + ".class");
-  }
-  
-  protected String _getRawTypeClass(final EntityAttribute entityAttribute) {
-    String _rawType = this.getRawType(entityAttribute);
-    return (_rawType + ".class");
-  }
-  
-  protected String _getType(final CustomEntityAttribute entityAttribute) {
-    String _xifexpression = null;
-    String _type = entityAttribute.getType();
-    boolean _notEquals = (!Objects.equal(_type, null));
-    if (_notEquals) {
-      Cardinality _cardinality = entityAttribute.getCardinality();
-      String _type_1 = entityAttribute.getType();
-      _xifexpression = this.getTypeWithCardinality(_cardinality, _type_1);
-    }
-    return _xifexpression;
-  }
-  
-  protected String _getType(final CustomType customType) {
-    Cardinality _cardinality = customType.getCardinality();
-    String _type = customType.getType();
-    return this.getTypeWithCardinality(_cardinality, _type);
-  }
-  
-  protected String _getType(final MangoTypes mangoTypes) {
-    if (mangoTypes != null) {
-      switch (mangoTypes) {
-        case IBASEVO:
-          return IBaseVO.class.getName();
-        case IBASECLIENTVO:
-          return IBaseClientEntity.class.getName();
-        case SELECTQUERY:
-          return SelectQuery.class.getName();
-        case IHIERARCHICALVO:
-          return IHierarchicalVO.class.getName();
-        default:
-          break;
-      }
-    }
-    return null;
-  }
-  
-  protected String _getType(final MangoType mangoType) {
-    Cardinality _cardinality = mangoType.getCardinality();
-    MangoTypes _type = mangoType.getType();
-    String _type_1 = this.getType(_type);
-    return this.getTypeWithCardinality(_cardinality, _type_1);
-  }
-  
-  protected String _getType(final GenericType genericType) {
-    Cardinality _cardinality = genericType.getCardinality();
-    GenericTypeDefinition _genericTypeDefinition = genericType.getGenericTypeDefinition();
-    String _name = _genericTypeDefinition.getName();
-    return this.getTypeWithCardinality(_cardinality, _name);
-  }
-  
-  protected String _getType(final GenericTypeDefinition genericTypeDefinition) {
-    return genericTypeDefinition.getName();
-  }
-  
-  protected String _getType(final GenericEntityAttribute genericEntityAttribute) {
-    GenericTypeDefinition _type = genericEntityAttribute.getType();
-    return this.getType(_type);
-  }
-  
-  protected String _getType(final MapEntityAttribute mapEntityAttribute) {
-    SimpleTypes _keyType = mapEntityAttribute.getKeyType();
-    String _type = this.getType(_keyType);
-    String _plus = ("java.util.Map<" + _type);
-    String _plus_1 = (_plus + ", ");
-    SimpleTypes _valueType = mapEntityAttribute.getValueType();
-    String _type_1 = this.getType(_valueType);
-    String _plus_2 = (_plus_1 + _type_1);
-    return (_plus_2 + ">");
-  }
-  
-  protected String _getType(final EnumerationDataType dataType) {
-    Enumeration _enumeration = dataType.getEnumeration();
-    return this.getType(_enumeration);
-  }
-  
-  protected String _getType(final Enumeration enumeration) {
-    ClientNameUtils clientNameUtils = new ClientNameUtils();
-    return clientNameUtils.enumerationFullQualifiedName(enumeration);
-  }
-  
-  protected String _getType(final BinaryDataType dataType) {
-    return "byte[]";
-  }
-  
-  protected String _getType(final BooleanDataType dataType) {
-    return Boolean.class.getName();
-  }
-  
-  protected String _getType(final StringDataType dataType) {
-    return String.class.getName();
-  }
-  
-  protected String _getType(final IntegerDataType dataType) {
-    return Integer.class.getName();
-  }
-  
-  protected String _getType(final LongDataType dataType) {
-    return Long.class.getName();
-  }
-  
-  protected String _getType(final EntityDataType dataType) {
-    Entity _entity = dataType.getEntity();
-    return this._nameUtils.entityFullQualifiedName(_entity);
-  }
-  
-  protected String _getType(final StringEntityAttribute entityAttribute) {
-    Cardinality _cardinality = entityAttribute.getCardinality();
-    String _rawType = this.getRawType(entityAttribute);
-    return this.getTypeWithCardinality(_cardinality, _rawType);
-  }
-  
-  protected String _getTypeClass(final StringEntityAttribute entityAttribute) {
-    Cardinality _cardinality = entityAttribute.getCardinality();
-    String _rawType = this.getRawType(entityAttribute);
-    return this.getTypeClassWithCardinality(_cardinality, _rawType);
-  }
-  
-  protected String _getRawType(final StringEntityAttribute entityAttribute) {
-    return String.class.getName();
-  }
-  
-  protected CharSequence _compileEntityAttributeDescriptor(final StringEntityAttribute entityAttribute, final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    _builder.append("public static ");
-    String _name = StringAttributeDescriptor.class.getName();
-    _builder.append(_name, "");
-    _builder.append(" ");
-    String _name_1 = entityAttribute.getName();
-    String _attributeConstantName = this._nameUtils.attributeConstantName(_name_1);
-    _builder.append(_attributeConstantName, "");
-    _builder.append(" = new ");
-    String _name_2 = StringAttributeDescriptor.class.getName();
-    _builder.append(_name_2, "");
-    _builder.append("(");
-    String _entityConstantName = this._nameUtils.entityConstantName(entity);
-    _builder.append(_entityConstantName, "");
-    _builder.append(", \"");
-    String _name_3 = entityAttribute.getName();
-    String _attributeName = this._nameUtils.attributeName(_name_3);
-    _builder.append(_attributeName, "");
-    _builder.append("\", ");
-    String _typeClass = this.getTypeClass(entityAttribute);
-    _builder.append(_typeClass, "");
-    _builder.append(");");
-    _builder.newLineIfNotEmpty();
-    return _builder;
-  }
-  
-  protected String _getType(final BooleanEntityAttribute entityAttribute) {
-    return Boolean.class.getName();
-  }
-  
-  protected String _getType(final IntegerEntityAttribute entityAttribute) {
-    return Integer.class.getName();
-  }
-  
-  protected String _getType(final BinaryEntityAttribute entityAttribute) {
-    return "byte[]";
-  }
-  
-  protected String _getType(final LongEntityAttribute entityAttribute) {
-    return Long.class.getName();
-  }
-  
-  protected String _getType(final EntityEntityAttribute entityAttribute) {
-    Cardinality _cardinality = entityAttribute.getCardinality();
-    EntityAttributeType _type = entityAttribute.getType();
-    String _type_1 = this.getType(_type);
-    return this.getTypeWithCardinality(_cardinality, _type_1);
-  }
-  
-  protected String _getTypeClass(final EntityEntityAttribute entityAttribute) {
-    Cardinality _cardinality = entityAttribute.getCardinality();
-    EntityAttributeType _type = entityAttribute.getType();
-    String _type_1 = this.getType(_type);
-    return this.getTypeClassWithCardinality(_cardinality, _type_1);
-  }
-  
-  protected String _getRawType(final EntityEntityAttribute entityAttribute) {
-    EntityAttributeType _type = entityAttribute.getType();
-    return this.getType(_type);
-  }
-  
-  protected String _getRawTypeClass(final EntityEntityAttribute entityAttribute) {
-    EntityAttributeType _type = entityAttribute.getType();
-    String _rawType = this.getRawType(_type);
-    return (_rawType + ".class");
-  }
-  
-  protected CharSequence _compileEntityAttributeDescriptor(final EntityEntityAttribute entityAttribute, final Entity entity) {
-    StringConcatenation _builder = new StringConcatenation();
-    {
-      Cardinality _cardinality = entityAttribute.getCardinality();
-      boolean _equals = Objects.equal(_cardinality, Cardinality.ONETOMANY);
-      if (_equals) {
-        CharSequence _compileEntityAttributeDescriptorCommon = this.compileEntityAttributeDescriptorCommon(entityAttribute, null);
-        _builder.append(_compileEntityAttributeDescriptorCommon, "");
-        _builder.newLineIfNotEmpty();
-      } else {
-        _builder.append("public static ");
-        String _name = EntityAttributeDescriptor.class.getName();
-        _builder.append(_name, "");
-        _builder.append("<");
-        EntityAttributeType _type = entityAttribute.getType();
-        String _rawType = this.getRawType(_type);
-        _builder.append(_rawType, "");
-        _builder.append("> ");
-        String _name_1 = entityAttribute.getName();
-        String _attributeConstantName = this._nameUtils.attributeConstantName(_name_1);
-        _builder.append(_attributeConstantName, "");
-        _builder.append(" = new ");
-        String _name_2 = EntityAttributeDescriptor.class.getName();
-        _builder.append(_name_2, "");
-        _builder.append("<");
-        EntityAttributeType _type_1 = entityAttribute.getType();
-        String _rawType_1 = this.getRawType(_type_1);
-        _builder.append(_rawType_1, "");
-        _builder.append(">(");
-        Entity _parentEntity = this._attributeUtils.getParentEntity(entityAttribute);
-        String _entityConstantName = this._nameUtils.entityConstantName(_parentEntity);
-        _builder.append(_entityConstantName, "");
-        _builder.append(", \"");
-        String _name_3 = entityAttribute.getName();
-        String _attributeName = this._nameUtils.attributeName(_name_3);
-        _builder.append(_attributeName, "");
-        _builder.append("\", ");
-        String _typeClass = this.getTypeClass(entityAttribute);
-        _builder.append(_typeClass, "");
-        _builder.append(");");
-        _builder.newLineIfNotEmpty();
-      }
-    }
-    return _builder;
-  }
-  
-  protected String _getType(final EnumerationEntityAttribute entityAttribute) {
-    EnumerationAttributeType _type = entityAttribute.getType();
-    return this.getType(_type);
-  }
-  
-  protected String _getRawType(final EnumerationEntityAttribute entityAttribute) {
-    EnumerationAttributeType _type = entityAttribute.getType();
-    return this.getType(_type);
-  }
-  
-  protected String _getInitializer(final EntityAttribute entityAttribute) {
-    return null;
-  }
-  
-  protected String _getInitializer(final BooleanEntityAttribute entityAttribute) {
-    return "false";
-  }
-  
-  protected String _getInitializer(final StringEntityAttribute entityAttribute) {
-    String _switchResult = null;
-    Cardinality _cardinality = entityAttribute.getCardinality();
-    if (_cardinality != null) {
-      switch (_cardinality) {
-        case ONETOMANY:
-          String _name = ChangeTrackingArrayList.class.getName();
-          String _plus = ("new " + _name);
-          String _plus_1 = (_plus + "<");
-          String _name_1 = String.class.getName();
-          String _plus_2 = (_plus_1 + _name_1);
-          _switchResult = (_plus_2 + ">()");
-          break;
-        default:
-          _switchResult = null;
-          break;
-      }
-    } else {
-      _switchResult = null;
-    }
-    return _switchResult;
-  }
-  
-  protected String _getInitializer(final EntityEntityAttribute entityAttribute) {
-    String _switchResult = null;
-    Cardinality _cardinality = entityAttribute.getCardinality();
-    if (_cardinality != null) {
-      switch (_cardinality) {
-        case ONETOMANY:
-          String _name = ChangeTrackingArrayList.class.getName();
-          String _plus = ("new " + _name);
-          String _plus_1 = (_plus + "<");
-          String _rawType = this.getRawType(entityAttribute);
-          String _plus_2 = (_plus_1 + _rawType);
-          _switchResult = (_plus_2 + ">()");
-          break;
-        default:
-          _switchResult = null;
-          break;
-      }
-    } else {
-      _switchResult = null;
-    }
-    return _switchResult;
-  }
-  
-  /**
-   * }
-   * def parseSimpleTypeFromString(EnumerationType EnumerationType, String parameterName) FOR EnumerationType-» '''
-   * «fullQualifiedEntityName(this.type)-».valueOf(«parameterName»)
-   * '''
-   */
-  public String parseSimpleTypeFromString(final SimpleTypes simpleTypes, final String parameterName) {
-    if (simpleTypes != null) {
-      switch (simpleTypes) {
-        case LONG:
-          return (("java.lang.Long.parseLong(" + parameterName) + ")");
-        case BIGDECIMAL:
-          return (("java.lang.BigDecimal.parse(" + parameterName) + ")");
-        case BOOLEAN:
-          return (("java.lang.Boolean.parseBoolean(" + parameterName) + ")");
-        case INTEGER:
-          return (("java.lang.Integer.parseInt(" + parameterName) + ")");
-        case STRING:
-          return parameterName;
-        default:
-          String _format = String.format("simple type \'%s\' not implemented", simpleTypes);
-          throw new RuntimeException(_format);
-      }
-    } else {
-      String _format = String.format("simple type \'%s\' not implemented", simpleTypes);
-      throw new RuntimeException(_format);
-    }
-  }
-  
-  public String genericTypeDefinition(final GenericTypeDefinition genericTypeDefinition) {
-    boolean _notEquals = (!Objects.equal(genericTypeDefinition, null));
-    if (_notEquals) {
-      String _name = genericTypeDefinition.getName();
-      String _plus = ("<" + _name);
-      String _plus_1 = (_plus + " extends ");
-      GenericTypeTypes _genericType = genericTypeDefinition.getGenericType();
-      String _type = this.getType(_genericType);
-      String _plus_2 = (_plus_1 + _type);
-      return (_plus_2 + ">");
-    }
-    return null;
-  }
-  
-  public String getType(final Object dataType) {
-    if (dataType instanceof BinaryDataType) {
-      return _getType((BinaryDataType)dataType);
-    } else if (dataType instanceof BinaryEntityAttribute) {
-      return _getType((BinaryEntityAttribute)dataType);
-    } else if (dataType instanceof BooleanDataType) {
-      return _getType((BooleanDataType)dataType);
-    } else if (dataType instanceof BooleanEntityAttribute) {
-      return _getType((BooleanEntityAttribute)dataType);
-    } else if (dataType instanceof EnumerationDataType) {
-      return _getType((EnumerationDataType)dataType);
-    } else if (dataType instanceof EnumerationEntityAttribute) {
-      return _getType((EnumerationEntityAttribute)dataType);
-    } else if (dataType instanceof IntegerDataType) {
-      return _getType((IntegerDataType)dataType);
-    } else if (dataType instanceof IntegerEntityAttribute) {
-      return _getType((IntegerEntityAttribute)dataType);
-    } else if (dataType instanceof LongEntityAttribute) {
-      return _getType((LongEntityAttribute)dataType);
-    } else if (dataType instanceof MapEntityAttribute) {
-      return _getType((MapEntityAttribute)dataType);
-    } else if (dataType instanceof StringDataType) {
-      return _getType((StringDataType)dataType);
-    } else if (dataType instanceof StringEntityAttribute) {
-      return _getType((StringEntityAttribute)dataType);
-    } else if (dataType instanceof EntityDataType) {
-      return _getType((EntityDataType)dataType);
-    } else if (dataType instanceof EntityEntityAttribute) {
-      return _getType((EntityEntityAttribute)dataType);
-    } else if (dataType instanceof CustomEntityAttribute) {
-      return _getType((CustomEntityAttribute)dataType);
-    } else if (dataType instanceof CustomType) {
-      return _getType((CustomType)dataType);
-    } else if (dataType instanceof Datatype) {
-      return _getType((Datatype)dataType);
-    } else if (dataType instanceof Entity) {
-      return _getType((Entity)dataType);
-    } else if (dataType instanceof EntityAttribute) {
-      return _getType((EntityAttribute)dataType);
-    } else if (dataType instanceof EntityType) {
-      return _getType((EntityType)dataType);
-    } else if (dataType instanceof Enumeration) {
-      return _getType((Enumeration)dataType);
-    } else if (dataType instanceof GenericEntityAttribute) {
-      return _getType((GenericEntityAttribute)dataType);
-    } else if (dataType instanceof GenericType) {
-      return _getType((GenericType)dataType);
-    } else if (dataType instanceof MangoEntityAttribute) {
-      return _getType((MangoEntityAttribute)dataType);
-    } else if (dataType instanceof MangoType) {
-      return _getType((MangoType)dataType);
-    } else if (dataType instanceof SimpleTypeType) {
-      return _getType((SimpleTypeType)dataType);
-    } else if (dataType instanceof ValueObjectType) {
-      return _getType((ValueObjectType)dataType);
-    } else if (dataType instanceof GenericTypeDefinition) {
-      return _getType((GenericTypeDefinition)dataType);
-    } else if (dataType instanceof LongDataType) {
-      return _getType((LongDataType)dataType);
-    } else if (dataType instanceof MangoTypes) {
-      return _getType((MangoTypes)dataType);
-    } else if (dataType instanceof SimpleTypes) {
-      return _getType((SimpleTypes)dataType);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(dataType).toString());
-    }
-  }
-  
-  public String getTypeClass(final EObject entityAttribute) {
-    if (entityAttribute instanceof StringEntityAttribute) {
-      return _getTypeClass((StringEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof EntityEntityAttribute) {
-      return _getTypeClass((EntityEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof Datatype) {
-      return _getTypeClass((Datatype)entityAttribute);
-    } else if (entityAttribute instanceof Entity) {
-      return _getTypeClass((Entity)entityAttribute);
-    } else if (entityAttribute instanceof EntityAttribute) {
-      return _getTypeClass((EntityAttribute)entityAttribute);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(entityAttribute).toString());
-    }
-  }
-  
-  public String getRawType(final EObject entityAttribute) {
-    if (entityAttribute instanceof EnumerationEntityAttribute) {
-      return _getRawType((EnumerationEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof StringEntityAttribute) {
-      return _getRawType((StringEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof EntityEntityAttribute) {
-      return _getRawType((EntityEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof Datatype) {
-      return _getRawType((Datatype)entityAttribute);
-    } else if (entityAttribute instanceof Entity) {
-      return _getRawType((Entity)entityAttribute);
-    } else if (entityAttribute instanceof EntityAttribute) {
-      return _getRawType((EntityAttribute)entityAttribute);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(entityAttribute).toString());
-    }
-  }
-  
-  public String getRawTypeClass(final EObject entityAttribute) {
-    if (entityAttribute instanceof EntityEntityAttribute) {
-      return _getRawTypeClass((EntityEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof Datatype) {
-      return _getRawTypeClass((Datatype)entityAttribute);
-    } else if (entityAttribute instanceof EntityAttribute) {
-      return _getRawTypeClass((EntityAttribute)entityAttribute);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(entityAttribute).toString());
-    }
-  }
-  
-  public CharSequence compileEntityAttributeDescriptor(final EntityAttribute entityAttribute, final Entity entity) {
-    if (entityAttribute instanceof StringEntityAttribute) {
-      return _compileEntityAttributeDescriptor((StringEntityAttribute)entityAttribute, entity);
-    } else if (entityAttribute instanceof EntityEntityAttribute) {
-      return _compileEntityAttributeDescriptor((EntityEntityAttribute)entityAttribute, entity);
-    } else if (entityAttribute != null) {
-      return _compileEntityAttributeDescriptor(entityAttribute, entity);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(entityAttribute, entity).toString());
-    }
-  }
-  
-  public String getInitializer(final EntityAttribute entityAttribute) {
-    if (entityAttribute instanceof BooleanEntityAttribute) {
-      return _getInitializer((BooleanEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof StringEntityAttribute) {
-      return _getInitializer((StringEntityAttribute)entityAttribute);
-    } else if (entityAttribute instanceof EntityEntityAttribute) {
-      return _getInitializer((EntityEntityAttribute)entityAttribute);
-    } else if (entityAttribute != null) {
-      return _getInitializer(entityAttribute);
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(entityAttribute).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.generator.util;
+
+import com.google.common.base.Objects;
+import com.google.inject.Inject;
+import io.pelle.mango.client.base.db.vos.IHierarchicalVO;
+import io.pelle.mango.client.base.vo.AttributeDescriptor;
+import io.pelle.mango.client.base.vo.ChangeTrackingArrayList;
+import io.pelle.mango.client.base.vo.EntityAttributeDescriptor;
+import io.pelle.mango.client.base.vo.IAttributeDescriptor;
+import io.pelle.mango.client.base.vo.IBaseVO;
+import io.pelle.mango.client.base.vo.StringAttributeDescriptor;
+import io.pelle.mango.client.base.vo.query.SelectQuery;
+import io.pelle.mango.dsl.generator.client.ClientNameUtils;
+import io.pelle.mango.dsl.generator.util.AttributeUtils;
+import io.pelle.mango.dsl.generator.util.NameUtils;
+import io.pelle.mango.dsl.mango.BinaryDataType;
+import io.pelle.mango.dsl.mango.BinaryEntityAttribute;
+import io.pelle.mango.dsl.mango.BooleanDataType;
+import io.pelle.mango.dsl.mango.BooleanEntityAttribute;
+import io.pelle.mango.dsl.mango.Cardinality;
+import io.pelle.mango.dsl.mango.CustomEntityAttribute;
+import io.pelle.mango.dsl.mango.CustomType;
+import io.pelle.mango.dsl.mango.Datatype;
+import io.pelle.mango.dsl.mango.Entity;
+import io.pelle.mango.dsl.mango.EntityAttribute;
+import io.pelle.mango.dsl.mango.EntityAttributeType;
+import io.pelle.mango.dsl.mango.EntityDataType;
+import io.pelle.mango.dsl.mango.EntityEntityAttribute;
+import io.pelle.mango.dsl.mango.EntityType;
+import io.pelle.mango.dsl.mango.Enumeration;
+import io.pelle.mango.dsl.mango.EnumerationAttributeType;
+import io.pelle.mango.dsl.mango.EnumerationDataType;
+import io.pelle.mango.dsl.mango.EnumerationEntityAttribute;
+import io.pelle.mango.dsl.mango.Generic;
+import io.pelle.mango.dsl.mango.GenericEntityAttribute;
+import io.pelle.mango.dsl.mango.GenericType;
+import io.pelle.mango.dsl.mango.GenericTypeDefinition;
+import io.pelle.mango.dsl.mango.GenericTypeTypes;
+import io.pelle.mango.dsl.mango.IntegerDataType;
+import io.pelle.mango.dsl.mango.IntegerEntityAttribute;
+import io.pelle.mango.dsl.mango.LongDataType;
+import io.pelle.mango.dsl.mango.LongEntityAttribute;
+import io.pelle.mango.dsl.mango.MangoEntityAttribute;
+import io.pelle.mango.dsl.mango.MangoType;
+import io.pelle.mango.dsl.mango.MangoTypes;
+import io.pelle.mango.dsl.mango.MapEntityAttribute;
+import io.pelle.mango.dsl.mango.SimpleTypeType;
+import io.pelle.mango.dsl.mango.SimpleTypes;
+import io.pelle.mango.dsl.mango.StringDataType;
+import io.pelle.mango.dsl.mango.StringEntityAttribute;
+import io.pelle.mango.dsl.mango.ValueObject;
+import io.pelle.mango.dsl.mango.ValueObjectType;
+import io.pelle.mango.server.base.IBaseClientEntity;
+import java.util.Arrays;
+import java.util.List;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+@SuppressWarnings("all")
+public class TypeUtils {
+  @Inject
+  @Extension
+  private NameUtils _nameUtils;
+  
+  @Inject
+  @Extension
+  private AttributeUtils _attributeUtils;
+  
+  public String getTypeClassWithCardinality(final Cardinality cardinality, final String type) {
+    String _switchResult = null;
+    if (cardinality != null) {
+      switch (cardinality) {
+        case ONETOMANY:
+          String _name = List.class.getName();
+          _switchResult = (_name + ".class");
+          break;
+        default:
+          _switchResult = (type + ".class");
+          break;
+      }
+    } else {
+      _switchResult = (type + ".class");
+    }
+    return _switchResult;
+  }
+  
+  public String getTypeWithCardinality(final Cardinality cardinality, final String type) {
+    String _switchResult = null;
+    if (cardinality != null) {
+      switch (cardinality) {
+        case ONETOMANY:
+          String _name = List.class.getName();
+          String _plus = (_name + "<");
+          String _plus_1 = (_plus + type);
+          _switchResult = (_plus_1 + ">");
+          break;
+        default:
+          _switchResult = type;
+          break;
+      }
+    } else {
+      _switchResult = type;
+    }
+    return _switchResult;
+  }
+  
+  protected String _getType(final ValueObjectType valueObjectType) {
+    ValueObject _type = valueObjectType.getType();
+    return this._nameUtils.voName(_type);
+  }
+  
+  protected String _getType(final SimpleTypes simpleTypes) {
+    return simpleTypes.getLiteral();
+  }
+  
+  protected String _getType(final SimpleTypeType simpleTypeType) {
+    SimpleTypes _type = simpleTypeType.getType();
+    return this.getType(_type);
+  }
+  
+  protected String _getType(final Datatype dataType) {
+    String _typeClass = this.getTypeClass(dataType);
+    String _format = String.format("Datatype \'%s\' not supported", _typeClass);
+    throw new RuntimeException(_format);
+  }
+  
+  protected String _getTypeClass(final Datatype dataType) {
+    String _type = this.getType(dataType);
+    return (_type + ".class");
+  }
+  
+  protected String _getRawType(final Datatype dataType) {
+    return this.getType(dataType);
+  }
+  
+  protected String _getRawTypeClass(final Datatype dataType) {
+    return this.getTypeClass(dataType);
+  }
+  
+  protected String _getType(final Entity entity) {
+    return this._nameUtils.entityFullQualifiedName(entity);
+  }
+  
+  protected String _getType(final EntityType entityType) {
+    Cardinality _cardinality = entityType.getCardinality();
+    EntityAttributeType _type = entityType.getType();
+    String _type_1 = this.getType(_type);
+    return this.getTypeWithCardinality(_cardinality, _type_1);
+  }
+  
+  protected String _getTypeClass(final Entity entity) {
+    String _type = this.getType(entity);
+    return (_type + ".class");
+  }
+  
+  protected String _getRawType(final Entity entity) {
+    return this.getType(entity);
+  }
+  
+  protected String _getType(final MangoEntityAttribute entityAttribute) {
+    Generic _generic = entityAttribute.getGeneric();
+    boolean _notEquals = (!Objects.equal(_generic, null));
+    if (_notEquals) {
+      MangoTypes _type = entityAttribute.getType();
+      String _type_1 = this.getType(_type);
+      String _plus = (_type_1 + "<");
+      Generic _generic_1 = entityAttribute.getGeneric();
+      String _type_2 = this.getType(_generic_1);
+      String _plus_1 = (_plus + _type_2);
+      return (_plus_1 + ">");
+    } else {
+      MangoTypes _type_3 = entityAttribute.getType();
+      return this.getType(_type_3);
+    }
+  }
+  
+  public CharSequence compileEntityAttributeDescriptorCommon(final EntityAttribute entityAttribute, final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public static ");
+    String _name = IAttributeDescriptor.class.getName();
+    _builder.append(_name, "");
+    _builder.append("<");
+    String _type = this.getType(entityAttribute);
+    _builder.append(_type, "");
+    _builder.append("> ");
+    String _name_1 = entityAttribute.getName();
+    String _attributeConstantName = this._nameUtils.attributeConstantName(_name_1);
+    _builder.append(_attributeConstantName, "");
+    _builder.append(" = new ");
+    String _name_2 = AttributeDescriptor.class.getName();
+    _builder.append(_name_2, "");
+    _builder.append("<");
+    String _type_1 = this.getType(entityAttribute);
+    _builder.append(_type_1, "");
+    _builder.append(">(");
+    {
+      boolean _equals = Objects.equal(entity, null);
+      if (_equals) {
+        Entity _parentEntity = this._attributeUtils.getParentEntity(entityAttribute);
+        String _entityConstantName = this._nameUtils.entityConstantName(_parentEntity);
+        _builder.append(_entityConstantName, "");
+      } else {
+        String _entityConstantName_1 = this._nameUtils.entityConstantName(entity);
+        _builder.append(_entityConstantName_1, "");
+      }
+    }
+    _builder.append(", \"");
+    String _name_3 = entityAttribute.getName();
+    String _attributeName = this._nameUtils.attributeName(_name_3);
+    _builder.append(_attributeName, "");
+    _builder.append("\", ");
+    String _typeClass = this.getTypeClass(entityAttribute);
+    _builder.append(_typeClass, "");
+    _builder.append(", ");
+    String _rawTypeClass = this.getRawTypeClass(entityAttribute);
+    _builder.append(_rawTypeClass, "");
+    _builder.append(");");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected CharSequence _compileEntityAttributeDescriptor(final EntityAttribute entityAttribute, final Entity entity) {
+    return this.compileEntityAttributeDescriptorCommon(entityAttribute, entity);
+  }
+  
+  protected String _getType(final EntityAttribute entityAttribute) {
+    String _typeClass = this.getTypeClass(entityAttribute);
+    String _format = String.format("EntityAttribute \'%s\' not supported", _typeClass);
+    throw new RuntimeException(_format);
+  }
+  
+  protected String _getRawType(final EntityAttribute entityAttribute) {
+    return this.getType(entityAttribute);
+  }
+  
+  protected String _getTypeClass(final EntityAttribute entityAttribute) {
+    String _type = this.getType(entityAttribute);
+    return (_type + ".class");
+  }
+  
+  protected String _getRawTypeClass(final EntityAttribute entityAttribute) {
+    String _rawType = this.getRawType(entityAttribute);
+    return (_rawType + ".class");
+  }
+  
+  protected String _getType(final CustomEntityAttribute entityAttribute) {
+    String _xifexpression = null;
+    String _type = entityAttribute.getType();
+    boolean _notEquals = (!Objects.equal(_type, null));
+    if (_notEquals) {
+      Cardinality _cardinality = entityAttribute.getCardinality();
+      String _type_1 = entityAttribute.getType();
+      _xifexpression = this.getTypeWithCardinality(_cardinality, _type_1);
+    }
+    return _xifexpression;
+  }
+  
+  protected String _getType(final CustomType customType) {
+    Cardinality _cardinality = customType.getCardinality();
+    String _type = customType.getType();
+    return this.getTypeWithCardinality(_cardinality, _type);
+  }
+  
+  protected String _getType(final MangoTypes mangoTypes) {
+    if (mangoTypes != null) {
+      switch (mangoTypes) {
+        case IBASEVO:
+          return IBaseVO.class.getName();
+        case IBASECLIENTVO:
+          return IBaseClientEntity.class.getName();
+        case SELECTQUERY:
+          return SelectQuery.class.getName();
+        case IHIERARCHICALVO:
+          return IHierarchicalVO.class.getName();
+        default:
+          break;
+      }
+    }
+    return null;
+  }
+  
+  protected String _getType(final MangoType mangoType) {
+    Cardinality _cardinality = mangoType.getCardinality();
+    MangoTypes _type = mangoType.getType();
+    String _type_1 = this.getType(_type);
+    return this.getTypeWithCardinality(_cardinality, _type_1);
+  }
+  
+  protected String _getType(final GenericType genericType) {
+    Cardinality _cardinality = genericType.getCardinality();
+    GenericTypeDefinition _genericTypeDefinition = genericType.getGenericTypeDefinition();
+    String _name = _genericTypeDefinition.getName();
+    return this.getTypeWithCardinality(_cardinality, _name);
+  }
+  
+  protected String _getType(final GenericTypeDefinition genericTypeDefinition) {
+    return genericTypeDefinition.getName();
+  }
+  
+  protected String _getType(final GenericEntityAttribute genericEntityAttribute) {
+    GenericTypeDefinition _type = genericEntityAttribute.getType();
+    return this.getType(_type);
+  }
+  
+  protected String _getType(final MapEntityAttribute mapEntityAttribute) {
+    SimpleTypes _keyType = mapEntityAttribute.getKeyType();
+    String _type = this.getType(_keyType);
+    String _plus = ("java.util.Map<" + _type);
+    String _plus_1 = (_plus + ", ");
+    SimpleTypes _valueType = mapEntityAttribute.getValueType();
+    String _type_1 = this.getType(_valueType);
+    String _plus_2 = (_plus_1 + _type_1);
+    return (_plus_2 + ">");
+  }
+  
+  protected String _getType(final EnumerationDataType dataType) {
+    Enumeration _enumeration = dataType.getEnumeration();
+    return this.getType(_enumeration);
+  }
+  
+  protected String _getType(final Enumeration enumeration) {
+    ClientNameUtils clientNameUtils = new ClientNameUtils();
+    return clientNameUtils.enumerationFullQualifiedName(enumeration);
+  }
+  
+  protected String _getType(final BinaryDataType dataType) {
+    return "byte[]";
+  }
+  
+  protected String _getType(final BooleanDataType dataType) {
+    return Boolean.class.getName();
+  }
+  
+  protected String _getType(final StringDataType dataType) {
+    return String.class.getName();
+  }
+  
+  protected String _getType(final IntegerDataType dataType) {
+    return Integer.class.getName();
+  }
+  
+  protected String _getType(final LongDataType dataType) {
+    return Long.class.getName();
+  }
+  
+  protected String _getType(final EntityDataType dataType) {
+    Entity _entity = dataType.getEntity();
+    return this._nameUtils.entityFullQualifiedName(_entity);
+  }
+  
+  protected String _getType(final StringEntityAttribute entityAttribute) {
+    Cardinality _cardinality = entityAttribute.getCardinality();
+    String _rawType = this.getRawType(entityAttribute);
+    return this.getTypeWithCardinality(_cardinality, _rawType);
+  }
+  
+  protected String _getTypeClass(final StringEntityAttribute entityAttribute) {
+    Cardinality _cardinality = entityAttribute.getCardinality();
+    String _rawType = this.getRawType(entityAttribute);
+    return this.getTypeClassWithCardinality(_cardinality, _rawType);
+  }
+  
+  protected String _getRawType(final StringEntityAttribute entityAttribute) {
+    return String.class.getName();
+  }
+  
+  protected CharSequence _compileEntityAttributeDescriptor(final StringEntityAttribute entityAttribute, final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("public static ");
+    String _name = StringAttributeDescriptor.class.getName();
+    _builder.append(_name, "");
+    _builder.append(" ");
+    String _name_1 = entityAttribute.getName();
+    String _attributeConstantName = this._nameUtils.attributeConstantName(_name_1);
+    _builder.append(_attributeConstantName, "");
+    _builder.append(" = new ");
+    String _name_2 = StringAttributeDescriptor.class.getName();
+    _builder.append(_name_2, "");
+    _builder.append("(");
+    String _entityConstantName = this._nameUtils.entityConstantName(entity);
+    _builder.append(_entityConstantName, "");
+    _builder.append(", \"");
+    String _name_3 = entityAttribute.getName();
+    String _attributeName = this._nameUtils.attributeName(_name_3);
+    _builder.append(_attributeName, "");
+    _builder.append("\", ");
+    String _typeClass = this.getTypeClass(entityAttribute);
+    _builder.append(_typeClass, "");
+    _builder.append(");");
+    _builder.newLineIfNotEmpty();
+    return _builder;
+  }
+  
+  protected String _getType(final BooleanEntityAttribute entityAttribute) {
+    return Boolean.class.getName();
+  }
+  
+  protected String _getType(final IntegerEntityAttribute entityAttribute) {
+    return Integer.class.getName();
+  }
+  
+  protected String _getType(final BinaryEntityAttribute entityAttribute) {
+    return "byte[]";
+  }
+  
+  protected String _getType(final LongEntityAttribute entityAttribute) {
+    return Long.class.getName();
+  }
+  
+  protected String _getType(final EntityEntityAttribute entityAttribute) {
+    Cardinality _cardinality = entityAttribute.getCardinality();
+    EntityAttributeType _type = entityAttribute.getType();
+    String _type_1 = this.getType(_type);
+    return this.getTypeWithCardinality(_cardinality, _type_1);
+  }
+  
+  protected String _getTypeClass(final EntityEntityAttribute entityAttribute) {
+    Cardinality _cardinality = entityAttribute.getCardinality();
+    EntityAttributeType _type = entityAttribute.getType();
+    String _type_1 = this.getType(_type);
+    return this.getTypeClassWithCardinality(_cardinality, _type_1);
+  }
+  
+  protected String _getRawType(final EntityEntityAttribute entityAttribute) {
+    EntityAttributeType _type = entityAttribute.getType();
+    return this.getType(_type);
+  }
+  
+  protected String _getRawTypeClass(final EntityEntityAttribute entityAttribute) {
+    EntityAttributeType _type = entityAttribute.getType();
+    String _rawType = this.getRawType(_type);
+    return (_rawType + ".class");
+  }
+  
+  protected CharSequence _compileEntityAttributeDescriptor(final EntityEntityAttribute entityAttribute, final Entity entity) {
+    StringConcatenation _builder = new StringConcatenation();
+    {
+      Cardinality _cardinality = entityAttribute.getCardinality();
+      boolean _equals = Objects.equal(_cardinality, Cardinality.ONETOMANY);
+      if (_equals) {
+        CharSequence _compileEntityAttributeDescriptorCommon = this.compileEntityAttributeDescriptorCommon(entityAttribute, null);
+        _builder.append(_compileEntityAttributeDescriptorCommon, "");
+        _builder.newLineIfNotEmpty();
+      } else {
+        _builder.append("public static ");
+        String _name = EntityAttributeDescriptor.class.getName();
+        _builder.append(_name, "");
+        _builder.append("<");
+        EntityAttributeType _type = entityAttribute.getType();
+        String _rawType = this.getRawType(_type);
+        _builder.append(_rawType, "");
+        _builder.append("> ");
+        String _name_1 = entityAttribute.getName();
+        String _attributeConstantName = this._nameUtils.attributeConstantName(_name_1);
+        _builder.append(_attributeConstantName, "");
+        _builder.append(" = new ");
+        String _name_2 = EntityAttributeDescriptor.class.getName();
+        _builder.append(_name_2, "");
+        _builder.append("<");
+        EntityAttributeType _type_1 = entityAttribute.getType();
+        String _rawType_1 = this.getRawType(_type_1);
+        _builder.append(_rawType_1, "");
+        _builder.append(">(");
+        Entity _parentEntity = this._attributeUtils.getParentEntity(entityAttribute);
+        String _entityConstantName = this._nameUtils.entityConstantName(_parentEntity);
+        _builder.append(_entityConstantName, "");
+        _builder.append(", \"");
+        String _name_3 = entityAttribute.getName();
+        String _attributeName = this._nameUtils.attributeName(_name_3);
+        _builder.append(_attributeName, "");
+        _builder.append("\", ");
+        String _typeClass = this.getTypeClass(entityAttribute);
+        _builder.append(_typeClass, "");
+        _builder.append(");");
+        _builder.newLineIfNotEmpty();
+      }
+    }
+    return _builder;
+  }
+  
+  protected String _getType(final EnumerationEntityAttribute entityAttribute) {
+    EnumerationAttributeType _type = entityAttribute.getType();
+    return this.getType(_type);
+  }
+  
+  protected String _getRawType(final EnumerationEntityAttribute entityAttribute) {
+    EnumerationAttributeType _type = entityAttribute.getType();
+    return this.getType(_type);
+  }
+  
+  protected String _getInitializer(final EntityAttribute entityAttribute) {
+    return null;
+  }
+  
+  protected String _getInitializer(final BooleanEntityAttribute entityAttribute) {
+    return "false";
+  }
+  
+  protected String _getInitializer(final StringEntityAttribute entityAttribute) {
+    String _switchResult = null;
+    Cardinality _cardinality = entityAttribute.getCardinality();
+    if (_cardinality != null) {
+      switch (_cardinality) {
+        case ONETOMANY:
+          String _name = ChangeTrackingArrayList.class.getName();
+          String _plus = ("new " + _name);
+          String _plus_1 = (_plus + "<");
+          String _name_1 = String.class.getName();
+          String _plus_2 = (_plus_1 + _name_1);
+          _switchResult = (_plus_2 + ">()");
+          break;
+        default:
+          _switchResult = null;
+          break;
+      }
+    } else {
+      _switchResult = null;
+    }
+    return _switchResult;
+  }
+  
+  protected String _getInitializer(final EntityEntityAttribute entityAttribute) {
+    String _switchResult = null;
+    Cardinality _cardinality = entityAttribute.getCardinality();
+    if (_cardinality != null) {
+      switch (_cardinality) {
+        case ONETOMANY:
+          String _name = ChangeTrackingArrayList.class.getName();
+          String _plus = ("new " + _name);
+          String _plus_1 = (_plus + "<");
+          String _rawType = this.getRawType(entityAttribute);
+          String _plus_2 = (_plus_1 + _rawType);
+          _switchResult = (_plus_2 + ">()");
+          break;
+        default:
+          _switchResult = null;
+          break;
+      }
+    } else {
+      _switchResult = null;
+    }
+    return _switchResult;
+  }
+  
+  /**
+   * }
+   * def parseSimpleTypeFromString(EnumerationType EnumerationType, String parameterName) FOR EnumerationType-» '''
+   * «fullQualifiedEntityName(this.type)-».valueOf(«parameterName»)
+   * '''
+   */
+  public String parseSimpleTypeFromString(final SimpleTypes simpleTypes, final String parameterName) {
+    if (simpleTypes != null) {
+      switch (simpleTypes) {
+        case LONG:
+          return (("java.lang.Long.parseLong(" + parameterName) + ")");
+        case BIGDECIMAL:
+          return (("java.lang.BigDecimal.parse(" + parameterName) + ")");
+        case BOOLEAN:
+          return (("java.lang.Boolean.parseBoolean(" + parameterName) + ")");
+        case INTEGER:
+          return (("java.lang.Integer.parseInt(" + parameterName) + ")");
+        case STRING:
+          return parameterName;
+        default:
+          String _format = String.format("simple type \'%s\' not implemented", simpleTypes);
+          throw new RuntimeException(_format);
+      }
+    } else {
+      String _format = String.format("simple type \'%s\' not implemented", simpleTypes);
+      throw new RuntimeException(_format);
+    }
+  }
+  
+  public String genericTypeDefinition(final GenericTypeDefinition genericTypeDefinition) {
+    boolean _notEquals = (!Objects.equal(genericTypeDefinition, null));
+    if (_notEquals) {
+      String _name = genericTypeDefinition.getName();
+      String _plus = ("<" + _name);
+      String _plus_1 = (_plus + " extends ");
+      GenericTypeTypes _genericType = genericTypeDefinition.getGenericType();
+      String _type = this.getType(_genericType);
+      String _plus_2 = (_plus_1 + _type);
+      return (_plus_2 + ">");
+    }
+    return null;
+  }
+  
+  public String getType(final Object dataType) {
+    if (dataType instanceof BinaryDataType) {
+      return _getType((BinaryDataType)dataType);
+    } else if (dataType instanceof BinaryEntityAttribute) {
+      return _getType((BinaryEntityAttribute)dataType);
+    } else if (dataType instanceof BooleanDataType) {
+      return _getType((BooleanDataType)dataType);
+    } else if (dataType instanceof BooleanEntityAttribute) {
+      return _getType((BooleanEntityAttribute)dataType);
+    } else if (dataType instanceof EnumerationDataType) {
+      return _getType((EnumerationDataType)dataType);
+    } else if (dataType instanceof EnumerationEntityAttribute) {
+      return _getType((EnumerationEntityAttribute)dataType);
+    } else if (dataType instanceof IntegerDataType) {
+      return _getType((IntegerDataType)dataType);
+    } else if (dataType instanceof IntegerEntityAttribute) {
+      return _getType((IntegerEntityAttribute)dataType);
+    } else if (dataType instanceof LongEntityAttribute) {
+      return _getType((LongEntityAttribute)dataType);
+    } else if (dataType instanceof MapEntityAttribute) {
+      return _getType((MapEntityAttribute)dataType);
+    } else if (dataType instanceof StringDataType) {
+      return _getType((StringDataType)dataType);
+    } else if (dataType instanceof StringEntityAttribute) {
+      return _getType((StringEntityAttribute)dataType);
+    } else if (dataType instanceof EntityDataType) {
+      return _getType((EntityDataType)dataType);
+    } else if (dataType instanceof EntityEntityAttribute) {
+      return _getType((EntityEntityAttribute)dataType);
+    } else if (dataType instanceof CustomEntityAttribute) {
+      return _getType((CustomEntityAttribute)dataType);
+    } else if (dataType instanceof CustomType) {
+      return _getType((CustomType)dataType);
+    } else if (dataType instanceof Datatype) {
+      return _getType((Datatype)dataType);
+    } else if (dataType instanceof Entity) {
+      return _getType((Entity)dataType);
+    } else if (dataType instanceof EntityAttribute) {
+      return _getType((EntityAttribute)dataType);
+    } else if (dataType instanceof EntityType) {
+      return _getType((EntityType)dataType);
+    } else if (dataType instanceof Enumeration) {
+      return _getType((Enumeration)dataType);
+    } else if (dataType instanceof GenericEntityAttribute) {
+      return _getType((GenericEntityAttribute)dataType);
+    } else if (dataType instanceof GenericType) {
+      return _getType((GenericType)dataType);
+    } else if (dataType instanceof MangoEntityAttribute) {
+      return _getType((MangoEntityAttribute)dataType);
+    } else if (dataType instanceof MangoType) {
+      return _getType((MangoType)dataType);
+    } else if (dataType instanceof SimpleTypeType) {
+      return _getType((SimpleTypeType)dataType);
+    } else if (dataType instanceof ValueObjectType) {
+      return _getType((ValueObjectType)dataType);
+    } else if (dataType instanceof GenericTypeDefinition) {
+      return _getType((GenericTypeDefinition)dataType);
+    } else if (dataType instanceof LongDataType) {
+      return _getType((LongDataType)dataType);
+    } else if (dataType instanceof MangoTypes) {
+      return _getType((MangoTypes)dataType);
+    } else if (dataType instanceof SimpleTypes) {
+      return _getType((SimpleTypes)dataType);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(dataType).toString());
+    }
+  }
+  
+  public String getTypeClass(final EObject entityAttribute) {
+    if (entityAttribute instanceof StringEntityAttribute) {
+      return _getTypeClass((StringEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof EntityEntityAttribute) {
+      return _getTypeClass((EntityEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof Datatype) {
+      return _getTypeClass((Datatype)entityAttribute);
+    } else if (entityAttribute instanceof Entity) {
+      return _getTypeClass((Entity)entityAttribute);
+    } else if (entityAttribute instanceof EntityAttribute) {
+      return _getTypeClass((EntityAttribute)entityAttribute);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(entityAttribute).toString());
+    }
+  }
+  
+  public String getRawType(final EObject entityAttribute) {
+    if (entityAttribute instanceof EnumerationEntityAttribute) {
+      return _getRawType((EnumerationEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof StringEntityAttribute) {
+      return _getRawType((StringEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof EntityEntityAttribute) {
+      return _getRawType((EntityEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof Datatype) {
+      return _getRawType((Datatype)entityAttribute);
+    } else if (entityAttribute instanceof Entity) {
+      return _getRawType((Entity)entityAttribute);
+    } else if (entityAttribute instanceof EntityAttribute) {
+      return _getRawType((EntityAttribute)entityAttribute);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(entityAttribute).toString());
+    }
+  }
+  
+  public String getRawTypeClass(final EObject entityAttribute) {
+    if (entityAttribute instanceof EntityEntityAttribute) {
+      return _getRawTypeClass((EntityEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof Datatype) {
+      return _getRawTypeClass((Datatype)entityAttribute);
+    } else if (entityAttribute instanceof EntityAttribute) {
+      return _getRawTypeClass((EntityAttribute)entityAttribute);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(entityAttribute).toString());
+    }
+  }
+  
+  public CharSequence compileEntityAttributeDescriptor(final EntityAttribute entityAttribute, final Entity entity) {
+    if (entityAttribute instanceof StringEntityAttribute) {
+      return _compileEntityAttributeDescriptor((StringEntityAttribute)entityAttribute, entity);
+    } else if (entityAttribute instanceof EntityEntityAttribute) {
+      return _compileEntityAttributeDescriptor((EntityEntityAttribute)entityAttribute, entity);
+    } else if (entityAttribute != null) {
+      return _compileEntityAttributeDescriptor(entityAttribute, entity);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(entityAttribute, entity).toString());
+    }
+  }
+  
+  public String getInitializer(final EntityAttribute entityAttribute) {
+    if (entityAttribute instanceof BooleanEntityAttribute) {
+      return _getInitializer((BooleanEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof StringEntityAttribute) {
+      return _getInitializer((StringEntityAttribute)entityAttribute);
+    } else if (entityAttribute instanceof EntityEntityAttribute) {
+      return _getInitializer((EntityEntityAttribute)entityAttribute);
+    } else if (entityAttribute != null) {
+      return _getInitializer(entityAttribute);
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(entityAttribute).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/.MangoJvmModelInferrer.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/.MangoJvmModelInferrer.java._trace
index 370abe4..467e43d 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/.MangoJvmModelInferrer.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/.MangoJvmModelInferrer.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/MangoJvmModelInferrer.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/MangoJvmModelInferrer.java
index bea3856..8030e14 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/MangoJvmModelInferrer.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/jvmmodel/MangoJvmModelInferrer.java
@@ -1,67 +1,67 @@
-package io.pelle.mango.dsl.jvmmodel;
-
-import com.google.inject.Inject;
-import io.pelle.mango.dsl.mango.ModelRoot;
-import java.util.Arrays;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
-import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
-import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
-import org.eclipse.xtext.xbase.lib.Extension;
-
-/**
- * <p>Infers a JVM model from the source model.</p>
- * 
- * <p>The JVM model should contain all elements that would appear in the Java code
- * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
- */
-@SuppressWarnings("all")
-public class MangoJvmModelInferrer extends AbstractModelInferrer {
-  /**
-   * convenience API to build and initialize JVM types and their members.
-   */
-  @Inject
-  @Extension
-  private JvmTypesBuilder _jvmTypesBuilder;
-  
-  /**
-   * The dispatch method {@code infer} is called for each instance of the
-   * given element's type that is contained in a resource.
-   * 
-   * @param element
-   *            the model to create one or more
-   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
-   *            types} from.
-   * @param acceptor
-   *            each created
-   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
-   *            without a container should be passed to the acceptor in order
-   *            get attached to the current resource. The acceptor's
-   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
-   *            accept(..)} method takes the constructed empty type for the
-   *            pre-indexing phase. This one is further initialized in the
-   *            indexing phase using the closure you pass to the returned
-   *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
-   *            initializeLater(..)}.
-   * @param isPreIndexingPhase
-   *            whether the method is called in a pre-indexing phase, i.e.
-   *            when the global index is not yet fully updated. You must not
-   *            rely on linking using the index if isPreIndexingPhase is
-   *            <code>true</code>.
-   */
-  protected void _infer(final ModelRoot element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
-  }
-  
-  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
-    if (element instanceof ModelRoot) {
-      _infer((ModelRoot)element, acceptor, isPreIndexingPhase);
-      return;
-    } else if (element != null) {
-      _infer(element, acceptor, isPreIndexingPhase);
-      return;
-    } else {
-      throw new IllegalArgumentException("Unhandled parameter types: " +
-        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
-    }
-  }
-}
+package io.pelle.mango.dsl.jvmmodel;
+
+import com.google.inject.Inject;
+import io.pelle.mango.dsl.mango.ModelRoot;
+import java.util.Arrays;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
+import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
+import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
+import org.eclipse.xtext.xbase.lib.Extension;
+
+/**
+ * <p>Infers a JVM model from the source model.</p>
+ * 
+ * <p>The JVM model should contain all elements that would appear in the Java code
+ * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
+ */
+@SuppressWarnings("all")
+public class MangoJvmModelInferrer extends AbstractModelInferrer {
+  /**
+   * convenience API to build and initialize JVM types and their members.
+   */
+  @Inject
+  @Extension
+  private JvmTypesBuilder _jvmTypesBuilder;
+  
+  /**
+   * The dispatch method {@code infer} is called for each instance of the
+   * given element's type that is contained in a resource.
+   * 
+   * @param element
+   *            the model to create one or more
+   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
+   *            types} from.
+   * @param acceptor
+   *            each created
+   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
+   *            without a container should be passed to the acceptor in order
+   *            get attached to the current resource. The acceptor's
+   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
+   *            accept(..)} method takes the constructed empty type for the
+   *            pre-indexing phase. This one is further initialized in the
+   *            indexing phase using the closure you pass to the returned
+   *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
+   *            initializeLater(..)}.
+   * @param isPreIndexingPhase
+   *            whether the method is called in a pre-indexing phase, i.e.
+   *            when the global index is not yet fully updated. You must not
+   *            rely on linking using the index if isPreIndexingPhase is
+   *            <code>true</code>.
+   */
+  protected void _infer(final ModelRoot element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
+  }
+  
+  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
+    if (element instanceof ModelRoot) {
+      _infer((ModelRoot)element, acceptor, isPreIndexingPhase);
+      return;
+    } else if (element != null) {
+      _infer(element, acceptor, isPreIndexingPhase);
+      return;
+    } else {
+      throw new IllegalArgumentException("Unhandled parameter types: " +
+        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
+    }
+  }
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/.MangoScopeProvider.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/.MangoScopeProvider.java._trace
index 7004209..3b37075 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/.MangoScopeProvider.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/.MangoScopeProvider.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/MangoScopeProvider.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/MangoScopeProvider.java
index 1a43e63..275f211 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/MangoScopeProvider.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/scoping/MangoScopeProvider.java
@@ -1,16 +1,16 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.scoping;
-
-import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
-
-/**
- * This class contains custom scoping description.
- * 
- * see : http://www.eclipse.org/Xtext/documentation.html#scoping
- * on how and when to use it
- */
-@SuppressWarnings("all")
-public class MangoScopeProvider extends AbstractDeclarativeScopeProvider {
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.scoping;
+
+import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
+
+/**
+ * This class contains custom scoping description.
+ * 
+ * see : http://www.eclipse.org/Xtext/documentation.html#scoping
+ * on how and when to use it
+ */
+@SuppressWarnings("all")
+public class MangoScopeProvider extends AbstractDeclarativeScopeProvider {
+}
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/.MangoValidator.java._trace b/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/.MangoValidator.java._trace
index b149400..72e2ca8 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/.MangoValidator.java._trace
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/.MangoValidator.java._trace
Binary files differ
diff --git a/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/MangoValidator.java b/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/MangoValidator.java
index 8c0652d..1bc68e4 100644
--- a/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/MangoValidator.java
+++ b/mango-dsl/xtend-gen/io/pelle/mango/dsl/validation/MangoValidator.java
@@ -1,15 +1,15 @@
-/**
- * generated by Xtext
- */
-package io.pelle.mango.dsl.validation;
-
-import io.pelle.mango.dsl.validation.AbstractMangoValidator;
-
-/**
- * Custom validation rules.
- * 
- * see http://www.eclipse.org/Xtext/documentation.html#validation
- */
-@SuppressWarnings("all")
-public class MangoValidator extends AbstractMangoValidator {
-}
+/**
+ * generated by Xtext
+ */
+package io.pelle.mango.dsl.validation;
+
+import io.pelle.mango.dsl.validation.AbstractMangoValidator;
+
+/**
+ * Custom validation rules.
+ * 
+ * see http://www.eclipse.org/Xtext/documentation.html#validation
+ */
+@SuppressWarnings("all")
+public class MangoValidator extends AbstractMangoValidator {
+}
diff --git a/mango-server-base/.classpath b/mango-server-base/.classpath
index b999250..dd320ce 100644
--- a/mango-server-base/.classpath
+++ b/mango-server-base/.classpath
@@ -1,26 +1,29 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry exported="true" kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry exported="true" kind="src" path="/mango-client-base"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/677abe279b68c5e7490d6d50c6951376238d7d3e/log4j-1.2.17-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/83dfa294b89feda22caba2842cdc32729554dd86/spring-tx-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/1f59d2f924ae718f20441d62336e5e404ef9a226/spring-tx-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/782a71a312dc307fa531023aa66247b9b4a109d/spring-context-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/b71c2baa9bdf23951bb730f42cf27259317d83c4/spring-context-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/138d28200d97f4affe9ccaa47fab54718b438319/spring-core-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/ddd76a3c9e1e1957d81b5294859f67d7fd0c104b/spring-core-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/41eabd53fd4ba5ba2b2d8af6c256a3741f65c2f3/spring-beans-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/c0324f7c7a33ce6fb2d3543ba811828a8f68350e/spring-beans-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/40b25b3a693cb4cc382ddf2e69ff1b29c75a2e7d/spring-expression-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/dac3409a856fadefc7ad36cdc78d2b13af398ef2/spring-expression-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/5c86b94f15523b3b125c35861aeb4ca85897231a/spring-jdbc-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/829b5bd62da37ccb8cfd5eb0fd931b926e6cfd4d/spring-jdbc-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/4d5066f31ea4b9c58957bf8c0c213b13ed44c1c5/spring-web-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/35ff7e39f712a7fba8e1cde344f8f9e2ca3a439c/spring-web-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/d6fd9778619ab87a41ae3aa879a53ee60f160c08/spring-webmvc-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/99a774311815b9b34da8314cc85e9a3ee1e7614e/spring-webmvc-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/dcedf5329d7092d66cc9d2496687a5f29d883eb6/spring-aop-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/78f4f26931a651f8236758b449355fe9204d96c1/spring-aop-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-core/3.2.4.RELEASE/493bc57396a821e8ffa7d99fac77cc79c15e9b7f/spring-security-core-3.2.4.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-core/3.2.4.RELEASE/c63f2deae158ec91d0dc4e6a932ca8d675bd7c43/spring-security-core-3.2.4.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-web/3.2.4.RELEASE/197d803ab63dd3523d9df186505fc1cc93044334/spring-security-web-3.2.4.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-web/3.2.4.RELEASE/d4d242890361847b7167fa6ff16b638e0053a524/spring-security-web-3.2.4.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-config/3.2.4.RELEASE/952da051fc959b215c8e5882a7ab1ca5137af036/spring-security-config-3.2.4.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-config/3.2.4.RELEASE/7abcbd88e75b7d813d81f1e7c70c5aa688b35e02/spring-security-config-3.2.4.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/28e0ad201304e4a4abf999ca0570b7cffc352c3c/junit-4.11-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-test/4.0.3.RELEASE/76b870a5aa132b4c0dd78cd061feb3e1652cddd1/spring-test-4.0.3.RELEASE.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-test/4.0.3.RELEASE/299b643be8d3fcb0e4c8f574a7f93d032a8b146e/spring-test-4.0.3.RELEASE-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.apache.derby/derby/10.9.1.0/4538cf5564ab3c262eec65c55fdb13965625589c/derby-10.9.1.0.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/28bb0405fddaf04f15058fbfbe01fe2780d7d3b6/commons-logging-1.1.3-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/235ba8b489512805ac13a8f9ea77a1ca5ebe3e8/aopalliance-1.0.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/4a4b6d692e17846a9f3da036438a7ac491d3c814/aopalliance-1.0-sources.jar"/>
-	<classpathentry exported="true" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar" sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/1dc37250fbc78e23a65a67fbbaf71d2e9cbc3c0b/hamcrest-core-1.3-sources.jar"/>
 	<classpathentry kind="output" path="bin"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER" exported="true"/>
+	<classpathentry kind="src" path="/mango-client-base" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/677abe279b68c5e7490d6d50c6951376238d7d3e/log4j-1.2.17-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/1f59d2f924ae718f20441d62336e5e404ef9a226/spring-tx-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/83dfa294b89feda22caba2842cdc32729554dd86/spring-tx-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/b71c2baa9bdf23951bb730f42cf27259317d83c4/spring-context-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/782a71a312dc307fa531023aa66247b9b4a109d/spring-context-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/ddd76a3c9e1e1957d81b5294859f67d7fd0c104b/spring-core-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/138d28200d97f4affe9ccaa47fab54718b438319/spring-core-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/c0324f7c7a33ce6fb2d3543ba811828a8f68350e/spring-beans-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/41eabd53fd4ba5ba2b2d8af6c256a3741f65c2f3/spring-beans-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/dac3409a856fadefc7ad36cdc78d2b13af398ef2/spring-expression-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/40b25b3a693cb4cc382ddf2e69ff1b29c75a2e7d/spring-expression-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/829b5bd62da37ccb8cfd5eb0fd931b926e6cfd4d/spring-jdbc-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/5c86b94f15523b3b125c35861aeb4ca85897231a/spring-jdbc-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/35ff7e39f712a7fba8e1cde344f8f9e2ca3a439c/spring-web-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/4d5066f31ea4b9c58957bf8c0c213b13ed44c1c5/spring-web-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/99a774311815b9b34da8314cc85e9a3ee1e7614e/spring-webmvc-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/d6fd9778619ab87a41ae3aa879a53ee60f160c08/spring-webmvc-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/78f4f26931a651f8236758b449355fe9204d96c1/spring-aop-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/dcedf5329d7092d66cc9d2496687a5f29d883eb6/spring-aop-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/net.sf.gwt-widget/gwt-sl/1.3-RC1/690bf36cc2bce4cd2cead348a6dee4d4bcf6f221/gwt-sl-1.3-RC1-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/net.sf.gwt-widget/gwt-sl/1.3-RC1/d67545f6f7a6d4ccd1b6b34fbfc30d0e20a8df42/gwt-sl-1.3-RC1.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-core/3.2.4.RELEASE/c63f2deae158ec91d0dc4e6a932ca8d675bd7c43/spring-security-core-3.2.4.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-core/3.2.4.RELEASE/493bc57396a821e8ffa7d99fac77cc79c15e9b7f/spring-security-core-3.2.4.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-web/3.2.4.RELEASE/d4d242890361847b7167fa6ff16b638e0053a524/spring-security-web-3.2.4.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-web/3.2.4.RELEASE/197d803ab63dd3523d9df186505fc1cc93044334/spring-security-web-3.2.4.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-config/3.2.4.RELEASE/7abcbd88e75b7d813d81f1e7c70c5aa688b35e02/spring-security-config-3.2.4.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework.security/spring-security-config/3.2.4.RELEASE/952da051fc959b215c8e5882a7ab1ca5137af036/spring-security-config-3.2.4.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/28e0ad201304e4a4abf999ca0570b7cffc352c3c/junit-4.11-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-test/4.0.3.RELEASE/299b643be8d3fcb0e4c8f574a7f93d032a8b146e/spring-test-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-test/4.0.3.RELEASE/76b870a5aa132b4c0dd78cd061feb3e1652cddd1/spring-test-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.apache.derby/derby/10.9.1.0/4538cf5564ab3c262eec65c55fdb13965625589c/derby-10.9.1.0.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/28bb0405fddaf04f15058fbfbe01fe2780d7d3b6/commons-logging-1.1.3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/4a4b6d692e17846a9f3da036438a7ac491d3c814/aopalliance-1.0-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/235ba8b489512805ac13a8f9ea77a1ca5ebe3e8/aopalliance-1.0.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/cglib/cglib-nodep/2.1_3/fd60a4ee07d2bce9fffcb2a3d88bdcdc1011ea5b/cglib-nodep-2.1_3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/cglib/cglib-nodep/2.1_3/58d3be5953547c0019e5704d6ed4ffda3b0c7c66/cglib-nodep-2.1_3.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/com.google.gwt/gwt-servlet/2.6.1/c32cc6470243fe2703e807e1025ec3354fba0ef8/gwt-servlet-2.6.1-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/com.google.gwt/gwt-servlet/2.6.1/983e26ec957ee3463f8554f4f03a58e16129e8f2/gwt-servlet-2.6.1.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/1dc37250fbc78e23a65a67fbbaf71d2e9cbc3c0b/hamcrest-core-1.3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar" exported="true"/>
 </classpath>
diff --git a/mango-server-base/.settings/org.eclipse.jdt.core.prefs b/mango-server-base/.settings/org.eclipse.jdt.core.prefs
index 34ab624..840441c 100644
--- a/mango-server-base/.settings/org.eclipse.jdt.core.prefs
+++ b/mango-server-base/.settings/org.eclipse.jdt.core.prefs
@@ -1,5 +1,5 @@
 #
-#Fri Jun 13 11:14:47 CEST 2014
+#Fri Jun 20 09:56:38 CEST 2014
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.compliance=1.7
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
diff --git a/mango-server-base/build.gradle b/mango-server-base/build.gradle
index a9987b4..6ae0a63 100644
--- a/mango-server-base/build.gradle
+++ b/mango-server-base/build.gradle
@@ -14,6 +14,7 @@
 	compile group: "org.springframework", name: "spring-web", version: versions.spring
 	compile group: "org.springframework", name: "spring-webmvc", version: versions.spring
 	compile group: "org.springframework", name: "spring-aop", version: versions.spring
+	compile 'net.sf.gwt-widget:gwt-sl:1.3-RC1'
 	
 	compile (group: 'org.springframework.security', name: 'spring-security-core', version: versions.spring_security) {
 		exclude module: "spring-tx"
diff --git a/mango-server-base/src/io/pelle/mango/server/base/util/ProxyServletHeaders.java b/mango-server-base/src/io/pelle/mango/server/base/util/ProxyServletHeaders.java
new file mode 100644
index 0000000..5822aba
--- /dev/null
+++ b/mango-server-base/src/io/pelle/mango/server/base/util/ProxyServletHeaders.java
@@ -0,0 +1,36 @@
+package io.pelle.mango.server.base.util;
+
+public interface ProxyServletHeaders {
+
+	/**
+	 * Key for redirect location header.
+	 */
+	static final String STRING_LOCATION_HEADER_NAME = "Location";
+
+	/**
+	 * Key for content type header.
+	 */
+	static final String STRING_CONTENT_ENGINE_HEADER_NAME = "Content-Type";
+
+	/**
+	 * Key for content length header.
+	 */
+	static final String STRING_CONTENT_LENGTH_HEADER_NAME = "Content-Length";
+
+	/**
+	 * Key for host header
+	 */
+	static final String STRING_HOST_HEADER_NAME = "Host";
+
+
+	/**
+	 * Key for proxy servlet information
+	 */
+	static final String PROXY_SERVLET_URL_HEADER_NAME = "X-ProxyServlet-Path";
+
+	/**
+	 * Original url
+	 */
+	static final String PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME = "X-ProxyServlet-OriginalPath";
+
+}
\ No newline at end of file
diff --git a/mango-server/.classpath b/mango-server/.classpath
index 9755b84..366bf18 100644
--- a/mango-server/.classpath
+++ b/mango-server/.classpath
@@ -1,27 +1,28 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="output" path="bin"/>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER" exported="true"/>
-	<classpathentry kind="src" path="/mango-server-base" exported="true"/>
-	<classpathentry kind="src" path="/mango-db" exported="true"/>
-	<classpathentry kind="src" path="/mango-model" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/677abe279b68c5e7490d6d50c6951376238d7d3e/log4j-1.2.17-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/35ff7e39f712a7fba8e1cde344f8f9e2ca3a439c/spring-web-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/4d5066f31ea4b9c58957bf8c0c213b13ed44c1c5/spring-web-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/99a774311815b9b34da8314cc85e9a3ee1e7614e/spring-webmvc-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/d6fd9778619ab87a41ae3aa879a53ee60f160c08/spring-webmvc-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/javax.servlet/servlet-api/2.5/21599814ad9a605b86f3e6381571beccd861a32/servlet-api-2.5-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/javax.servlet/servlet-api/2.5/5959582d97d8b61f4d154ca9e495aafd16726e34/servlet-api-2.5.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/net.sf.gwt-widget/gwt-sl/1.3-RC1/690bf36cc2bce4cd2cead348a6dee4d4bcf6f221/gwt-sl-1.3-RC1-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/net.sf.gwt-widget/gwt-sl/1.3-RC1/d67545f6f7a6d4ccd1b6b34fbfc30d0e20a8df42/gwt-sl-1.3-RC1.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/28e0ad201304e4a4abf999ca0570b7cffc352c3c/junit-4.11-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/28bb0405fddaf04f15058fbfbe01fe2780d7d3b6/commons-logging-1.1.3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/ddd76a3c9e1e1957d81b5294859f67d7fd0c104b/spring-core-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/138d28200d97f4affe9ccaa47fab54718b438319/spring-core-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/c0324f7c7a33ce6fb2d3543ba811828a8f68350e/spring-beans-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/41eabd53fd4ba5ba2b2d8af6c256a3741f65c2f3/spring-beans-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/4a4b6d692e17846a9f3da036438a7ac491d3c814/aopalliance-1.0-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/235ba8b489512805ac13a8f9ea77a1ca5ebe3e8/aopalliance-1.0.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/78f4f26931a651f8236758b449355fe9204d96c1/spring-aop-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/dcedf5329d7092d66cc9d2496687a5f29d883eb6/spring-aop-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/dac3409a856fadefc7ad36cdc78d2b13af398ef2/spring-expression-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/40b25b3a693cb4cc382ddf2e69ff1b29c75a2e7d/spring-expression-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/b71c2baa9bdf23951bb730f42cf27259317d83c4/spring-context-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/782a71a312dc307fa531023aa66247b9b4a109d/spring-context-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/cglib/cglib-nodep/2.1_3/fd60a4ee07d2bce9fffcb2a3d88bdcdc1011ea5b/cglib-nodep-2.1_3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/cglib/cglib-nodep/2.1_3/58d3be5953547c0019e5704d6ed4ffda3b0c7c66/cglib-nodep-2.1_3.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/1f59d2f924ae718f20441d62336e5e404ef9a226/spring-tx-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/83dfa294b89feda22caba2842cdc32729554dd86/spring-tx-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/829b5bd62da37ccb8cfd5eb0fd931b926e6cfd4d/spring-jdbc-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/5c86b94f15523b3b125c35861aeb4ca85897231a/spring-jdbc-4.0.3.RELEASE.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/com.google.gwt/gwt-servlet/2.6.1/c32cc6470243fe2703e807e1025ec3354fba0ef8/gwt-servlet-2.6.1-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/com.google.gwt/gwt-servlet/2.6.1/983e26ec957ee3463f8554f4f03a58e16129e8f2/gwt-servlet-2.6.1.jar" exported="true"/>
-	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/1dc37250fbc78e23a65a67fbbaf71d2e9cbc3c0b/hamcrest-core-1.3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar" exported="true"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="output" path="bin"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="test"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER" exported="true"/>
+	<classpathentry kind="src" path="/mango-server-base" exported="true"/>
+	<classpathentry kind="src" path="/mango-db" exported="true"/>
+	<classpathentry kind="src" path="/mango-model" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/677abe279b68c5e7490d6d50c6951376238d7d3e/log4j-1.2.17-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/35ff7e39f712a7fba8e1cde344f8f9e2ca3a439c/spring-web-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-web/4.0.3.RELEASE/4d5066f31ea4b9c58957bf8c0c213b13ed44c1c5/spring-web-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/99a774311815b9b34da8314cc85e9a3ee1e7614e/spring-webmvc-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.0.3.RELEASE/d6fd9778619ab87a41ae3aa879a53ee60f160c08/spring-webmvc-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/javax.servlet/servlet-api/2.5/21599814ad9a605b86f3e6381571beccd861a32/servlet-api-2.5-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/javax.servlet/servlet-api/2.5/5959582d97d8b61f4d154ca9e495aafd16726e34/servlet-api-2.5.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/net.sf.gwt-widget/gwt-sl/1.3-RC1/690bf36cc2bce4cd2cead348a6dee4d4bcf6f221/gwt-sl-1.3-RC1-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/net.sf.gwt-widget/gwt-sl/1.3-RC1/d67545f6f7a6d4ccd1b6b34fbfc30d0e20a8df42/gwt-sl-1.3-RC1.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/28e0ad201304e4a4abf999ca0570b7cffc352c3c/junit-4.11-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/28bb0405fddaf04f15058fbfbe01fe2780d7d3b6/commons-logging-1.1.3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/ddd76a3c9e1e1957d81b5294859f67d7fd0c104b/spring-core-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-core/4.0.3.RELEASE/138d28200d97f4affe9ccaa47fab54718b438319/spring-core-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/c0324f7c7a33ce6fb2d3543ba811828a8f68350e/spring-beans-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-beans/4.0.3.RELEASE/41eabd53fd4ba5ba2b2d8af6c256a3741f65c2f3/spring-beans-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/4a4b6d692e17846a9f3da036438a7ac491d3c814/aopalliance-1.0-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/235ba8b489512805ac13a8f9ea77a1ca5ebe3e8/aopalliance-1.0.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/78f4f26931a651f8236758b449355fe9204d96c1/spring-aop-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-aop/4.0.3.RELEASE/dcedf5329d7092d66cc9d2496687a5f29d883eb6/spring-aop-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/dac3409a856fadefc7ad36cdc78d2b13af398ef2/spring-expression-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-expression/4.0.3.RELEASE/40b25b3a693cb4cc382ddf2e69ff1b29c75a2e7d/spring-expression-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/b71c2baa9bdf23951bb730f42cf27259317d83c4/spring-context-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-context/4.0.3.RELEASE/782a71a312dc307fa531023aa66247b9b4a109d/spring-context-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/cglib/cglib-nodep/2.1_3/fd60a4ee07d2bce9fffcb2a3d88bdcdc1011ea5b/cglib-nodep-2.1_3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/cglib/cglib-nodep/2.1_3/58d3be5953547c0019e5704d6ed4ffda3b0c7c66/cglib-nodep-2.1_3.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/1f59d2f924ae718f20441d62336e5e404ef9a226/spring-tx-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-tx/4.0.3.RELEASE/83dfa294b89feda22caba2842cdc32729554dd86/spring-tx-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/829b5bd62da37ccb8cfd5eb0fd931b926e6cfd4d/spring-jdbc-4.0.3.RELEASE-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.0.3.RELEASE/5c86b94f15523b3b125c35861aeb4ca85897231a/spring-jdbc-4.0.3.RELEASE.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/com.google.gwt/gwt-servlet/2.6.1/c32cc6470243fe2703e807e1025ec3354fba0ef8/gwt-servlet-2.6.1-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/com.google.gwt/gwt-servlet/2.6.1/983e26ec957ee3463f8554f4f03a58e16129e8f2/gwt-servlet-2.6.1.jar" exported="true"/>
+	<classpathentry sourcepath="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/1dc37250fbc78e23a65a67fbbaf71d2e9cbc3c0b/hamcrest-core-1.3-sources.jar" kind="var" path="GRADLE_USER_HOME/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar" exported="true"/>
+</classpath>
diff --git a/mango-server/.project b/mango-server/.project
index 4a71450..42a58f3 100644
--- a/mango-server/.project
+++ b/mango-server/.project
@@ -1,18 +1,18 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>mango-server</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.springsource.ide.eclipse.gradle.core.nature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>mango-server</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.springsource.ide.eclipse.gradle.core.nature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/mango-server/.settings/org.eclipse.jdt.core.prefs b/mango-server/.settings/org.eclipse.jdt.core.prefs
index f9423be..033583c 100644
--- a/mango-server/.settings/org.eclipse.jdt.core.prefs
+++ b/mango-server/.settings/org.eclipse.jdt.core.prefs
@@ -1,13 +1,13 @@
-#
-#Thu Jun 19 22:26:01 CEST 2014
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.source=1.7
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+#
+#Fri Jun 20 09:22:59 CEST 2014
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
diff --git a/mango-server/src/io/pelle/mango/server/gwt/MangoGWTRPCServiceExporter.java b/mango-server/src/io/pelle/mango/server/gwt/MangoGWTRPCServiceExporter.java
new file mode 100644
index 0000000..e61da64
--- /dev/null
+++ b/mango-server/src/io/pelle/mango/server/gwt/MangoGWTRPCServiceExporter.java
@@ -0,0 +1,68 @@
+package io.pelle.mango.server.gwt;
+
+import io.pelle.mango.client.base.util.XPathUtil;
+import io.pelle.mango.server.base.util.ProxyServletHeaders;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.gwtwidgets.server.spring.GWTRPCServiceExporter;
+
+import com.google.gwt.user.server.rpc.SerializationPolicy;
+import com.google.gwt.user.server.rpc.SerializationPolicyLoader;
+
+@SuppressWarnings("serial")
+public class MangoGWTRPCServiceExporter extends GWTRPCServiceExporter {
+
+	@Override
+	protected SerializationPolicy doGetSerializationPolicy(HttpServletRequest request, String moduleBaseURL, String strongName) {
+
+		String newModuleBaseUrl = moduleBaseURL;
+		String originalModuleBaseURL = moduleBaseURL;
+
+		if (request.getHeader(ProxyServletHeaders.PROXY_SERVLET_URL_HEADER_NAME) != null) {
+			try {
+				newModuleBaseUrl = new URL(moduleBaseURL).getPath();
+			} catch (MalformedURLException e) {
+				throw new RuntimeException(String.format("invalid url '%s'", moduleBaseURL));
+			}
+
+			String proxyServletUrl = request.getHeader(ProxyServletHeaders.PROXY_SERVLET_URL_HEADER_NAME);
+			newModuleBaseUrl = XPathUtil.combine(proxyServletUrl, newModuleBaseUrl);
+		}
+
+		if (request.getHeader(ProxyServletHeaders.PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME) != null) {
+			try {
+				originalModuleBaseURL = new URL(moduleBaseURL).getPath();
+				originalModuleBaseURL = originalModuleBaseURL.replaceFirst(request.getServletPath(), "");
+			} catch (MalformedURLException e) {
+				throw new RuntimeException(String.format("invalid url '%s'", moduleBaseURL));
+			}
+
+			String originalBaseUrl = request.getHeader(ProxyServletHeaders.PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME);
+			originalModuleBaseURL = XPathUtil.combine(originalBaseUrl, originalModuleBaseURL);
+
+			try {
+				URL url = new URL(originalModuleBaseURL);
+
+				String newUrl = originalBaseUrl + url.getFile();
+				String fullUrl = SerializationPolicyLoader.getSerializationPolicyFileName(newUrl + strongName);
+				SerializationPolicy serializationPolicy = loadPolicyFromCodeServer(fullUrl);
+
+				if (serializationPolicy != null) {
+					return serializationPolicy;
+				}
+
+			} catch (MalformedURLException e) {
+				throw new RuntimeException(e);
+			}
+
+		}
+
+		return super.doGetSerializationPolicy(request, moduleBaseURL, strongName);
+
+	}
+
+}
diff --git a/mango-server/src/io/pelle/mango/server/gwt/MangoRPCServiceExporterFactory.java b/mango-server/src/io/pelle/mango/server/gwt/MangoRPCServiceExporterFactory.java
new file mode 100644
index 0000000..8082c19
--- /dev/null
+++ b/mango-server/src/io/pelle/mango/server/gwt/MangoRPCServiceExporterFactory.java
@@ -0,0 +1,45 @@
+package io.pelle.mango.server.gwt;
+
+import org.gwtwidgets.server.spring.DefaultRPCServiceExporterFactory;
+import org.gwtwidgets.server.spring.RPCServiceExporter;
+
+public class MangoRPCServiceExporterFactory extends DefaultRPCServiceExporterFactory {
+
+	public MangoRPCServiceExporterFactory() {
+		super();
+		
+//		setModulePathTranslation(new ModulePathTranslation() {
+//			
+//			@Override
+//			public String computeModuleBaseURL(HttpServletRequest request, String moduleBaseURL, String strongName) {
+//				
+//				String result = moduleBaseURL;
+//				
+//				if (request.getHeader(PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME) != null)
+//				{
+//					String originalBaseUrl = request.getHeader(PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME);
+//					
+//					String path1 = request.getServletContext().getContextPath();
+//					String path2 = request.getServletContext().getContextPath();
+//					
+//					try {
+//						URL url = new URL(moduleBaseURL);
+//						result = originalBaseUrl + url.getFile();
+//						
+//					} catch (MalformedURLException e) {
+//						throw new RuntimeException(e);
+//					}
+//					
+//					
+//				}
+//				
+//				return result;
+//			}
+//		});
+	}
+
+	public RPCServiceExporter create() {
+		MangoGWTRPCServiceExporter exporter = new MangoGWTRPCServiceExporter();
+		return exporter;
+	}
+}
diff --git a/mango-server/src/io/pelle/mango/server/util/ProxyServlet.java b/mango-server/src/io/pelle/mango/server/util/ProxyServlet.java
index 248ca5e..fb99905 100644
--- a/mango-server/src/io/pelle/mango/server/util/ProxyServlet.java
+++ b/mango-server/src/io/pelle/mango/server/util/ProxyServlet.java
@@ -1,6 +1,7 @@
 package io.pelle.mango.server.util;
 
 import io.pelle.mango.client.base.util.XPathUtil;
+import io.pelle.mango.server.base.util.ProxyServletHeaders;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
@@ -63,39 +64,10 @@
 	private static final long serialVersionUID = 1L;
 
 	/**
-	 * Key for redirect location header.
-	 */
-	private static final String STRING_LOCATION_HEADER_NAME = "Location";
-
-	/**
-	 * Key for content type header.
-	 */
-	private static final String STRING_CONTENT_ENGINE_HEADER_NAME = "Content-Type";
-
-	/**
-	 * Key for content length header.
-	 */
-	private static final String STRING_CONTENT_LENGTH_HEADER_NAME = "Content-Length";
-
-	/**
-	 * Key for host header
-	 */
-	private static final String STRING_HOST_HEADER_NAME = "Host";
-
-	/**
 	 * The directory to use to temporarily store uploaded files
 	 */
 	private static final File FILE_UPLOAD_TEMP_DIRECTORY = new File(System.getProperty("java.io.tmpdir"));
 
-	/**
-	 * Key for proxy servlet information
-	 */
-	public static final String PROXY_SERVLET_URL_HEADER_NAME = "X-ProxyServlet-Path";
-
-	/**
-	 * Original url
-	 */
-	public static final String PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME = "X-ProxyServlet-OriginalPath";
 
 	/**
 	 * The host to which we are proxying requests. Default value is "localhost".
@@ -222,10 +194,10 @@
 		// Hooray for open source software
 		if (proxyResponseCode >= HttpServletResponse.SC_MULTIPLE_CHOICES /* 300 */&& proxyResponseCode < HttpServletResponse.SC_NOT_MODIFIED /* 304 */) {
 			String statusCode = Integer.toString(proxyResponseCode);
-			String location = httpMethodProxyRequest.getResponseHeader(STRING_LOCATION_HEADER_NAME).getValue();
+			String location = httpMethodProxyRequest.getResponseHeader(ProxyServletHeaders.STRING_LOCATION_HEADER_NAME).getValue();
 
 			if (location == null) {
-				throw new ServletException("Received status code: " + statusCode + " but no " + STRING_LOCATION_HEADER_NAME + " header was found in the response");
+				throw new ServletException("Received status code: " + statusCode + " but no " + ProxyServletHeaders.STRING_LOCATION_HEADER_NAME + " header was found in the response");
 			}
 			// Modify the redirect to go to this proxy servlet rather that the
 			// proxied host
@@ -260,7 +232,7 @@
 			// header and the data on disk has not changed; server
 			// responds w/ a 304 saying I'm not going to send the
 			// body because the file has not changed.
-			httpServletResponse.setIntHeader(STRING_CONTENT_LENGTH_HEADER_NAME, 0);
+			httpServletResponse.setIntHeader(ProxyServletHeaders.STRING_CONTENT_LENGTH_HEADER_NAME, 0);
 			httpServletResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
 			return;
 		}
@@ -299,10 +271,10 @@
 
 		if (isBodyParameterGzipped(responseHeaders)) {
 			if (!this.followRedirects && proxyResponseCode == HttpServletResponse.SC_MOVED_TEMPORARILY) {
-				response = httpMethodProxyRequest.getResponseHeader(STRING_LOCATION_HEADER_NAME).getValue();
+				response = httpMethodProxyRequest.getResponseHeader(ProxyServletHeaders.STRING_LOCATION_HEADER_NAME).getValue();
 				httpServletResponse.setStatus(HttpServletResponse.SC_OK);
 				proxyResponseCode = HttpServletResponse.SC_OK;
-				httpServletResponse.setHeader(STRING_LOCATION_HEADER_NAME, response);
+				httpServletResponse.setHeader(ProxyServletHeaders.STRING_LOCATION_HEADER_NAME, response);
 			} else {
 				response = new String(ungzip(httpMethodProxyRequest.getResponseBody()));
 			}
@@ -490,7 +462,7 @@
 			// request. However, we are creating a new request with a new chunk
 			// boundary string, so it is necessary that we re-set the
 			// content-type string to reflect the new chunk boundary string
-			postMethodProxyRequest.setRequestHeader(STRING_CONTENT_ENGINE_HEADER_NAME, multipartRequestEntity.getContentType());
+			postMethodProxyRequest.setRequestHeader(ProxyServletHeaders.STRING_CONTENT_ENGINE_HEADER_NAME, multipartRequestEntity.getContentType());
 		} catch (FileUploadException fileUploadException) {
 			throw new ServletException(fileUploadException);
 		}
@@ -640,7 +612,7 @@
 		Enumeration<String> headerNames = httpServletRequest.getHeaderNames();
 		while (headerNames.hasMoreElements()) {
 			String headerName = headerNames.nextElement();
-			if (headerName.equalsIgnoreCase(STRING_CONTENT_LENGTH_HEADER_NAME)) {
+			if (headerName.equalsIgnoreCase(ProxyServletHeaders.STRING_CONTENT_LENGTH_HEADER_NAME)) {
 				continue;
 			}
 
@@ -657,7 +629,7 @@
 				// In case the proxy host is running multiple virtual servers,
 				// rewrite the Host header to ensure that we get content from
 				// the correct virtual server
-				if (headerName.equalsIgnoreCase(STRING_HOST_HEADER_NAME)) {
+				if (headerName.equalsIgnoreCase(ProxyServletHeaders.STRING_HOST_HEADER_NAME)) {
 					headerValue = getProxyHostAndPort();
 				}
 
@@ -667,8 +639,8 @@
 			}
 		}
 
-		Header proxyHeader = new Header(PROXY_SERVLET_URL_HEADER_NAME, getProxyURL());
-		Header originalUrlHeader = new Header(PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME, getOriginalURL(httpServletRequest));
+		Header proxyHeader = new Header(ProxyServletHeaders.PROXY_SERVLET_URL_HEADER_NAME, getProxyURL());
+		Header originalUrlHeader = new Header(ProxyServletHeaders.PROXY_SERVLET_ORIGINAL_BASE_URL_HEADER_NAME, getOriginalURL(httpServletRequest));
 
 		// Set the same header on the proxy request
 		httpMethodProxyRequest.setRequestHeader(proxyHeader);